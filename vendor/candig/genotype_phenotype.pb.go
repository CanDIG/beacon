// Code generated by protoc-gen-go. DO NOT EDIT.
// source: candig/genotype_phenotype.proto

package candig

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_struct "github.com/golang/protobuf/ptypes/struct"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// The top level container for phenotype association data.
type PhenotypeAssociationSet struct {
	// The phenotype association set ID.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The phenotype association set name.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// The ID of the dataset this phenotype association set belongs to.
	DatasetId string `protobuf:"bytes,3,opt,name=dataset_id,json=datasetId,proto3" json:"dataset_id,omitempty"`
	// Optional additional information for this phenotype association set.
	Info                 map[string]*_struct.ListValue `protobuf:"bytes,4,rep,name=info,proto3" json:"info,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}                      `json:"-"`
	XXX_unrecognized     []byte                        `json:"-"`
	XXX_sizecache        int32                         `json:"-"`
}

func (m *PhenotypeAssociationSet) Reset()         { *m = PhenotypeAssociationSet{} }
func (m *PhenotypeAssociationSet) String() string { return proto.CompactTextString(m) }
func (*PhenotypeAssociationSet) ProtoMessage()    {}
func (*PhenotypeAssociationSet) Descriptor() ([]byte, []int) {
	return fileDescriptor_d1507c7479949fd7, []int{0}
}

func (m *PhenotypeAssociationSet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PhenotypeAssociationSet.Unmarshal(m, b)
}
func (m *PhenotypeAssociationSet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PhenotypeAssociationSet.Marshal(b, m, deterministic)
}
func (m *PhenotypeAssociationSet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PhenotypeAssociationSet.Merge(m, src)
}
func (m *PhenotypeAssociationSet) XXX_Size() int {
	return xxx_messageInfo_PhenotypeAssociationSet.Size(m)
}
func (m *PhenotypeAssociationSet) XXX_DiscardUnknown() {
	xxx_messageInfo_PhenotypeAssociationSet.DiscardUnknown(m)
}

var xxx_messageInfo_PhenotypeAssociationSet proto.InternalMessageInfo

func (m *PhenotypeAssociationSet) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *PhenotypeAssociationSet) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *PhenotypeAssociationSet) GetDatasetId() string {
	if m != nil {
		return m.DatasetId
	}
	return ""
}

func (m *PhenotypeAssociationSet) GetInfo() map[string]*_struct.ListValue {
	if m != nil {
		return m.Info
	}
	return nil
}

// The context in which a genotype gives rise to a phenotype.
// This is fairly open-ended; as a stub we have a simple ontology term.
// For example, a controlled term for a drug, or perhaps an instance of a
// complex environment including temperature and air quality, or perhaps
// the anatomical environment (gut vs tissue type vs whole organism).
type EnvironmentalContext struct {
	// The Environment ID.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Examples of some environment types could be drawn from:
	// Ontology for Biomedical Investigations (OBI): http://purl.obofoundry.org/obo/obi/browse
	// Chemical Entities of Interest (ChEBI): http://www.ontobee.org/browser/index.php?o=chebi
	// Environment Ontology (ENVO):  http://www.ontobee.org/browser/index.php?o=ENVO
	// Anatomy (Uberon): http://www.ontobee.org/browser/index.php?o=uberon
	EnvironmentType *OntologyTerm `protobuf:"bytes,2,opt,name=environment_type,json=environmentType,proto3" json:"environment_type,omitempty"`
	// A textual description of the environment. This is used to complement
	// the structured description in the environmentType field
	Description          string   `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EnvironmentalContext) Reset()         { *m = EnvironmentalContext{} }
func (m *EnvironmentalContext) String() string { return proto.CompactTextString(m) }
func (*EnvironmentalContext) ProtoMessage()    {}
func (*EnvironmentalContext) Descriptor() ([]byte, []int) {
	return fileDescriptor_d1507c7479949fd7, []int{1}
}

func (m *EnvironmentalContext) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EnvironmentalContext.Unmarshal(m, b)
}
func (m *EnvironmentalContext) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EnvironmentalContext.Marshal(b, m, deterministic)
}
func (m *EnvironmentalContext) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EnvironmentalContext.Merge(m, src)
}
func (m *EnvironmentalContext) XXX_Size() int {
	return xxx_messageInfo_EnvironmentalContext.Size(m)
}
func (m *EnvironmentalContext) XXX_DiscardUnknown() {
	xxx_messageInfo_EnvironmentalContext.DiscardUnknown(m)
}

var xxx_messageInfo_EnvironmentalContext proto.InternalMessageInfo

func (m *EnvironmentalContext) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *EnvironmentalContext) GetEnvironmentType() *OntologyTerm {
	if m != nil {
		return m.EnvironmentType
	}
	return nil
}

func (m *EnvironmentalContext) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

// An association to a phenotype and related information.
// This record is intended primarily to be used in conjunction with variants, but
// the record can also be composed with other kinds of entities such as diseases
type PhenotypeInstance struct {
	// The Phenotype ID.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// HPO is recommended
	Type *OntologyTerm `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	// PATO is recommended.  Often this qualifier might be for abnormal/normal,
	// or severity.
	// For example, severe: http://purl.obolibrary.org/obo/PATO_0000396
	// or abnormal: http://purl.obolibrary.org/obo/PATO_0000460
	Qualifier []*OntologyTerm `protobuf:"bytes,3,rep,name=qualifier,proto3" json:"qualifier,omitempty"`
	// HPO is recommended, for example, subclasses of
	// http://www.human-phenotype-ontology.org/hpoweb/showterm?id=HP:0011007
	// TODO: also allow quantitative recording?
	AgeOfOnset *OntologyTerm `protobuf:"bytes,4,opt,name=age_of_onset,json=ageOfOnset,proto3" json:"age_of_onset,omitempty"`
	// A textual description of the phenotype. This is used to complement the
	// structured phenotype description in the type field.
	Description string `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	// Additional annotation data in key-value pairs.
	Info                 map[string]*_struct.ListValue `protobuf:"bytes,6,rep,name=info,proto3" json:"info,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}                      `json:"-"`
	XXX_unrecognized     []byte                        `json:"-"`
	XXX_sizecache        int32                         `json:"-"`
}

func (m *PhenotypeInstance) Reset()         { *m = PhenotypeInstance{} }
func (m *PhenotypeInstance) String() string { return proto.CompactTextString(m) }
func (*PhenotypeInstance) ProtoMessage()    {}
func (*PhenotypeInstance) Descriptor() ([]byte, []int) {
	return fileDescriptor_d1507c7479949fd7, []int{2}
}

func (m *PhenotypeInstance) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PhenotypeInstance.Unmarshal(m, b)
}
func (m *PhenotypeInstance) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PhenotypeInstance.Marshal(b, m, deterministic)
}
func (m *PhenotypeInstance) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PhenotypeInstance.Merge(m, src)
}
func (m *PhenotypeInstance) XXX_Size() int {
	return xxx_messageInfo_PhenotypeInstance.Size(m)
}
func (m *PhenotypeInstance) XXX_DiscardUnknown() {
	xxx_messageInfo_PhenotypeInstance.DiscardUnknown(m)
}

var xxx_messageInfo_PhenotypeInstance proto.InternalMessageInfo

func (m *PhenotypeInstance) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *PhenotypeInstance) GetType() *OntologyTerm {
	if m != nil {
		return m.Type
	}
	return nil
}

func (m *PhenotypeInstance) GetQualifier() []*OntologyTerm {
	if m != nil {
		return m.Qualifier
	}
	return nil
}

func (m *PhenotypeInstance) GetAgeOfOnset() *OntologyTerm {
	if m != nil {
		return m.AgeOfOnset
	}
	return nil
}

func (m *PhenotypeInstance) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *PhenotypeInstance) GetInfo() map[string]*_struct.ListValue {
	if m != nil {
		return m.Info
	}
	return nil
}

// Evidence for the phenotype association.
// This is also a stub for further expansion.  We should consider moving this into
// it's own schema.
type Evidence struct {
	// ECO or OBI is recommended
	EvidenceType *OntologyTerm `protobuf:"bytes,1,opt,name=evidence_type,json=evidenceType,proto3" json:"evidence_type,omitempty"`
	// A textual description of the evidence. This is used to complement the
	// structured description in the evidence_type field
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	// Additional annotation data in key-value pairs.
	Info                 map[string]*_struct.ListValue `protobuf:"bytes,3,rep,name=info,proto3" json:"info,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}                      `json:"-"`
	XXX_unrecognized     []byte                        `json:"-"`
	XXX_sizecache        int32                         `json:"-"`
}

func (m *Evidence) Reset()         { *m = Evidence{} }
func (m *Evidence) String() string { return proto.CompactTextString(m) }
func (*Evidence) ProtoMessage()    {}
func (*Evidence) Descriptor() ([]byte, []int) {
	return fileDescriptor_d1507c7479949fd7, []int{3}
}

func (m *Evidence) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Evidence.Unmarshal(m, b)
}
func (m *Evidence) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Evidence.Marshal(b, m, deterministic)
}
func (m *Evidence) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Evidence.Merge(m, src)
}
func (m *Evidence) XXX_Size() int {
	return xxx_messageInfo_Evidence.Size(m)
}
func (m *Evidence) XXX_DiscardUnknown() {
	xxx_messageInfo_Evidence.DiscardUnknown(m)
}

var xxx_messageInfo_Evidence proto.InternalMessageInfo

func (m *Evidence) GetEvidenceType() *OntologyTerm {
	if m != nil {
		return m.EvidenceType
	}
	return nil
}

func (m *Evidence) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Evidence) GetInfo() map[string]*_struct.ListValue {
	if m != nil {
		return m.Info
	}
	return nil
}

// An association between one or more genomic features and a phenotype.
// The instance of association allows us to link a feature to a phenotype,
// multiple times, each bearing potentially different levels of confidence,
// such as resulting from alternative experiments and analysis.
type FeaturePhenotypeAssociation struct {
	// A unique identifier for the association.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The ID of the PhenotypeAssociationSet this FeaturePhenotypeAssociation
	// belongs to.
	PhenotypeAssociationSetId string `protobuf:"bytes,2,opt,name=phenotype_association_set_id,json=phenotypeAssociationSetId,proto3" json:"phenotype_association_set_id,omitempty"`
	// The set of features of the organism that bears the phenotype.
	// This could be as complete as a full complement of variants,
	// or as minimal as the confirmed variants that are known causation
	// for the annotated phenotype.
	// Examples of features could be variations at the nucleotide level,
	// large rearrangements at the chromosome level, or relevant epigenetic
	// markers.  Relevant genomic feature types are suggested to be
	// those typed in the Sequence Ontology (SO).
	// The feature set can have only one item, and must not be null.
	FeatureIds []string `protobuf:"bytes,3,rep,name=feature_ids,json=featureIds,proto3" json:"feature_ids,omitempty"`
	// The evidence for this specific instance of association between the
	// features and the phenotype.
	Evidence []*Evidence `protobuf:"bytes,4,rep,name=evidence,proto3" json:"evidence,omitempty"`
	// The phenotypic component of this association.
	Phenotype *PhenotypeInstance `protobuf:"bytes,5,opt,name=phenotype,proto3" json:"phenotype,omitempty"`
	// A textual description of the association.
	Description string `protobuf:"bytes,6,opt,name=description,proto3" json:"description,omitempty"`
	// The context in which the phenotype arises.
	// Multiple contexts can be specified - these are assumed to all hold together
	EnvironmentalContexts []*EnvironmentalContext `protobuf:"bytes,7,rep,name=environmental_contexts,json=environmentalContexts,proto3" json:"environmental_contexts,omitempty"`
	// Additional annotation data in key-value pairs.
	Info                 map[string]*_struct.ListValue `protobuf:"bytes,8,rep,name=info,proto3" json:"info,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}                      `json:"-"`
	XXX_unrecognized     []byte                        `json:"-"`
	XXX_sizecache        int32                         `json:"-"`
}

func (m *FeaturePhenotypeAssociation) Reset()         { *m = FeaturePhenotypeAssociation{} }
func (m *FeaturePhenotypeAssociation) String() string { return proto.CompactTextString(m) }
func (*FeaturePhenotypeAssociation) ProtoMessage()    {}
func (*FeaturePhenotypeAssociation) Descriptor() ([]byte, []int) {
	return fileDescriptor_d1507c7479949fd7, []int{4}
}

func (m *FeaturePhenotypeAssociation) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FeaturePhenotypeAssociation.Unmarshal(m, b)
}
func (m *FeaturePhenotypeAssociation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FeaturePhenotypeAssociation.Marshal(b, m, deterministic)
}
func (m *FeaturePhenotypeAssociation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FeaturePhenotypeAssociation.Merge(m, src)
}
func (m *FeaturePhenotypeAssociation) XXX_Size() int {
	return xxx_messageInfo_FeaturePhenotypeAssociation.Size(m)
}
func (m *FeaturePhenotypeAssociation) XXX_DiscardUnknown() {
	xxx_messageInfo_FeaturePhenotypeAssociation.DiscardUnknown(m)
}

var xxx_messageInfo_FeaturePhenotypeAssociation proto.InternalMessageInfo

func (m *FeaturePhenotypeAssociation) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *FeaturePhenotypeAssociation) GetPhenotypeAssociationSetId() string {
	if m != nil {
		return m.PhenotypeAssociationSetId
	}
	return ""
}

func (m *FeaturePhenotypeAssociation) GetFeatureIds() []string {
	if m != nil {
		return m.FeatureIds
	}
	return nil
}

func (m *FeaturePhenotypeAssociation) GetEvidence() []*Evidence {
	if m != nil {
		return m.Evidence
	}
	return nil
}

func (m *FeaturePhenotypeAssociation) GetPhenotype() *PhenotypeInstance {
	if m != nil {
		return m.Phenotype
	}
	return nil
}

func (m *FeaturePhenotypeAssociation) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *FeaturePhenotypeAssociation) GetEnvironmentalContexts() []*EnvironmentalContext {
	if m != nil {
		return m.EnvironmentalContexts
	}
	return nil
}

func (m *FeaturePhenotypeAssociation) GetInfo() map[string]*_struct.ListValue {
	if m != nil {
		return m.Info
	}
	return nil
}

func init() {
	proto.RegisterType((*PhenotypeAssociationSet)(nil), "candig.PhenotypeAssociationSet")
	proto.RegisterMapType((map[string]*_struct.ListValue)(nil), "candig.PhenotypeAssociationSet.InfoEntry")
	proto.RegisterType((*EnvironmentalContext)(nil), "candig.EnvironmentalContext")
	proto.RegisterType((*PhenotypeInstance)(nil), "candig.PhenotypeInstance")
	proto.RegisterMapType((map[string]*_struct.ListValue)(nil), "candig.PhenotypeInstance.InfoEntry")
	proto.RegisterType((*Evidence)(nil), "candig.Evidence")
	proto.RegisterMapType((map[string]*_struct.ListValue)(nil), "candig.Evidence.InfoEntry")
	proto.RegisterType((*FeaturePhenotypeAssociation)(nil), "candig.FeaturePhenotypeAssociation")
	proto.RegisterMapType((map[string]*_struct.ListValue)(nil), "candig.FeaturePhenotypeAssociation.InfoEntry")
}

func init() { proto.RegisterFile("candig/genotype_phenotype.proto", fileDescriptor_d1507c7479949fd7) }

var fileDescriptor_d1507c7479949fd7 = []byte{
	// 576 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x54, 0x51, 0x6b, 0xd4, 0x4c,
	0x14, 0x25, 0xd9, 0x74, 0xbf, 0xe6, 0x6e, 0x3f, 0xad, 0x63, 0xd5, 0x74, 0xad, 0xb4, 0xd4, 0x97,
	0x0a, 0x9a, 0xca, 0x0a, 0x56, 0x05, 0x91, 0x22, 0x15, 0x16, 0x84, 0x4a, 0x5a, 0x7c, 0x0d, 0xd3,
	0xe4, 0x26, 0x0e, 0xee, 0xce, 0xc4, 0xcc, 0x6c, 0x71, 0x7f, 0x80, 0x0f, 0xfe, 0x54, 0xc1, 0x07,
	0x7f, 0x82, 0x64, 0x66, 0x92, 0x2d, 0x4d, 0xba, 0xbe, 0xed, 0xdb, 0xe4, 0xce, 0xc9, 0xbd, 0xe7,
	0xdc, 0x73, 0xe7, 0xc2, 0x6e, 0x42, 0x79, 0xca, 0xf2, 0xc3, 0x1c, 0xb9, 0x50, 0xf3, 0x02, 0xe3,
	0xe2, 0x8b, 0x3d, 0x85, 0x45, 0x29, 0x94, 0x20, 0x7d, 0x03, 0x18, 0xde, 0xb5, 0xc0, 0x44, 0x4c,
	0xa7, 0x82, 0x9b, 0xcb, 0xe1, 0x4e, 0x2e, 0x44, 0x3e, 0xc1, 0x43, 0xfd, 0x75, 0x31, 0xcb, 0x0e,
	0xa5, 0x2a, 0x67, 0x89, 0x32, 0xb7, 0xfb, 0x7f, 0x1c, 0x78, 0xf0, 0xa9, 0x4e, 0x77, 0x2c, 0xa5,
	0x48, 0x18, 0x55, 0x4c, 0xf0, 0x33, 0x54, 0xe4, 0x16, 0xb8, 0x2c, 0x0d, 0x9c, 0x3d, 0xe7, 0xc0,
	0x8f, 0x5c, 0x96, 0x12, 0x02, 0x1e, 0xa7, 0x53, 0x0c, 0x5c, 0x1d, 0xd1, 0x67, 0xf2, 0x08, 0x20,
	0xa5, 0x8a, 0x4a, 0x54, 0x31, 0x4b, 0x83, 0x9e, 0xbe, 0xf1, 0x6d, 0x64, 0x9c, 0x92, 0xb7, 0xe0,
	0x31, 0x9e, 0x89, 0xc0, 0xdb, 0xeb, 0x1d, 0x0c, 0x46, 0x4f, 0x42, 0x43, 0x30, 0xbc, 0xa1, 0x62,
	0x38, 0xe6, 0x99, 0x38, 0xe1, 0xaa, 0x9c, 0x47, 0xfa, 0xb7, 0xe1, 0x19, 0xf8, 0x4d, 0x88, 0x6c,
	0x42, 0xef, 0x2b, 0xce, 0x2d, 0x9f, 0xea, 0x48, 0x9e, 0xc3, 0xda, 0x25, 0x9d, 0xcc, 0x0c, 0xa3,
	0xc1, 0x68, 0x18, 0x1a, 0xa9, 0x61, 0x2d, 0x35, 0xfc, 0xc8, 0xa4, 0xfa, 0x5c, 0x21, 0x22, 0x03,
	0x7c, 0xe3, 0xbe, 0x72, 0xf6, 0x7f, 0x3a, 0xb0, 0x75, 0xc2, 0x2f, 0x59, 0x29, 0xf8, 0x14, 0xb9,
	0xa2, 0x93, 0xf7, 0x82, 0x2b, 0xfc, 0xde, 0xd6, 0xfb, 0x0e, 0x36, 0x71, 0x81, 0x8b, 0x2b, 0xbe,
	0xb6, 0xd2, 0x56, 0x2d, 0xe4, 0x94, 0x2b, 0x31, 0x11, 0xf9, 0xfc, 0x1c, 0xcb, 0x69, 0x74, 0xfb,
	0x0a, 0xfa, 0x7c, 0x5e, 0x20, 0xd9, 0x83, 0x41, 0x8a, 0x32, 0x29, 0x59, 0x51, 0x09, 0xb4, 0xdd,
	0xb9, 0x1a, 0xda, 0xff, 0xe5, 0xc2, 0x9d, 0xa6, 0x19, 0x63, 0x2e, 0x15, 0xe5, 0x09, 0xb6, 0x88,
	0x1c, 0x80, 0xf7, 0xcf, 0xe2, 0x1a, 0x41, 0x46, 0xe0, 0x7f, 0x9b, 0xd1, 0x09, 0xcb, 0x18, 0x96,
	0x41, 0x4f, 0x37, 0xbd, 0x1b, 0xbe, 0x80, 0x91, 0x97, 0xb0, 0x41, 0x73, 0x8c, 0x45, 0x16, 0x0b,
	0x2e, 0x51, 0x05, 0xde, 0x92, 0x2a, 0x40, 0x73, 0x3c, 0xcd, 0x4e, 0x2b, 0xdc, 0x75, 0x75, 0x6b,
	0x2d, 0x75, 0xe4, 0xc8, 0xba, 0xdf, 0xd7, 0x44, 0x1e, 0xb7, 0xdc, 0xaf, 0x05, 0xaf, 0xc6, 0xf7,
	0xdf, 0x0e, 0xac, 0x9f, 0x5c, 0xb2, 0x14, 0xab, 0x16, 0xbf, 0x86, 0xff, 0xd1, 0x9e, 0x8d, 0xb1,
	0xce, 0x12, 0xd5, 0x1b, 0x35, 0xb4, 0xcb, 0x55, 0xb7, 0xad, 0x3b, 0xb4, 0xba, 0x8d, 0x01, 0xc3,
	0x3a, 0x67, 0x5d, 0x7c, 0x35, 0x72, 0x7f, 0x78, 0xf0, 0xf0, 0x03, 0x52, 0x35, 0x2b, 0xb1, 0xeb,
	0xb9, 0x75, 0x4c, 0xfb, 0x4e, 0xb3, 0x57, 0x62, 0xba, 0x00, 0xc6, 0xf6, 0x6d, 0x1b, 0x9d, 0xdb,
	0x45, 0xf7, 0xd3, 0x1d, 0xa7, 0x64, 0x17, 0x06, 0x99, 0xa9, 0x17, 0xb3, 0x54, 0x6a, 0xf1, 0x7e,
	0x04, 0x36, 0x34, 0x4e, 0x25, 0x79, 0x0a, 0xeb, 0x75, 0x23, 0xed, 0x42, 0xd8, 0xbc, 0xde, 0x9a,
	0xa8, 0x41, 0x90, 0x23, 0xf0, 0x9b, 0x5a, 0x7a, 0xb8, 0x06, 0xa3, 0xed, 0x1b, 0x27, 0x28, 0x5a,
	0x60, 0xaf, 0xfb, 0xd3, 0x6f, 0xfb, 0x73, 0x06, 0xf7, 0xf1, 0xea, 0x02, 0x88, 0x13, 0xb3, 0x01,
	0x64, 0xf0, 0x9f, 0xa6, 0xb5, 0xd3, 0xd0, 0xea, 0x58, 0x13, 0xd1, 0x3d, 0xec, 0x88, 0x4a, 0x72,
	0x6c, 0x4d, 0x5f, 0xd7, 0x29, 0x9e, 0xd5, 0x29, 0x96, 0x58, 0xb0, 0x92, 0x39, 0xb8, 0xe8, 0xeb,
	0xeb, 0x17, 0x7f, 0x03, 0x00, 0x00, 0xff, 0xff, 0x84, 0x02, 0x4b, 0xc8, 0x46, 0x06, 0x00, 0x00,
}
