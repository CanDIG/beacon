// Code generated by protoc-gen-go. DO NOT EDIT.
// source: candig/rna_quantification.proto

package candig

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ExpressionUnit int32

const (
	ExpressionUnit_EXPRESSION_UNIT_UNSPECIFIED ExpressionUnit = 0
	ExpressionUnit_FPKM                        ExpressionUnit = 1
	ExpressionUnit_TPM                         ExpressionUnit = 2
	ExpressionUnit_RPKM                        ExpressionUnit = 3
)

var ExpressionUnit_name = map[int32]string{
	0: "EXPRESSION_UNIT_UNSPECIFIED",
	1: "FPKM",
	2: "TPM",
	3: "RPKM",
}

var ExpressionUnit_value = map[string]int32{
	"EXPRESSION_UNIT_UNSPECIFIED": 0,
	"FPKM":                        1,
	"TPM":                         2,
	"RPKM":                        3,
}

func (x ExpressionUnit) String() string {
	return proto.EnumName(ExpressionUnit_name, int32(x))
}

func (ExpressionUnit) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_d4e644dcd133d6a8, []int{0}
}

// A collection of associated RNAQuantifications.  Typically this will be all
// the Quantifications of samples from an experiment.  For example, a time
// course experiment would be described by a RnaQuantificationSet with the
// individual RNASeq experiments of the time point being represented as the
// member RnaQuantifications.
type RnaQuantificationSet struct {
	// The RNA quantification set ID.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The ID of the dataset this RNA Quantification set belongs to.
	DatasetId string `protobuf:"bytes,2,opt,name=dataset_id,json=datasetId,proto3" json:"dataset_id,omitempty"`
	// The RNA quantification set name.
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// A map of additional information about the Quantification Set.
	Attributes           *Attributes `protobuf:"bytes,4,opt,name=attributes,proto3" json:"attributes,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *RnaQuantificationSet) Reset()         { *m = RnaQuantificationSet{} }
func (m *RnaQuantificationSet) String() string { return proto.CompactTextString(m) }
func (*RnaQuantificationSet) ProtoMessage()    {}
func (*RnaQuantificationSet) Descriptor() ([]byte, []int) {
	return fileDescriptor_d4e644dcd133d6a8, []int{0}
}

func (m *RnaQuantificationSet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RnaQuantificationSet.Unmarshal(m, b)
}
func (m *RnaQuantificationSet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RnaQuantificationSet.Marshal(b, m, deterministic)
}
func (m *RnaQuantificationSet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RnaQuantificationSet.Merge(m, src)
}
func (m *RnaQuantificationSet) XXX_Size() int {
	return xxx_messageInfo_RnaQuantificationSet.Size(m)
}
func (m *RnaQuantificationSet) XXX_DiscardUnknown() {
	xxx_messageInfo_RnaQuantificationSet.DiscardUnknown(m)
}

var xxx_messageInfo_RnaQuantificationSet proto.InternalMessageInfo

func (m *RnaQuantificationSet) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *RnaQuantificationSet) GetDatasetId() string {
	if m != nil {
		return m.DatasetId
	}
	return ""
}

func (m *RnaQuantificationSet) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *RnaQuantificationSet) GetAttributes() *Attributes {
	if m != nil {
		return m.Attributes
	}
	return nil
}

// Top level identifying information
type RnaQuantification struct {
	// The unique ID assigned to the results of running the described programs
	// on the specified reads and assignment to the listed annotation.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Name
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Biosample ID
	BiosampleId string `protobuf:"bytes,8,opt,name=biosample_id,json=biosampleId,proto3" json:"biosample_id,omitempty"`
	// Description
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// ID(s) of the ReadGroup(s) providing the reads for the analysis.
	ReadGroupIds []string `protobuf:"bytes,4,rep,name=read_group_ids,json=readGroupIds,proto3" json:"read_group_ids,omitempty"`
	// Programs can be used to track the provenance of how read data was quantified.
	Programs []*Program `protobuf:"bytes,5,rep,name=programs,proto3" json:"programs,omitempty"`
	// List of annotation sets used.
	FeatureSetIds []string `protobuf:"bytes,6,rep,name=feature_set_ids,json=featureSetIds,proto3" json:"feature_set_ids,omitempty"`
	// ID of the containing RnaQuantificationSet.
	RnaQuantificationSetId string `protobuf:"bytes,7,opt,name=rna_quantification_set_id,json=rnaQuantificationSetId,proto3" json:"rna_quantification_set_id,omitempty"`
	// A map of additional information about the Quantification.
	Attributes *Attributes `protobuf:"bytes,9,opt,name=attributes,proto3" json:"attributes,omitempty"`
	// sampleId
	SampleId string `protobuf:"bytes,10,opt,name=sampleId,proto3" json:"sampleId,omitempty"`
	// patientId
	PatientId            string   `protobuf:"bytes,11,opt,name=patientId,proto3" json:"patientId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RnaQuantification) Reset()         { *m = RnaQuantification{} }
func (m *RnaQuantification) String() string { return proto.CompactTextString(m) }
func (*RnaQuantification) ProtoMessage()    {}
func (*RnaQuantification) Descriptor() ([]byte, []int) {
	return fileDescriptor_d4e644dcd133d6a8, []int{1}
}

func (m *RnaQuantification) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RnaQuantification.Unmarshal(m, b)
}
func (m *RnaQuantification) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RnaQuantification.Marshal(b, m, deterministic)
}
func (m *RnaQuantification) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RnaQuantification.Merge(m, src)
}
func (m *RnaQuantification) XXX_Size() int {
	return xxx_messageInfo_RnaQuantification.Size(m)
}
func (m *RnaQuantification) XXX_DiscardUnknown() {
	xxx_messageInfo_RnaQuantification.DiscardUnknown(m)
}

var xxx_messageInfo_RnaQuantification proto.InternalMessageInfo

func (m *RnaQuantification) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *RnaQuantification) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *RnaQuantification) GetBiosampleId() string {
	if m != nil {
		return m.BiosampleId
	}
	return ""
}

func (m *RnaQuantification) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *RnaQuantification) GetReadGroupIds() []string {
	if m != nil {
		return m.ReadGroupIds
	}
	return nil
}

func (m *RnaQuantification) GetPrograms() []*Program {
	if m != nil {
		return m.Programs
	}
	return nil
}

func (m *RnaQuantification) GetFeatureSetIds() []string {
	if m != nil {
		return m.FeatureSetIds
	}
	return nil
}

func (m *RnaQuantification) GetRnaQuantificationSetId() string {
	if m != nil {
		return m.RnaQuantificationSetId
	}
	return ""
}

func (m *RnaQuantification) GetAttributes() *Attributes {
	if m != nil {
		return m.Attributes
	}
	return nil
}

func (m *RnaQuantification) GetSampleId() string {
	if m != nil {
		return m.SampleId
	}
	return ""
}

func (m *RnaQuantification) GetPatientId() string {
	if m != nil {
		return m.PatientId
	}
	return ""
}

// The actual numerical quantification for each feature.
type ExpressionLevel struct {
	//Expression ID
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Name
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// The associated RnaQuantification
	RnaQuantificationId string `protobuf:"bytes,4,opt,name=rna_quantification_id,json=rnaQuantificationId,proto3" json:"rna_quantification_id,omitempty"`
	// The number of reads mapped to this feature.
	RawReadCount float32 `protobuf:"fixed32,5,opt,name=raw_read_count,json=rawReadCount,proto3" json:"raw_read_count,omitempty"`
	// Numerical expression value.
	Expression float32 `protobuf:"fixed32,6,opt,name=expression,proto3" json:"expression,omitempty"`
	// True if the expression value is a normalized value.
	IsNormalized bool `protobuf:"varint,7,opt,name=is_normalized,json=isNormalized,proto3" json:"is_normalized,omitempty"`
	// The units of the expression value if one is given.
	Units ExpressionUnit `protobuf:"varint,8,opt,name=units,proto3,enum=candig.ExpressionUnit" json:"units,omitempty"`
	// Weighted score for the expression value.
	Score float32 `protobuf:"fixed32,9,opt,name=score,proto3" json:"score,omitempty"`
	// Lower bound of the confidence interval on the expression value.
	ConfIntervalLow float32 `protobuf:"fixed32,10,opt,name=conf_interval_low,json=confIntervalLow,proto3" json:"conf_interval_low,omitempty"`
	// Upper bound of the confidence interval on the expression value.
	ConfIntervalHigh float32 `protobuf:"fixed32,11,opt,name=conf_interval_high,json=confIntervalHigh,proto3" json:"conf_interval_high,omitempty"`
	// A map of additional information about the Expression Level.
	Attributes           *Attributes `protobuf:"bytes,12,opt,name=attributes,proto3" json:"attributes,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *ExpressionLevel) Reset()         { *m = ExpressionLevel{} }
func (m *ExpressionLevel) String() string { return proto.CompactTextString(m) }
func (*ExpressionLevel) ProtoMessage()    {}
func (*ExpressionLevel) Descriptor() ([]byte, []int) {
	return fileDescriptor_d4e644dcd133d6a8, []int{2}
}

func (m *ExpressionLevel) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ExpressionLevel.Unmarshal(m, b)
}
func (m *ExpressionLevel) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ExpressionLevel.Marshal(b, m, deterministic)
}
func (m *ExpressionLevel) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExpressionLevel.Merge(m, src)
}
func (m *ExpressionLevel) XXX_Size() int {
	return xxx_messageInfo_ExpressionLevel.Size(m)
}
func (m *ExpressionLevel) XXX_DiscardUnknown() {
	xxx_messageInfo_ExpressionLevel.DiscardUnknown(m)
}

var xxx_messageInfo_ExpressionLevel proto.InternalMessageInfo

func (m *ExpressionLevel) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *ExpressionLevel) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ExpressionLevel) GetRnaQuantificationId() string {
	if m != nil {
		return m.RnaQuantificationId
	}
	return ""
}

func (m *ExpressionLevel) GetRawReadCount() float32 {
	if m != nil {
		return m.RawReadCount
	}
	return 0
}

func (m *ExpressionLevel) GetExpression() float32 {
	if m != nil {
		return m.Expression
	}
	return 0
}

func (m *ExpressionLevel) GetIsNormalized() bool {
	if m != nil {
		return m.IsNormalized
	}
	return false
}

func (m *ExpressionLevel) GetUnits() ExpressionUnit {
	if m != nil {
		return m.Units
	}
	return ExpressionUnit_EXPRESSION_UNIT_UNSPECIFIED
}

func (m *ExpressionLevel) GetScore() float32 {
	if m != nil {
		return m.Score
	}
	return 0
}

func (m *ExpressionLevel) GetConfIntervalLow() float32 {
	if m != nil {
		return m.ConfIntervalLow
	}
	return 0
}

func (m *ExpressionLevel) GetConfIntervalHigh() float32 {
	if m != nil {
		return m.ConfIntervalHigh
	}
	return 0
}

func (m *ExpressionLevel) GetAttributes() *Attributes {
	if m != nil {
		return m.Attributes
	}
	return nil
}

func init() {
	proto.RegisterEnum("candig.ExpressionUnit", ExpressionUnit_name, ExpressionUnit_value)
	proto.RegisterType((*RnaQuantificationSet)(nil), "candig.RnaQuantificationSet")
	proto.RegisterType((*RnaQuantification)(nil), "candig.RnaQuantification")
	proto.RegisterType((*ExpressionLevel)(nil), "candig.ExpressionLevel")
}

func init() { proto.RegisterFile("candig/rna_quantification.proto", fileDescriptor_d4e644dcd133d6a8) }

var fileDescriptor_d4e644dcd133d6a8 = []byte{
	// 588 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x94, 0x5f, 0x4f, 0x1a, 0x4d,
	0x14, 0xc6, 0x5f, 0x76, 0x05, 0xe1, 0x80, 0x80, 0x47, 0x5f, 0xb3, 0xb5, 0x7f, 0xa4, 0xb6, 0x69,
	0x88, 0x35, 0x36, 0xa1, 0x57, 0xbd, 0x6c, 0x2c, 0xb6, 0x9b, 0x2a, 0xa5, 0x83, 0x26, 0xbd, 0xdb,
	0x8c, 0x3b, 0x23, 0x4e, 0x02, 0x33, 0xdb, 0x99, 0x41, 0x9a, 0x7e, 0x87, 0x7e, 0x87, 0x5e, 0xf5,
	0x73, 0x36, 0x3b, 0xbb, 0x6c, 0x51, 0xbc, 0xf0, 0x8e, 0xfd, 0x9d, 0x67, 0x67, 0x9f, 0xf3, 0x3c,
	0x13, 0x60, 0x2f, 0xa6, 0x92, 0x89, 0xf1, 0x1b, 0x2d, 0x69, 0xf4, 0x7d, 0x46, 0xa5, 0x15, 0x57,
	0x22, 0xa6, 0x56, 0x28, 0x79, 0x94, 0x68, 0x65, 0x15, 0x56, 0x32, 0xc1, 0xee, 0x56, 0x2e, 0x8c,
	0xd5, 0x74, 0xba, 0x18, 0xee, 0xff, 0x2a, 0xc1, 0x36, 0x91, 0xf4, 0xeb, 0xad, 0x17, 0x47, 0xdc,
	0x62, 0x13, 0x3c, 0xc1, 0x82, 0x52, 0xa7, 0xd4, 0xad, 0x11, 0x4f, 0x30, 0x7c, 0x0a, 0xc0, 0xa8,
	0xa5, 0x86, 0xdb, 0x48, 0xb0, 0xc0, 0x73, 0xbc, 0x96, 0x93, 0x90, 0x21, 0xc2, 0x9a, 0xa4, 0x53,
	0x1e, 0xf8, 0x6e, 0xe0, 0x7e, 0x63, 0x0f, 0x80, 0x5a, 0xab, 0xc5, 0xe5, 0xcc, 0x72, 0x13, 0xac,
	0x75, 0x4a, 0xdd, 0x7a, 0x0f, 0x8f, 0x32, 0x17, 0x47, 0xef, 0x8b, 0x09, 0x59, 0x52, 0xed, 0xff,
	0xf6, 0x61, 0x73, 0xc5, 0xcf, 0x8a, 0x99, 0xc5, 0xd7, 0xbc, 0xa5, 0xaf, 0x3d, 0x87, 0xc6, 0xa5,
	0x50, 0x86, 0x4e, 0x93, 0x09, 0x4f, 0x2d, 0x56, 0xdd, 0xac, 0x5e, 0xb0, 0x90, 0x61, 0x07, 0xea,
	0x8c, 0x9b, 0x58, 0x8b, 0x24, 0x3d, 0x35, 0xf7, 0xba, 0x8c, 0xf0, 0x25, 0x34, 0x35, 0xa7, 0x2c,
	0x1a, 0x6b, 0x35, 0x4b, 0x22, 0xc1, 0x52, 0xdb, 0x7e, 0xb7, 0x46, 0x1a, 0x29, 0xfd, 0x98, 0xc2,
	0x90, 0x19, 0x7c, 0x0d, 0xd5, 0x44, 0xab, 0xb1, 0xa6, 0x53, 0x13, 0x94, 0x3b, 0x7e, 0xb7, 0xde,
	0x6b, 0x2d, 0xd6, 0x1a, 0x66, 0x9c, 0x14, 0x02, 0x7c, 0x05, 0xad, 0x2b, 0x4e, 0xed, 0x4c, 0xf3,
	0x28, 0x0b, 0xcf, 0x04, 0x15, 0x77, 0xe6, 0x46, 0x8e, 0x47, 0x69, 0x80, 0x06, 0xdf, 0xc1, 0xa3,
	0xd5, 0x0a, 0xf3, 0x57, 0x82, 0x75, 0x67, 0x75, 0x47, 0xdf, 0xd3, 0x54, 0xc8, 0xee, 0x04, 0x5d,
	0x7b, 0x48, 0xd0, 0xb8, 0x0b, 0xd5, 0x45, 0x2e, 0x01, 0xb8, 0xd3, 0x8b, 0x67, 0x7c, 0x02, 0xb5,
	0x84, 0x5a, 0xc1, 0xa5, 0x0d, 0x59, 0x50, 0xcf, 0xaa, 0x2e, 0xc0, 0xfe, 0x1f, 0x1f, 0x5a, 0xfd,
	0x1f, 0x89, 0xe6, 0xc6, 0x08, 0x25, 0x4f, 0xf9, 0x0d, 0x9f, 0x3c, 0xa8, 0xa0, 0x1e, 0xfc, 0x7f,
	0xcf, 0x82, 0x82, 0xb9, 0x9b, 0x51, 0x23, 0x5b, 0x2b, 0xcb, 0x85, 0xcc, 0xf5, 0x41, 0xe7, 0x91,
	0xeb, 0x24, 0x56, 0x33, 0x69, 0x83, 0x72, 0xa7, 0xd4, 0xf5, 0x48, 0x43, 0xd3, 0x39, 0xe1, 0x94,
	0x1d, 0xa7, 0x0c, 0x9f, 0x01, 0xf0, 0xc2, 0x50, 0x50, 0x71, 0x8a, 0x25, 0x82, 0x2f, 0x60, 0x43,
	0x98, 0x48, 0x2a, 0x3d, 0xa5, 0x13, 0xf1, 0x93, 0x67, 0x71, 0x56, 0x49, 0x43, 0x98, 0x41, 0xc1,
	0xf0, 0x10, 0xca, 0x33, 0x29, 0xac, 0x71, 0x17, 0xa7, 0xd9, 0xdb, 0x59, 0xe4, 0xf7, 0x6f, 0xd5,
	0x0b, 0x29, 0x2c, 0xc9, 0x44, 0xb8, 0x0d, 0x65, 0x13, 0x2b, 0xcd, 0x5d, 0xda, 0x1e, 0xc9, 0x1e,
	0xf0, 0x00, 0x36, 0x63, 0x25, 0xaf, 0x22, 0x21, 0x2d, 0xd7, 0x37, 0x74, 0x12, 0x4d, 0xd4, 0xdc,
	0xa5, 0xeb, 0x91, 0x56, 0x3a, 0x08, 0x73, 0x7e, 0xaa, 0xe6, 0x78, 0x08, 0x78, 0x5b, 0x7b, 0x2d,
	0xc6, 0xd7, 0x2e, 0x6d, 0x8f, 0xb4, 0x97, 0xc5, 0x9f, 0xc4, 0xf8, 0xfa, 0x4e, 0xc5, 0x8d, 0x87,
	0x54, 0x7c, 0x30, 0x80, 0xe6, 0x6d, 0xf3, 0xb8, 0x07, 0x8f, 0xfb, 0xdf, 0x86, 0xa4, 0x3f, 0x1a,
	0x85, 0x5f, 0x06, 0xd1, 0xc5, 0x20, 0x3c, 0x8f, 0x2e, 0x06, 0xa3, 0x61, 0xff, 0x38, 0x3c, 0x09,
	0xfb, 0x1f, 0xda, 0xff, 0x61, 0x15, 0xd6, 0x4e, 0x86, 0x9f, 0xcf, 0xda, 0x25, 0x5c, 0x07, 0xff,
	0x7c, 0x78, 0xd6, 0xf6, 0x52, 0x44, 0x52, 0xe4, 0x5f, 0x56, 0xdc, 0x5f, 0xc6, 0xdb, 0xbf, 0x01,
	0x00, 0x00, 0xff, 0xff, 0x30, 0x8a, 0x1e, 0xfe, 0x72, 0x04, 0x00, 0x00,
}
