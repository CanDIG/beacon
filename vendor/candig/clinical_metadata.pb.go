// Code generated by protoc-gen-go. DO NOT EDIT.
// source: candig/clinical_metadata.proto

package candig

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/golang/protobuf/ptypes/struct"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Patient struct {
	// This is unique in the context of the server instance.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The ID of the dataset this object belongs to.
	DatasetId string `protobuf:"bytes,2,opt,name=dataset_id,json=datasetId,proto3" json:"dataset_id,omitempty"`
	// This is a label or symbolic identifier for this object.
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// This attribute contains human readable text.
	Description string `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	// The :ref:`ISO 8601<metadata_date_time>` time at which this record was created.
	Created string `protobuf:"bytes,5,opt,name=created,proto3" json:"created,omitempty"`
	// The :ref:`ISO 8601<metadata_date_time>` time at which this record was updated.
	Updated string `protobuf:"bytes,6,opt,name=updated,proto3" json:"updated,omitempty"`
	// A map of additional information.
	Attributes *Attributes `protobuf:"bytes,7,opt,name=attributes,proto3" json:"attributes,omitempty"`
	// Project or study identifier of the patient.
	PatientId     string `protobuf:"bytes,8,opt,name=patientId,proto3" json:"patientId,omitempty"`
	PatientIdTier int32  `protobuf:"varint,9,opt,name=patientIdTier,proto3" json:"patientIdTier,omitempty"`
	// Alternative identifiers of the patient.
	OtherIds     string `protobuf:"bytes,10,opt,name=otherIds,proto3" json:"otherIds,omitempty"`
	OtherIdsTier int32  `protobuf:"varint,11,opt,name=otherIdsTier,proto3" json:"otherIdsTier,omitempty"`
	// Date of birth information
	DateOfBirth     string `protobuf:"bytes,12,opt,name=dateOfBirth,proto3" json:"dateOfBirth,omitempty"`
	DateOfBirthTier int32  `protobuf:"varint,13,opt,name=dateOfBirthTier,proto3" json:"dateOfBirthTier,omitempty"`
	// Gender
	Gender     string `protobuf:"bytes,14,opt,name=gender,proto3" json:"gender,omitempty"`
	GenderTier int32  `protobuf:"varint,15,opt,name=genderTier,proto3" json:"genderTier,omitempty"`
	// Ethnicity
	Ethnicity     string `protobuf:"bytes,16,opt,name=ethnicity,proto3" json:"ethnicity,omitempty"`
	EthnicityTier int32  `protobuf:"varint,17,opt,name=ethnicityTier,proto3" json:"ethnicityTier,omitempty"`
	// Race
	Race     string `protobuf:"bytes,18,opt,name=race,proto3" json:"race,omitempty"`
	RaceTier int32  `protobuf:"varint,19,opt,name=raceTier,proto3" json:"raceTier,omitempty"`
	// Province or teritory information of the residence status.
	ProvinceOfResidence     string `protobuf:"bytes,20,opt,name=provinceOfResidence,proto3" json:"provinceOfResidence,omitempty"`
	ProvinceOfResidenceTier int32  `protobuf:"varint,21,opt,name=provinceOfResidenceTier,proto3" json:"provinceOfResidenceTier,omitempty"`
	// Date of death
	DateOfDeath     string `protobuf:"bytes,22,opt,name=dateOfDeath,proto3" json:"dateOfDeath,omitempty"`
	DateOfDeathTier int32  `protobuf:"varint,23,opt,name=dateOfDeathTier,proto3" json:"dateOfDeathTier,omitempty"`
	// Reason of death
	CauseOfDeath     string `protobuf:"bytes,24,opt,name=causeOfDeath,proto3" json:"causeOfDeath,omitempty"`
	CauseOfDeathTier int32  `protobuf:"varint,25,opt,name=causeOfDeathTier,proto3" json:"causeOfDeathTier,omitempty"`
	// Indication whether autopsy tissue obtained from the patient can be used
	// for research purposes.
	AutopsyTissueForResearch     string `protobuf:"bytes,26,opt,name=autopsyTissueForResearch,proto3" json:"autopsyTissueForResearch,omitempty"`
	AutopsyTissueForResearchTier int32  `protobuf:"varint,27,opt,name=autopsyTissueForResearchTier,proto3" json:"autopsyTissueForResearchTier,omitempty"`
	// Information on any previous malignant disease.
	PriorMalignancy     string `protobuf:"bytes,28,opt,name=priorMalignancy,proto3" json:"priorMalignancy,omitempty"`
	PriorMalignancyTier int32  `protobuf:"varint,29,opt,name=priorMalignancyTier,proto3" json:"priorMalignancyTier,omitempty"`
	// Date information of any previous malignant event.
	DateOfPriorMalignancy     string `protobuf:"bytes,30,opt,name=dateOfPriorMalignancy,proto3" json:"dateOfPriorMalignancy,omitempty"`
	DateOfPriorMalignancyTier int32  `protobuf:"varint,31,opt,name=dateOfPriorMalignancyTier,proto3" json:"dateOfPriorMalignancyTier,omitempty"`
	// Any known risk factor of the family.
	FamilyHistoryAndRiskFactors     string `protobuf:"bytes,32,opt,name=familyHistoryAndRiskFactors,proto3" json:"familyHistoryAndRiskFactors,omitempty"`
	FamilyHistoryAndRiskFactorsTier int32  `protobuf:"varint,33,opt,name=familyHistoryAndRiskFactorsTier,proto3" json:"familyHistoryAndRiskFactorsTier,omitempty"`
	// Any known genetic mutation known in the family that is inherited and
	// increases the chances of developing cancer.
	FamilyHistoryOfPredispositionSyndrome     string `protobuf:"bytes,34,opt,name=familyHistoryOfPredispositionSyndrome,proto3" json:"familyHistoryOfPredispositionSyndrome,omitempty"`
	FamilyHistoryOfPredispositionSyndromeTier int32  `protobuf:"varint,35,opt,name=familyHistoryOfPredispositionSyndromeTier,proto3" json:"familyHistoryOfPredispositionSyndromeTier,omitempty"`
	// Detailed description of any predispodition.
	DetailsOfPredispositionSyndrome     string `protobuf:"bytes,36,opt,name=detailsOfPredispositionSyndrome,proto3" json:"detailsOfPredispositionSyndrome,omitempty"`
	DetailsOfPredispositionSyndromeTier int32  `protobuf:"varint,37,opt,name=detailsOfPredispositionSyndromeTier,proto3" json:"detailsOfPredispositionSyndromeTier,omitempty"`
	// Any known cancer causing mutation of the patient.
	GeneticCancerSyndrome     string `protobuf:"bytes,38,opt,name=geneticCancerSyndrome,proto3" json:"geneticCancerSyndrome,omitempty"`
	GeneticCancerSyndromeTier int32  `protobuf:"varint,39,opt,name=geneticCancerSyndromeTier,proto3" json:"geneticCancerSyndromeTier,omitempty"`
	// Information on any other known genetic mutation of the patient.
	OtherGeneticConditionOrSignificantComorbidity     string `protobuf:"bytes,40,opt,name=otherGeneticConditionOrSignificantComorbidity,proto3" json:"otherGeneticConditionOrSignificantComorbidity,omitempty"`
	OtherGeneticConditionOrSignificantComorbidityTier int32  `protobuf:"varint,41,opt,name=otherGeneticConditionOrSignificantComorbidityTier,proto3" json:"otherGeneticConditionOrSignificantComorbidityTier,omitempty"`
	// Information whether the patient is/was exposed to any carcinogen due to
	// occupational or environmental reasons.
	OccupationalOrEnvironmentalExposure     string   `protobuf:"bytes,42,opt,name=occupationalOrEnvironmentalExposure,proto3" json:"occupationalOrEnvironmentalExposure,omitempty"`
	OccupationalOrEnvironmentalExposureTier int32    `protobuf:"varint,43,opt,name=occupationalOrEnvironmentalExposureTier,proto3" json:"occupationalOrEnvironmentalExposureTier,omitempty"`
	XXX_NoUnkeyedLiteral                    struct{} `json:"-"`
	XXX_unrecognized                        []byte   `json:"-"`
	XXX_sizecache                           int32    `json:"-"`
}

func (m *Patient) Reset()         { *m = Patient{} }
func (m *Patient) String() string { return proto.CompactTextString(m) }
func (*Patient) ProtoMessage()    {}
func (*Patient) Descriptor() ([]byte, []int) {
	return fileDescriptor_eca1b93ccfe37bb1, []int{0}
}

func (m *Patient) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Patient.Unmarshal(m, b)
}
func (m *Patient) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Patient.Marshal(b, m, deterministic)
}
func (m *Patient) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Patient.Merge(m, src)
}
func (m *Patient) XXX_Size() int {
	return xxx_messageInfo_Patient.Size(m)
}
func (m *Patient) XXX_DiscardUnknown() {
	xxx_messageInfo_Patient.DiscardUnknown(m)
}

var xxx_messageInfo_Patient proto.InternalMessageInfo

func (m *Patient) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Patient) GetDatasetId() string {
	if m != nil {
		return m.DatasetId
	}
	return ""
}

func (m *Patient) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Patient) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Patient) GetCreated() string {
	if m != nil {
		return m.Created
	}
	return ""
}

func (m *Patient) GetUpdated() string {
	if m != nil {
		return m.Updated
	}
	return ""
}

func (m *Patient) GetAttributes() *Attributes {
	if m != nil {
		return m.Attributes
	}
	return nil
}

func (m *Patient) GetPatientId() string {
	if m != nil {
		return m.PatientId
	}
	return ""
}

func (m *Patient) GetPatientIdTier() int32 {
	if m != nil {
		return m.PatientIdTier
	}
	return 0
}

func (m *Patient) GetOtherIds() string {
	if m != nil {
		return m.OtherIds
	}
	return ""
}

func (m *Patient) GetOtherIdsTier() int32 {
	if m != nil {
		return m.OtherIdsTier
	}
	return 0
}

func (m *Patient) GetDateOfBirth() string {
	if m != nil {
		return m.DateOfBirth
	}
	return ""
}

func (m *Patient) GetDateOfBirthTier() int32 {
	if m != nil {
		return m.DateOfBirthTier
	}
	return 0
}

func (m *Patient) GetGender() string {
	if m != nil {
		return m.Gender
	}
	return ""
}

func (m *Patient) GetGenderTier() int32 {
	if m != nil {
		return m.GenderTier
	}
	return 0
}

func (m *Patient) GetEthnicity() string {
	if m != nil {
		return m.Ethnicity
	}
	return ""
}

func (m *Patient) GetEthnicityTier() int32 {
	if m != nil {
		return m.EthnicityTier
	}
	return 0
}

func (m *Patient) GetRace() string {
	if m != nil {
		return m.Race
	}
	return ""
}

func (m *Patient) GetRaceTier() int32 {
	if m != nil {
		return m.RaceTier
	}
	return 0
}

func (m *Patient) GetProvinceOfResidence() string {
	if m != nil {
		return m.ProvinceOfResidence
	}
	return ""
}

func (m *Patient) GetProvinceOfResidenceTier() int32 {
	if m != nil {
		return m.ProvinceOfResidenceTier
	}
	return 0
}

func (m *Patient) GetDateOfDeath() string {
	if m != nil {
		return m.DateOfDeath
	}
	return ""
}

func (m *Patient) GetDateOfDeathTier() int32 {
	if m != nil {
		return m.DateOfDeathTier
	}
	return 0
}

func (m *Patient) GetCauseOfDeath() string {
	if m != nil {
		return m.CauseOfDeath
	}
	return ""
}

func (m *Patient) GetCauseOfDeathTier() int32 {
	if m != nil {
		return m.CauseOfDeathTier
	}
	return 0
}

func (m *Patient) GetAutopsyTissueForResearch() string {
	if m != nil {
		return m.AutopsyTissueForResearch
	}
	return ""
}

func (m *Patient) GetAutopsyTissueForResearchTier() int32 {
	if m != nil {
		return m.AutopsyTissueForResearchTier
	}
	return 0
}

func (m *Patient) GetPriorMalignancy() string {
	if m != nil {
		return m.PriorMalignancy
	}
	return ""
}

func (m *Patient) GetPriorMalignancyTier() int32 {
	if m != nil {
		return m.PriorMalignancyTier
	}
	return 0
}

func (m *Patient) GetDateOfPriorMalignancy() string {
	if m != nil {
		return m.DateOfPriorMalignancy
	}
	return ""
}

func (m *Patient) GetDateOfPriorMalignancyTier() int32 {
	if m != nil {
		return m.DateOfPriorMalignancyTier
	}
	return 0
}

func (m *Patient) GetFamilyHistoryAndRiskFactors() string {
	if m != nil {
		return m.FamilyHistoryAndRiskFactors
	}
	return ""
}

func (m *Patient) GetFamilyHistoryAndRiskFactorsTier() int32 {
	if m != nil {
		return m.FamilyHistoryAndRiskFactorsTier
	}
	return 0
}

func (m *Patient) GetFamilyHistoryOfPredispositionSyndrome() string {
	if m != nil {
		return m.FamilyHistoryOfPredispositionSyndrome
	}
	return ""
}

func (m *Patient) GetFamilyHistoryOfPredispositionSyndromeTier() int32 {
	if m != nil {
		return m.FamilyHistoryOfPredispositionSyndromeTier
	}
	return 0
}

func (m *Patient) GetDetailsOfPredispositionSyndrome() string {
	if m != nil {
		return m.DetailsOfPredispositionSyndrome
	}
	return ""
}

func (m *Patient) GetDetailsOfPredispositionSyndromeTier() int32 {
	if m != nil {
		return m.DetailsOfPredispositionSyndromeTier
	}
	return 0
}

func (m *Patient) GetGeneticCancerSyndrome() string {
	if m != nil {
		return m.GeneticCancerSyndrome
	}
	return ""
}

func (m *Patient) GetGeneticCancerSyndromeTier() int32 {
	if m != nil {
		return m.GeneticCancerSyndromeTier
	}
	return 0
}

func (m *Patient) GetOtherGeneticConditionOrSignificantComorbidity() string {
	if m != nil {
		return m.OtherGeneticConditionOrSignificantComorbidity
	}
	return ""
}

func (m *Patient) GetOtherGeneticConditionOrSignificantComorbidityTier() int32 {
	if m != nil {
		return m.OtherGeneticConditionOrSignificantComorbidityTier
	}
	return 0
}

func (m *Patient) GetOccupationalOrEnvironmentalExposure() string {
	if m != nil {
		return m.OccupationalOrEnvironmentalExposure
	}
	return ""
}

func (m *Patient) GetOccupationalOrEnvironmentalExposureTier() int32 {
	if m != nil {
		return m.OccupationalOrEnvironmentalExposureTier
	}
	return 0
}

type Enrollment struct {
	// This is unique in the context of the server instance.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The ID of the dataset this object belongs to.
	DatasetId string `protobuf:"bytes,2,opt,name=dataset_id,json=datasetId,proto3" json:"dataset_id,omitempty"`
	// This is a label or symbolic identifier for this object.
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// This attribute contains human readable text.
	Description string `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	// The :ref:`ISO 8601<metadata_date_time>` time at which this record was created.
	Created string `protobuf:"bytes,5,opt,name=created,proto3" json:"created,omitempty"`
	// The :ref:`ISO 8601<metadata_date_time>` time at which this record was updated.
	Updated string `protobuf:"bytes,6,opt,name=updated,proto3" json:"updated,omitempty"`
	// A map of additional information.
	Attributes *Attributes `protobuf:"bytes,7,opt,name=attributes,proto3" json:"attributes,omitempty"`
	// Project or study identifier of the patient.
	PatientId     string `protobuf:"bytes,8,opt,name=patientId,proto3" json:"patientId,omitempty"`
	PatientIdTier int32  `protobuf:"varint,9,opt,name=patientIdTier,proto3" json:"patientIdTier,omitempty"`
	// Name of hospital, clinic or institute which recruited the patient.
	EnrollmentInstitution     string `protobuf:"bytes,10,opt,name=enrollmentInstitution,proto3" json:"enrollmentInstitution,omitempty"`
	EnrollmentInstitutionTier int32  `protobuf:"varint,11,opt,name=enrollmentInstitutionTier,proto3" json:"enrollmentInstitutionTier,omitempty"`
	// Date information when the patient enrollemnt was approved.
	EnrollmentApprovalDate     string `protobuf:"bytes,12,opt,name=enrollmentApprovalDate,proto3" json:"enrollmentApprovalDate,omitempty"`
	EnrollmentApprovalDateTier int32  `protobuf:"varint,13,opt,name=enrollmentApprovalDateTier,proto3" json:"enrollmentApprovalDateTier,omitempty"`
	// Information whether the patient was enrolled in any other study.
	CrossEnrollment     string `protobuf:"bytes,14,opt,name=crossEnrollment,proto3" json:"crossEnrollment,omitempty"`
	CrossEnrollmentTier int32  `protobuf:"varint,15,opt,name=crossEnrollmentTier,proto3" json:"crossEnrollmentTier,omitempty"`
	// Name of any other drug test study - if any
	OtherPersonalizedMedicineStudyName     string `protobuf:"bytes,16,opt,name=otherPersonalizedMedicineStudyName,proto3" json:"otherPersonalizedMedicineStudyName,omitempty"`
	OtherPersonalizedMedicineStudyNameTier int32  `protobuf:"varint,17,opt,name=otherPersonalizedMedicineStudyNameTier,proto3" json:"otherPersonalizedMedicineStudyNameTier,omitempty"`
	// Project or study ID of the patient in other drug test study.
	OtherPersonalizedMedicineStudyId     string `protobuf:"bytes,18,opt,name=otherPersonalizedMedicineStudyId,proto3" json:"otherPersonalizedMedicineStudyId,omitempty"`
	OtherPersonalizedMedicineStudyIdTier int32  `protobuf:"varint,19,opt,name=otherPersonalizedMedicineStudyIdTier,proto3" json:"otherPersonalizedMedicineStudyIdTier,omitempty"`
	// Patient age in years when the enrollment happened.
	AgeAtEnrollment     string `protobuf:"bytes,20,opt,name=ageAtEnrollment,proto3" json:"ageAtEnrollment,omitempty"`
	AgeAtEnrollmentTier int32  `protobuf:"varint,21,opt,name=ageAtEnrollmentTier,proto3" json:"ageAtEnrollmentTier,omitempty"`
	// Category inforamtion for the bases of the eligibility.
	EligibilityCategory     string `protobuf:"bytes,22,opt,name=eligibilityCategory,proto3" json:"eligibilityCategory,omitempty"`
	EligibilityCategoryTier int32  `protobuf:"varint,23,opt,name=eligibilityCategoryTier,proto3" json:"eligibilityCategoryTier,omitempty"`
	// Disease status at the date of enrollment.
	StatusAtEnrollment     string `protobuf:"bytes,24,opt,name=statusAtEnrollment,proto3" json:"statusAtEnrollment,omitempty"`
	StatusAtEnrollmentTier int32  `protobuf:"varint,25,opt,name=statusAtEnrollmentTier,proto3" json:"statusAtEnrollmentTier,omitempty"`
	// Full name of the patient's oncologist
	PrimaryOncologistName     string `protobuf:"bytes,26,opt,name=primaryOncologistName,proto3" json:"primaryOncologistName,omitempty"`
	PrimaryOncologistNameTier int32  `protobuf:"varint,27,opt,name=primaryOncologistNameTier,proto3" json:"primaryOncologistNameTier,omitempty"`
	// Contact information of the oncologist
	PrimaryOncologistContact     string `protobuf:"bytes,28,opt,name=primaryOncologistContact,proto3" json:"primaryOncologistContact,omitempty"`
	PrimaryOncologistContactTier int32  `protobuf:"varint,29,opt,name=primaryOncologistContactTier,proto3" json:"primaryOncologistContactTier,omitempty"`
	// Full name of the patient's physician
	ReferringPhysicianName     string `protobuf:"bytes,30,opt,name=referringPhysicianName,proto3" json:"referringPhysicianName,omitempty"`
	ReferringPhysicianNameTier int32  `protobuf:"varint,31,opt,name=referringPhysicianNameTier,proto3" json:"referringPhysicianNameTier,omitempty"`
	// Contact information of the physician
	ReferringPhysicianContact     string `protobuf:"bytes,32,opt,name=referringPhysicianContact,proto3" json:"referringPhysicianContact,omitempty"`
	ReferringPhysicianContactTier int32  `protobuf:"varint,33,opt,name=referringPhysicianContactTier,proto3" json:"referringPhysicianContactTier,omitempty"`
	// Short summary of the Enrollment Id request
	SummaryOfIdRequest     string `protobuf:"bytes,34,opt,name=summaryOfIdRequest,proto3" json:"summaryOfIdRequest,omitempty"`
	SummaryOfIdRequestTier int32  `protobuf:"varint,35,opt,name=summaryOfIdRequestTier,proto3" json:"summaryOfIdRequestTier,omitempty"`
	// Name of the institution, hospital or clinic, where the patient is
	// treated.
	TreatingCentreName     string `protobuf:"bytes,36,opt,name=treatingCentreName,proto3" json:"treatingCentreName,omitempty"`
	TreatingCentreNameTier int32  `protobuf:"varint,37,opt,name=treatingCentreNameTier,proto3" json:"treatingCentreNameTier,omitempty"`
	// Name of the province or territory where the treating centre (hospital,
	// clinic) is located.
	TreatingCentreProvince     string   `protobuf:"bytes,38,opt,name=treatingCentreProvince,proto3" json:"treatingCentreProvince,omitempty"`
	TreatingCentreProvinceTier int32    `protobuf:"varint,39,opt,name=treatingCentreProvinceTier,proto3" json:"treatingCentreProvinceTier,omitempty"`
	XXX_NoUnkeyedLiteral       struct{} `json:"-"`
	XXX_unrecognized           []byte   `json:"-"`
	XXX_sizecache              int32    `json:"-"`
}

func (m *Enrollment) Reset()         { *m = Enrollment{} }
func (m *Enrollment) String() string { return proto.CompactTextString(m) }
func (*Enrollment) ProtoMessage()    {}
func (*Enrollment) Descriptor() ([]byte, []int) {
	return fileDescriptor_eca1b93ccfe37bb1, []int{1}
}

func (m *Enrollment) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Enrollment.Unmarshal(m, b)
}
func (m *Enrollment) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Enrollment.Marshal(b, m, deterministic)
}
func (m *Enrollment) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Enrollment.Merge(m, src)
}
func (m *Enrollment) XXX_Size() int {
	return xxx_messageInfo_Enrollment.Size(m)
}
func (m *Enrollment) XXX_DiscardUnknown() {
	xxx_messageInfo_Enrollment.DiscardUnknown(m)
}

var xxx_messageInfo_Enrollment proto.InternalMessageInfo

func (m *Enrollment) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Enrollment) GetDatasetId() string {
	if m != nil {
		return m.DatasetId
	}
	return ""
}

func (m *Enrollment) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Enrollment) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Enrollment) GetCreated() string {
	if m != nil {
		return m.Created
	}
	return ""
}

func (m *Enrollment) GetUpdated() string {
	if m != nil {
		return m.Updated
	}
	return ""
}

func (m *Enrollment) GetAttributes() *Attributes {
	if m != nil {
		return m.Attributes
	}
	return nil
}

func (m *Enrollment) GetPatientId() string {
	if m != nil {
		return m.PatientId
	}
	return ""
}

func (m *Enrollment) GetPatientIdTier() int32 {
	if m != nil {
		return m.PatientIdTier
	}
	return 0
}

func (m *Enrollment) GetEnrollmentInstitution() string {
	if m != nil {
		return m.EnrollmentInstitution
	}
	return ""
}

func (m *Enrollment) GetEnrollmentInstitutionTier() int32 {
	if m != nil {
		return m.EnrollmentInstitutionTier
	}
	return 0
}

func (m *Enrollment) GetEnrollmentApprovalDate() string {
	if m != nil {
		return m.EnrollmentApprovalDate
	}
	return ""
}

func (m *Enrollment) GetEnrollmentApprovalDateTier() int32 {
	if m != nil {
		return m.EnrollmentApprovalDateTier
	}
	return 0
}

func (m *Enrollment) GetCrossEnrollment() string {
	if m != nil {
		return m.CrossEnrollment
	}
	return ""
}

func (m *Enrollment) GetCrossEnrollmentTier() int32 {
	if m != nil {
		return m.CrossEnrollmentTier
	}
	return 0
}

func (m *Enrollment) GetOtherPersonalizedMedicineStudyName() string {
	if m != nil {
		return m.OtherPersonalizedMedicineStudyName
	}
	return ""
}

func (m *Enrollment) GetOtherPersonalizedMedicineStudyNameTier() int32 {
	if m != nil {
		return m.OtherPersonalizedMedicineStudyNameTier
	}
	return 0
}

func (m *Enrollment) GetOtherPersonalizedMedicineStudyId() string {
	if m != nil {
		return m.OtherPersonalizedMedicineStudyId
	}
	return ""
}

func (m *Enrollment) GetOtherPersonalizedMedicineStudyIdTier() int32 {
	if m != nil {
		return m.OtherPersonalizedMedicineStudyIdTier
	}
	return 0
}

func (m *Enrollment) GetAgeAtEnrollment() string {
	if m != nil {
		return m.AgeAtEnrollment
	}
	return ""
}

func (m *Enrollment) GetAgeAtEnrollmentTier() int32 {
	if m != nil {
		return m.AgeAtEnrollmentTier
	}
	return 0
}

func (m *Enrollment) GetEligibilityCategory() string {
	if m != nil {
		return m.EligibilityCategory
	}
	return ""
}

func (m *Enrollment) GetEligibilityCategoryTier() int32 {
	if m != nil {
		return m.EligibilityCategoryTier
	}
	return 0
}

func (m *Enrollment) GetStatusAtEnrollment() string {
	if m != nil {
		return m.StatusAtEnrollment
	}
	return ""
}

func (m *Enrollment) GetStatusAtEnrollmentTier() int32 {
	if m != nil {
		return m.StatusAtEnrollmentTier
	}
	return 0
}

func (m *Enrollment) GetPrimaryOncologistName() string {
	if m != nil {
		return m.PrimaryOncologistName
	}
	return ""
}

func (m *Enrollment) GetPrimaryOncologistNameTier() int32 {
	if m != nil {
		return m.PrimaryOncologistNameTier
	}
	return 0
}

func (m *Enrollment) GetPrimaryOncologistContact() string {
	if m != nil {
		return m.PrimaryOncologistContact
	}
	return ""
}

func (m *Enrollment) GetPrimaryOncologistContactTier() int32 {
	if m != nil {
		return m.PrimaryOncologistContactTier
	}
	return 0
}

func (m *Enrollment) GetReferringPhysicianName() string {
	if m != nil {
		return m.ReferringPhysicianName
	}
	return ""
}

func (m *Enrollment) GetReferringPhysicianNameTier() int32 {
	if m != nil {
		return m.ReferringPhysicianNameTier
	}
	return 0
}

func (m *Enrollment) GetReferringPhysicianContact() string {
	if m != nil {
		return m.ReferringPhysicianContact
	}
	return ""
}

func (m *Enrollment) GetReferringPhysicianContactTier() int32 {
	if m != nil {
		return m.ReferringPhysicianContactTier
	}
	return 0
}

func (m *Enrollment) GetSummaryOfIdRequest() string {
	if m != nil {
		return m.SummaryOfIdRequest
	}
	return ""
}

func (m *Enrollment) GetSummaryOfIdRequestTier() int32 {
	if m != nil {
		return m.SummaryOfIdRequestTier
	}
	return 0
}

func (m *Enrollment) GetTreatingCentreName() string {
	if m != nil {
		return m.TreatingCentreName
	}
	return ""
}

func (m *Enrollment) GetTreatingCentreNameTier() int32 {
	if m != nil {
		return m.TreatingCentreNameTier
	}
	return 0
}

func (m *Enrollment) GetTreatingCentreProvince() string {
	if m != nil {
		return m.TreatingCentreProvince
	}
	return ""
}

func (m *Enrollment) GetTreatingCentreProvinceTier() int32 {
	if m != nil {
		return m.TreatingCentreProvinceTier
	}
	return 0
}

type Consent struct {
	// This is unique in the context of the server instance.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The ID of the dataset this object belongs to.
	DatasetId string `protobuf:"bytes,2,opt,name=dataset_id,json=datasetId,proto3" json:"dataset_id,omitempty"`
	// This is a label or symbolic identifier for this object.
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// This attribute contains human readable text.
	Description string `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	// The :ref:`ISO 8601<metadata_date_time>` time at which this record was created.
	Created string `protobuf:"bytes,5,opt,name=created,proto3" json:"created,omitempty"`
	// The :ref:`ISO 8601<metadata_date_time>` time at which this record was updated.
	Updated string `protobuf:"bytes,6,opt,name=updated,proto3" json:"updated,omitempty"`
	// A map of additional information.
	Attributes *Attributes `protobuf:"bytes,7,opt,name=attributes,proto3" json:"attributes,omitempty"`
	// Project or study identifier of the patient.
	PatientId     string `protobuf:"bytes,8,opt,name=patientId,proto3" json:"patientId,omitempty"`
	PatientIdTier int32  `protobuf:"varint,9,opt,name=patientIdTier,proto3" json:"patientIdTier,omitempty"`
	// Identifier associated with this patient consent form.
	ConsentId     string `protobuf:"bytes,10,opt,name=consentId,proto3" json:"consentId,omitempty"`
	ConsentIdTier int32  `protobuf:"varint,11,opt,name=consentIdTier,proto3" json:"consentIdTier,omitempty"`
	// Date patient provided consent to the study.
	ConsentDate     string `protobuf:"bytes,12,opt,name=consentDate,proto3" json:"consentDate,omitempty"`
	ConsentDateTier int32  `protobuf:"varint,13,opt,name=consentDateTier,proto3" json:"consentDateTier,omitempty"`
	// Consent form version.
	ConsentVersion     string `protobuf:"bytes,14,opt,name=consentVersion,proto3" json:"consentVersion,omitempty"`
	ConsentVersionTier int32  `protobuf:"varint,15,opt,name=consentVersionTier,proto3" json:"consentVersionTier,omitempty"`
	// Phrases, conditions to which the patient consented to.
	// 1. Sample collection and molecular profiling
	// 2. Biobanking for future research
	// 3. Re-contact
	// 4. Collection of tissues/fluids after death
	// 5. other
	PatientConsentedTo     string `protobuf:"bytes,16,opt,name=patientConsentedTo,proto3" json:"patientConsentedTo,omitempty"`
	PatientConsentedToTier int32  `protobuf:"varint,17,opt,name=patientConsentedToTier,proto3" json:"patientConsentedToTier,omitempty"`
	// Reason for the consent was rejected.
	ReasonForRejection     string `protobuf:"bytes,18,opt,name=reasonForRejection,proto3" json:"reasonForRejection,omitempty"`
	ReasonForRejectionTier int32  `protobuf:"varint,19,opt,name=reasonForRejectionTier,proto3" json:"reasonForRejectionTier,omitempty"`
	// Indication that assent was collected.
	WasAssentObtained     string `protobuf:"bytes,20,opt,name=wasAssentObtained,proto3" json:"wasAssentObtained,omitempty"`
	WasAssentObtainedTier int32  `protobuf:"varint,21,opt,name=wasAssentObtainedTier,proto3" json:"wasAssentObtainedTier,omitempty"`
	// Date when assent was collected.
	DateOfAssent     string `protobuf:"bytes,22,opt,name=dateOfAssent,proto3" json:"dateOfAssent,omitempty"`
	DateOfAssentTier int32  `protobuf:"varint,23,opt,name=dateOfAssentTier,proto3" json:"dateOfAssentTier,omitempty"`
	// Assent form version.
	AssentFormVersion     string `protobuf:"bytes,24,opt,name=assentFormVersion,proto3" json:"assentFormVersion,omitempty"`
	AssentFormVersionTier int32  `protobuf:"varint,25,opt,name=assentFormVersionTier,proto3" json:"assentFormVersionTier,omitempty"`
	// In case assent is mandatory, but was not obtained, this field contains
	// the reason.
	// 1. Too young to give assent
	// 2. Incapable due to medical / cognitive / developmental issues
	IfAssentNotObtainedWhyNot     string `protobuf:"bytes,26,opt,name=ifAssentNotObtainedWhyNot,proto3" json:"ifAssentNotObtainedWhyNot,omitempty"`
	IfAssentNotObtainedWhyNotTier int32  `protobuf:"varint,27,opt,name=ifAssentNotObtainedWhyNotTier,proto3" json:"ifAssentNotObtainedWhyNotTier,omitempty"`
	// Date of the patient was reconsented.
	ReconsentDate     string `protobuf:"bytes,28,opt,name=reconsentDate,proto3" json:"reconsentDate,omitempty"`
	ReconsentDateTier int32  `protobuf:"varint,29,opt,name=reconsentDateTier,proto3" json:"reconsentDateTier,omitempty"`
	// Reconsent form version.
	ReconsentVersion     string `protobuf:"bytes,30,opt,name=reconsentVersion,proto3" json:"reconsentVersion,omitempty"`
	ReconsentVersionTier int32  `protobuf:"varint,31,opt,name=reconsentVersionTier,proto3" json:"reconsentVersionTier,omitempty"`
	// Name of person who coordinates the consent forms.
	ConsentingCoordinatorName     string `protobuf:"bytes,32,opt,name=consentingCoordinatorName,proto3" json:"consentingCoordinatorName,omitempty"`
	ConsentingCoordinatorNameTier int32  `protobuf:"varint,33,opt,name=consentingCoordinatorNameTier,proto3" json:"consentingCoordinatorNameTier,omitempty"`
	// Indication that the person perviously consented to this or other studies.
	PreviouslyConsented     string `protobuf:"bytes,34,opt,name=previouslyConsented,proto3" json:"previouslyConsented,omitempty"`
	PreviouslyConsentedTier int32  `protobuf:"varint,35,opt,name=previouslyConsentedTier,proto3" json:"previouslyConsentedTier,omitempty"`
	// Name of the corresponding biobank, that store patient sample.
	NameOfOtherBiobank     string `protobuf:"bytes,36,opt,name=nameOfOtherBiobank,proto3" json:"nameOfOtherBiobank,omitempty"`
	NameOfOtherBiobankTier int32  `protobuf:"varint,37,opt,name=nameOfOtherBiobankTier,proto3" json:"nameOfOtherBiobankTier,omitempty"`
	// Indication whether the consent is no longer in place.
	HasConsentBeenWithdrawn     string `protobuf:"bytes,38,opt,name=hasConsentBeenWithdrawn,proto3" json:"hasConsentBeenWithdrawn,omitempty"`
	HasConsentBeenWithdrawnTier int32  `protobuf:"varint,39,opt,name=hasConsentBeenWithdrawnTier,proto3" json:"hasConsentBeenWithdrawnTier,omitempty"`
	// Date when the consent has been withdrawn.
	DateOfConsentWithdrawal     string `protobuf:"bytes,40,opt,name=dateOfConsentWithdrawal,proto3" json:"dateOfConsentWithdrawal,omitempty"`
	DateOfConsentWithdrawalTier int32  `protobuf:"varint,41,opt,name=dateOfConsentWithdrawalTier,proto3" json:"dateOfConsentWithdrawalTier,omitempty"`
	// Type of consent withdrawal
	TypeOfConsentWithdrawal     string `protobuf:"bytes,42,opt,name=typeOfConsentWithdrawal,proto3" json:"typeOfConsentWithdrawal,omitempty"`
	TypeOfConsentWithdrawalTier int32  `protobuf:"varint,43,opt,name=typeOfConsentWithdrawalTier,proto3" json:"typeOfConsentWithdrawalTier,omitempty"`
	// Reason or list of reasons, why patient withreawn the consent from the
	// study.
	ReasonForConsentWithdrawal     string `protobuf:"bytes,44,opt,name=reasonForConsentWithdrawal,proto3" json:"reasonForConsentWithdrawal,omitempty"`
	ReasonForConsentWithdrawalTier int32  `protobuf:"varint,45,opt,name=reasonForConsentWithdrawalTier,proto3" json:"reasonForConsentWithdrawalTier,omitempty"`
	// Indication whether the consent form was completed properly.
	ConsentFormComplete     string   `protobuf:"bytes,46,opt,name=consentFormComplete,proto3" json:"consentFormComplete,omitempty"`
	ConsentFormCompleteTier int32    `protobuf:"varint,47,opt,name=consentFormCompleteTier,proto3" json:"consentFormCompleteTier,omitempty"`
	XXX_NoUnkeyedLiteral    struct{} `json:"-"`
	XXX_unrecognized        []byte   `json:"-"`
	XXX_sizecache           int32    `json:"-"`
}

func (m *Consent) Reset()         { *m = Consent{} }
func (m *Consent) String() string { return proto.CompactTextString(m) }
func (*Consent) ProtoMessage()    {}
func (*Consent) Descriptor() ([]byte, []int) {
	return fileDescriptor_eca1b93ccfe37bb1, []int{2}
}

func (m *Consent) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Consent.Unmarshal(m, b)
}
func (m *Consent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Consent.Marshal(b, m, deterministic)
}
func (m *Consent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Consent.Merge(m, src)
}
func (m *Consent) XXX_Size() int {
	return xxx_messageInfo_Consent.Size(m)
}
func (m *Consent) XXX_DiscardUnknown() {
	xxx_messageInfo_Consent.DiscardUnknown(m)
}

var xxx_messageInfo_Consent proto.InternalMessageInfo

func (m *Consent) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Consent) GetDatasetId() string {
	if m != nil {
		return m.DatasetId
	}
	return ""
}

func (m *Consent) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Consent) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Consent) GetCreated() string {
	if m != nil {
		return m.Created
	}
	return ""
}

func (m *Consent) GetUpdated() string {
	if m != nil {
		return m.Updated
	}
	return ""
}

func (m *Consent) GetAttributes() *Attributes {
	if m != nil {
		return m.Attributes
	}
	return nil
}

func (m *Consent) GetPatientId() string {
	if m != nil {
		return m.PatientId
	}
	return ""
}

func (m *Consent) GetPatientIdTier() int32 {
	if m != nil {
		return m.PatientIdTier
	}
	return 0
}

func (m *Consent) GetConsentId() string {
	if m != nil {
		return m.ConsentId
	}
	return ""
}

func (m *Consent) GetConsentIdTier() int32 {
	if m != nil {
		return m.ConsentIdTier
	}
	return 0
}

func (m *Consent) GetConsentDate() string {
	if m != nil {
		return m.ConsentDate
	}
	return ""
}

func (m *Consent) GetConsentDateTier() int32 {
	if m != nil {
		return m.ConsentDateTier
	}
	return 0
}

func (m *Consent) GetConsentVersion() string {
	if m != nil {
		return m.ConsentVersion
	}
	return ""
}

func (m *Consent) GetConsentVersionTier() int32 {
	if m != nil {
		return m.ConsentVersionTier
	}
	return 0
}

func (m *Consent) GetPatientConsentedTo() string {
	if m != nil {
		return m.PatientConsentedTo
	}
	return ""
}

func (m *Consent) GetPatientConsentedToTier() int32 {
	if m != nil {
		return m.PatientConsentedToTier
	}
	return 0
}

func (m *Consent) GetReasonForRejection() string {
	if m != nil {
		return m.ReasonForRejection
	}
	return ""
}

func (m *Consent) GetReasonForRejectionTier() int32 {
	if m != nil {
		return m.ReasonForRejectionTier
	}
	return 0
}

func (m *Consent) GetWasAssentObtained() string {
	if m != nil {
		return m.WasAssentObtained
	}
	return ""
}

func (m *Consent) GetWasAssentObtainedTier() int32 {
	if m != nil {
		return m.WasAssentObtainedTier
	}
	return 0
}

func (m *Consent) GetDateOfAssent() string {
	if m != nil {
		return m.DateOfAssent
	}
	return ""
}

func (m *Consent) GetDateOfAssentTier() int32 {
	if m != nil {
		return m.DateOfAssentTier
	}
	return 0
}

func (m *Consent) GetAssentFormVersion() string {
	if m != nil {
		return m.AssentFormVersion
	}
	return ""
}

func (m *Consent) GetAssentFormVersionTier() int32 {
	if m != nil {
		return m.AssentFormVersionTier
	}
	return 0
}

func (m *Consent) GetIfAssentNotObtainedWhyNot() string {
	if m != nil {
		return m.IfAssentNotObtainedWhyNot
	}
	return ""
}

func (m *Consent) GetIfAssentNotObtainedWhyNotTier() int32 {
	if m != nil {
		return m.IfAssentNotObtainedWhyNotTier
	}
	return 0
}

func (m *Consent) GetReconsentDate() string {
	if m != nil {
		return m.ReconsentDate
	}
	return ""
}

func (m *Consent) GetReconsentDateTier() int32 {
	if m != nil {
		return m.ReconsentDateTier
	}
	return 0
}

func (m *Consent) GetReconsentVersion() string {
	if m != nil {
		return m.ReconsentVersion
	}
	return ""
}

func (m *Consent) GetReconsentVersionTier() int32 {
	if m != nil {
		return m.ReconsentVersionTier
	}
	return 0
}

func (m *Consent) GetConsentingCoordinatorName() string {
	if m != nil {
		return m.ConsentingCoordinatorName
	}
	return ""
}

func (m *Consent) GetConsentingCoordinatorNameTier() int32 {
	if m != nil {
		return m.ConsentingCoordinatorNameTier
	}
	return 0
}

func (m *Consent) GetPreviouslyConsented() string {
	if m != nil {
		return m.PreviouslyConsented
	}
	return ""
}

func (m *Consent) GetPreviouslyConsentedTier() int32 {
	if m != nil {
		return m.PreviouslyConsentedTier
	}
	return 0
}

func (m *Consent) GetNameOfOtherBiobank() string {
	if m != nil {
		return m.NameOfOtherBiobank
	}
	return ""
}

func (m *Consent) GetNameOfOtherBiobankTier() int32 {
	if m != nil {
		return m.NameOfOtherBiobankTier
	}
	return 0
}

func (m *Consent) GetHasConsentBeenWithdrawn() string {
	if m != nil {
		return m.HasConsentBeenWithdrawn
	}
	return ""
}

func (m *Consent) GetHasConsentBeenWithdrawnTier() int32 {
	if m != nil {
		return m.HasConsentBeenWithdrawnTier
	}
	return 0
}

func (m *Consent) GetDateOfConsentWithdrawal() string {
	if m != nil {
		return m.DateOfConsentWithdrawal
	}
	return ""
}

func (m *Consent) GetDateOfConsentWithdrawalTier() int32 {
	if m != nil {
		return m.DateOfConsentWithdrawalTier
	}
	return 0
}

func (m *Consent) GetTypeOfConsentWithdrawal() string {
	if m != nil {
		return m.TypeOfConsentWithdrawal
	}
	return ""
}

func (m *Consent) GetTypeOfConsentWithdrawalTier() int32 {
	if m != nil {
		return m.TypeOfConsentWithdrawalTier
	}
	return 0
}

func (m *Consent) GetReasonForConsentWithdrawal() string {
	if m != nil {
		return m.ReasonForConsentWithdrawal
	}
	return ""
}

func (m *Consent) GetReasonForConsentWithdrawalTier() int32 {
	if m != nil {
		return m.ReasonForConsentWithdrawalTier
	}
	return 0
}

func (m *Consent) GetConsentFormComplete() string {
	if m != nil {
		return m.ConsentFormComplete
	}
	return ""
}

func (m *Consent) GetConsentFormCompleteTier() int32 {
	if m != nil {
		return m.ConsentFormCompleteTier
	}
	return 0
}

type Diagnosis struct {
	// This is unique in the context of the server instance.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The ID of the dataset this object belongs to.
	DatasetId string `protobuf:"bytes,2,opt,name=dataset_id,json=datasetId,proto3" json:"dataset_id,omitempty"`
	// This is a label or symbolic identifier for this object.
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// This attribute contains human readable text.
	Description string `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	// The :ref:`ISO 8601<metadata_date_time>` time at which this record was created.
	Created string `protobuf:"bytes,5,opt,name=created,proto3" json:"created,omitempty"`
	// The :ref:`ISO 8601<metadata_date_time>` time at which this record was updated.
	Updated string `protobuf:"bytes,6,opt,name=updated,proto3" json:"updated,omitempty"`
	// A map of additional information.
	Attributes *Attributes `protobuf:"bytes,7,opt,name=attributes,proto3" json:"attributes,omitempty"`
	// Project or study identifier of the patient.
	PatientId     string `protobuf:"bytes,8,opt,name=patientId,proto3" json:"patientId,omitempty"`
	PatientIdTier int32  `protobuf:"varint,9,opt,name=patientIdTier,proto3" json:"patientIdTier,omitempty"`
	// Any identifier related to this diagnosis event.
	DiagnosisId     string `protobuf:"bytes,10,opt,name=diagnosisId,proto3" json:"diagnosisId,omitempty"`
	DiagnosisIdTier int32  `protobuf:"varint,11,opt,name=diagnosisIdTier,proto3" json:"diagnosisIdTier,omitempty"`
	// Date when the diagnosis was given.
	DiagnosisDate     string `protobuf:"bytes,12,opt,name=diagnosisDate,proto3" json:"diagnosisDate,omitempty"`
	DiagnosisDateTier int32  `protobuf:"varint,13,opt,name=diagnosisDateTier,proto3" json:"diagnosisDateTier,omitempty"`
	// Patient age in years when diagnosis was given.
	AgeAtDiagnosis     string `protobuf:"bytes,14,opt,name=ageAtDiagnosis,proto3" json:"ageAtDiagnosis,omitempty"`
	AgeAtDiagnosisTier int32  `protobuf:"varint,15,opt,name=ageAtDiagnosisTier,proto3" json:"ageAtDiagnosisTier,omitempty"`
	// Cancer category information - broad cancer type.
	CancerType     string `protobuf:"bytes,16,opt,name=cancerType,proto3" json:"cancerType,omitempty"`
	CancerTypeTier int32  `protobuf:"varint,17,opt,name=cancerTypeTier,proto3" json:"cancerTypeTier,omitempty"`
	// Ontology classification - exact subtype information.
	Classification     string `protobuf:"bytes,18,opt,name=classification,proto3" json:"classification,omitempty"`
	ClassificationTier int32  `protobuf:"varint,19,opt,name=classificationTier,proto3" json:"classificationTier,omitempty"`
	// Anatomical site of origin (or organ system) of the tumour.
	CancerSite     string `protobuf:"bytes,20,opt,name=cancerSite,proto3" json:"cancerSite,omitempty"`
	CancerSiteTier int32  `protobuf:"varint,21,opt,name=cancerSiteTier,proto3" json:"cancerSiteTier,omitempty"`
	// Cell type of the tumour, together with the behaviour (malignant or
	// benign).
	Histology     string `protobuf:"bytes,22,opt,name=histology,proto3" json:"histology,omitempty"`
	HistologyTier int32  `protobuf:"varint,23,opt,name=histologyTier,proto3" json:"histologyTier,omitempty"`
	// Information on the diagnosis method used.
	MethodOfDefinitiveDiagnosis     string `protobuf:"bytes,24,opt,name=methodOfDefinitiveDiagnosis,proto3" json:"methodOfDefinitiveDiagnosis,omitempty"`
	MethodOfDefinitiveDiagnosisTier int32  `protobuf:"varint,25,opt,name=methodOfDefinitiveDiagnosisTier,proto3" json:"methodOfDefinitiveDiagnosisTier,omitempty"`
	// Sample type, like liquid biopsy or somatic tissue.
	SampleType     string `protobuf:"bytes,26,opt,name=sampleType,proto3" json:"sampleType,omitempty"`
	SampleTypeTier int32  `protobuf:"varint,27,opt,name=sampleTypeTier,proto3" json:"sampleTypeTier,omitempty"`
	// Anatomical site the sample was obtained from.
	SampleSite     string `protobuf:"bytes,28,opt,name=sampleSite,proto3" json:"sampleSite,omitempty"`
	SampleSiteTier int32  `protobuf:"varint,29,opt,name=sampleSiteTier,proto3" json:"sampleSiteTier,omitempty"`
	// Grade level of the tumour developmental stage.
	TumorGrade     string `protobuf:"bytes,30,opt,name=tumorGrade,proto3" json:"tumorGrade,omitempty"`
	TumorGradeTier int32  `protobuf:"varint,31,opt,name=tumorGradeTier,proto3" json:"tumorGradeTier,omitempty"`
	// Grading system used to classify the tumour grade.
	GradingSystemUsed     string `protobuf:"bytes,32,opt,name=gradingSystemUsed,proto3" json:"gradingSystemUsed,omitempty"`
	GradingSystemUsedTier int32  `protobuf:"varint,33,opt,name=gradingSystemUsedTier,proto3" json:"gradingSystemUsedTier,omitempty"`
	// List of anatomoical sites where metastases confirmed.
	SitesOfMetastases     string `protobuf:"bytes,34,opt,name=sitesOfMetastases,proto3" json:"sitesOfMetastases,omitempty"`
	SitesOfMetastasesTier int32  `protobuf:"varint,35,opt,name=sitesOfMetastasesTier,proto3" json:"sitesOfMetastasesTier,omitempty"`
	// Staging system used.
	StagingSystem     string `protobuf:"bytes,36,opt,name=stagingSystem,proto3" json:"stagingSystem,omitempty"`
	StagingSystemTier int32  `protobuf:"varint,37,opt,name=stagingSystemTier,proto3" json:"stagingSystemTier,omitempty"`
	// Version of the staging system used.
	VersionOrEditionOfTheStagingSystem     string `protobuf:"bytes,38,opt,name=versionOrEditionOfTheStagingSystem,proto3" json:"versionOrEditionOfTheStagingSystem,omitempty"`
	VersionOrEditionOfTheStagingSystemTier int32  `protobuf:"varint,39,opt,name=versionOrEditionOfTheStagingSystemTier,proto3" json:"versionOrEditionOfTheStagingSystemTier,omitempty"`
	// Tumour stage at the diagnosis.
	SpecificTumorStageAtDiagnosis     string `protobuf:"bytes,40,opt,name=specificTumorStageAtDiagnosis,proto3" json:"specificTumorStageAtDiagnosis,omitempty"`
	SpecificTumorStageAtDiagnosisTier int32  `protobuf:"varint,41,opt,name=specificTumorStageAtDiagnosisTier,proto3" json:"specificTumorStageAtDiagnosisTier,omitempty"`
	// List of any cancer specific biomarker used / can be used for prognosis
	// purpose.
	PrognosticBiomarkers     string `protobuf:"bytes,42,opt,name=prognosticBiomarkers,proto3" json:"prognosticBiomarkers,omitempty"`
	PrognosticBiomarkersTier int32  `protobuf:"varint,43,opt,name=prognosticBiomarkersTier,proto3" json:"prognosticBiomarkersTier,omitempty"`
	// Quantity information of listed biomarkers.
	BiomarkerQuantification     string `protobuf:"bytes,44,opt,name=biomarkerQuantification,proto3" json:"biomarkerQuantification,omitempty"`
	BiomarkerQuantificationTier int32  `protobuf:"varint,45,opt,name=biomarkerQuantificationTier,proto3" json:"biomarkerQuantificationTier,omitempty"`
	// Indication whether any additional testing was performed.
	AdditionalMolecularTesting     string `protobuf:"bytes,46,opt,name=additionalMolecularTesting,proto3" json:"additionalMolecularTesting,omitempty"`
	AdditionalMolecularTestingTier int32  `protobuf:"varint,47,opt,name=additionalMolecularTestingTier,proto3" json:"additionalMolecularTestingTier,omitempty"`
	// Type of the additional molecular testing - if any.
	AdditionalTestType     string `protobuf:"bytes,48,opt,name=additionalTestType,proto3" json:"additionalTestType,omitempty"`
	AdditionalTestTypeTier int32  `protobuf:"varint,49,opt,name=additionalTestTypeTier,proto3" json:"additionalTestTypeTier,omitempty"`
	// Name of the laboratory where the testing was done.
	LaboratoryName     string `protobuf:"bytes,50,opt,name=laboratoryName,proto3" json:"laboratoryName,omitempty"`
	LaboratoryNameTier int32  `protobuf:"varint,51,opt,name=laboratoryNameTier,proto3" json:"laboratoryNameTier,omitempty"`
	// Address information of the laboratory where the testing was executed.
	LaboratoryAddress     string `protobuf:"bytes,52,opt,name=laboratoryAddress,proto3" json:"laboratoryAddress,omitempty"`
	LaboratoryAddressTier int32  `protobuf:"varint,53,opt,name=laboratoryAddressTier,proto3" json:"laboratoryAddressTier,omitempty"`
	// ** field duplication - will be removed in the future.
	SiteOfMetastases     string `protobuf:"bytes,54,opt,name=siteOfMetastases,proto3" json:"siteOfMetastases,omitempty"`
	SiteOfMetastasesTier int32  `protobuf:"varint,55,opt,name=siteOfMetastasesTier,proto3" json:"siteOfMetastasesTier,omitempty"`
	// ** field duplication - will be removed in the future.
	StagingSystemVersion     string `protobuf:"bytes,56,opt,name=stagingSystemVersion,proto3" json:"stagingSystemVersion,omitempty"`
	StagingSystemVersionTier int32  `protobuf:"varint,57,opt,name=stagingSystemVersionTier,proto3" json:"stagingSystemVersionTier,omitempty"`
	// ** field duplication - will be removed in the future.
	SpecificStage     string `protobuf:"bytes,58,opt,name=specificStage,proto3" json:"specificStage,omitempty"`
	SpecificStageTier int32  `protobuf:"varint,59,opt,name=specificStageTier,proto3" json:"specificStageTier,omitempty"`
	// ** field duplication - will be removed in the future.
	CancerSpecificBiomarkers     string `protobuf:"bytes,60,opt,name=cancerSpecificBiomarkers,proto3" json:"cancerSpecificBiomarkers,omitempty"`
	CancerSpecificBiomarkersTier int32  `protobuf:"varint,61,opt,name=cancerSpecificBiomarkersTier,proto3" json:"cancerSpecificBiomarkersTier,omitempty"`
	// ** field duplication - will be removed in the future.
	AdditionalMolecularDiagnosticTestingPerformed     string `protobuf:"bytes,62,opt,name=additionalMolecularDiagnosticTestingPerformed,proto3" json:"additionalMolecularDiagnosticTestingPerformed,omitempty"`
	AdditionalMolecularDiagnosticTestingPerformedTier int32  `protobuf:"varint,63,opt,name=additionalMolecularDiagnosticTestingPerformedTier,proto3" json:"additionalMolecularDiagnosticTestingPerformedTier,omitempty"`
	// ** field duplication - will be removed in the future.
	AdditionalTest       string   `protobuf:"bytes,64,opt,name=additionalTest,proto3" json:"additionalTest,omitempty"`
	AdditionalTestTier   int32    `protobuf:"varint,65,opt,name=additionalTestTier,proto3" json:"additionalTestTier,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Diagnosis) Reset()         { *m = Diagnosis{} }
func (m *Diagnosis) String() string { return proto.CompactTextString(m) }
func (*Diagnosis) ProtoMessage()    {}
func (*Diagnosis) Descriptor() ([]byte, []int) {
	return fileDescriptor_eca1b93ccfe37bb1, []int{3}
}

func (m *Diagnosis) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Diagnosis.Unmarshal(m, b)
}
func (m *Diagnosis) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Diagnosis.Marshal(b, m, deterministic)
}
func (m *Diagnosis) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Diagnosis.Merge(m, src)
}
func (m *Diagnosis) XXX_Size() int {
	return xxx_messageInfo_Diagnosis.Size(m)
}
func (m *Diagnosis) XXX_DiscardUnknown() {
	xxx_messageInfo_Diagnosis.DiscardUnknown(m)
}

var xxx_messageInfo_Diagnosis proto.InternalMessageInfo

func (m *Diagnosis) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Diagnosis) GetDatasetId() string {
	if m != nil {
		return m.DatasetId
	}
	return ""
}

func (m *Diagnosis) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Diagnosis) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Diagnosis) GetCreated() string {
	if m != nil {
		return m.Created
	}
	return ""
}

func (m *Diagnosis) GetUpdated() string {
	if m != nil {
		return m.Updated
	}
	return ""
}

func (m *Diagnosis) GetAttributes() *Attributes {
	if m != nil {
		return m.Attributes
	}
	return nil
}

func (m *Diagnosis) GetPatientId() string {
	if m != nil {
		return m.PatientId
	}
	return ""
}

func (m *Diagnosis) GetPatientIdTier() int32 {
	if m != nil {
		return m.PatientIdTier
	}
	return 0
}

func (m *Diagnosis) GetDiagnosisId() string {
	if m != nil {
		return m.DiagnosisId
	}
	return ""
}

func (m *Diagnosis) GetDiagnosisIdTier() int32 {
	if m != nil {
		return m.DiagnosisIdTier
	}
	return 0
}

func (m *Diagnosis) GetDiagnosisDate() string {
	if m != nil {
		return m.DiagnosisDate
	}
	return ""
}

func (m *Diagnosis) GetDiagnosisDateTier() int32 {
	if m != nil {
		return m.DiagnosisDateTier
	}
	return 0
}

func (m *Diagnosis) GetAgeAtDiagnosis() string {
	if m != nil {
		return m.AgeAtDiagnosis
	}
	return ""
}

func (m *Diagnosis) GetAgeAtDiagnosisTier() int32 {
	if m != nil {
		return m.AgeAtDiagnosisTier
	}
	return 0
}

func (m *Diagnosis) GetCancerType() string {
	if m != nil {
		return m.CancerType
	}
	return ""
}

func (m *Diagnosis) GetCancerTypeTier() int32 {
	if m != nil {
		return m.CancerTypeTier
	}
	return 0
}

func (m *Diagnosis) GetClassification() string {
	if m != nil {
		return m.Classification
	}
	return ""
}

func (m *Diagnosis) GetClassificationTier() int32 {
	if m != nil {
		return m.ClassificationTier
	}
	return 0
}

func (m *Diagnosis) GetCancerSite() string {
	if m != nil {
		return m.CancerSite
	}
	return ""
}

func (m *Diagnosis) GetCancerSiteTier() int32 {
	if m != nil {
		return m.CancerSiteTier
	}
	return 0
}

func (m *Diagnosis) GetHistology() string {
	if m != nil {
		return m.Histology
	}
	return ""
}

func (m *Diagnosis) GetHistologyTier() int32 {
	if m != nil {
		return m.HistologyTier
	}
	return 0
}

func (m *Diagnosis) GetMethodOfDefinitiveDiagnosis() string {
	if m != nil {
		return m.MethodOfDefinitiveDiagnosis
	}
	return ""
}

func (m *Diagnosis) GetMethodOfDefinitiveDiagnosisTier() int32 {
	if m != nil {
		return m.MethodOfDefinitiveDiagnosisTier
	}
	return 0
}

func (m *Diagnosis) GetSampleType() string {
	if m != nil {
		return m.SampleType
	}
	return ""
}

func (m *Diagnosis) GetSampleTypeTier() int32 {
	if m != nil {
		return m.SampleTypeTier
	}
	return 0
}

func (m *Diagnosis) GetSampleSite() string {
	if m != nil {
		return m.SampleSite
	}
	return ""
}

func (m *Diagnosis) GetSampleSiteTier() int32 {
	if m != nil {
		return m.SampleSiteTier
	}
	return 0
}

func (m *Diagnosis) GetTumorGrade() string {
	if m != nil {
		return m.TumorGrade
	}
	return ""
}

func (m *Diagnosis) GetTumorGradeTier() int32 {
	if m != nil {
		return m.TumorGradeTier
	}
	return 0
}

func (m *Diagnosis) GetGradingSystemUsed() string {
	if m != nil {
		return m.GradingSystemUsed
	}
	return ""
}

func (m *Diagnosis) GetGradingSystemUsedTier() int32 {
	if m != nil {
		return m.GradingSystemUsedTier
	}
	return 0
}

func (m *Diagnosis) GetSitesOfMetastases() string {
	if m != nil {
		return m.SitesOfMetastases
	}
	return ""
}

func (m *Diagnosis) GetSitesOfMetastasesTier() int32 {
	if m != nil {
		return m.SitesOfMetastasesTier
	}
	return 0
}

func (m *Diagnosis) GetStagingSystem() string {
	if m != nil {
		return m.StagingSystem
	}
	return ""
}

func (m *Diagnosis) GetStagingSystemTier() int32 {
	if m != nil {
		return m.StagingSystemTier
	}
	return 0
}

func (m *Diagnosis) GetVersionOrEditionOfTheStagingSystem() string {
	if m != nil {
		return m.VersionOrEditionOfTheStagingSystem
	}
	return ""
}

func (m *Diagnosis) GetVersionOrEditionOfTheStagingSystemTier() int32 {
	if m != nil {
		return m.VersionOrEditionOfTheStagingSystemTier
	}
	return 0
}

func (m *Diagnosis) GetSpecificTumorStageAtDiagnosis() string {
	if m != nil {
		return m.SpecificTumorStageAtDiagnosis
	}
	return ""
}

func (m *Diagnosis) GetSpecificTumorStageAtDiagnosisTier() int32 {
	if m != nil {
		return m.SpecificTumorStageAtDiagnosisTier
	}
	return 0
}

func (m *Diagnosis) GetPrognosticBiomarkers() string {
	if m != nil {
		return m.PrognosticBiomarkers
	}
	return ""
}

func (m *Diagnosis) GetPrognosticBiomarkersTier() int32 {
	if m != nil {
		return m.PrognosticBiomarkersTier
	}
	return 0
}

func (m *Diagnosis) GetBiomarkerQuantification() string {
	if m != nil {
		return m.BiomarkerQuantification
	}
	return ""
}

func (m *Diagnosis) GetBiomarkerQuantificationTier() int32 {
	if m != nil {
		return m.BiomarkerQuantificationTier
	}
	return 0
}

func (m *Diagnosis) GetAdditionalMolecularTesting() string {
	if m != nil {
		return m.AdditionalMolecularTesting
	}
	return ""
}

func (m *Diagnosis) GetAdditionalMolecularTestingTier() int32 {
	if m != nil {
		return m.AdditionalMolecularTestingTier
	}
	return 0
}

func (m *Diagnosis) GetAdditionalTestType() string {
	if m != nil {
		return m.AdditionalTestType
	}
	return ""
}

func (m *Diagnosis) GetAdditionalTestTypeTier() int32 {
	if m != nil {
		return m.AdditionalTestTypeTier
	}
	return 0
}

func (m *Diagnosis) GetLaboratoryName() string {
	if m != nil {
		return m.LaboratoryName
	}
	return ""
}

func (m *Diagnosis) GetLaboratoryNameTier() int32 {
	if m != nil {
		return m.LaboratoryNameTier
	}
	return 0
}

func (m *Diagnosis) GetLaboratoryAddress() string {
	if m != nil {
		return m.LaboratoryAddress
	}
	return ""
}

func (m *Diagnosis) GetLaboratoryAddressTier() int32 {
	if m != nil {
		return m.LaboratoryAddressTier
	}
	return 0
}

func (m *Diagnosis) GetSiteOfMetastases() string {
	if m != nil {
		return m.SiteOfMetastases
	}
	return ""
}

func (m *Diagnosis) GetSiteOfMetastasesTier() int32 {
	if m != nil {
		return m.SiteOfMetastasesTier
	}
	return 0
}

func (m *Diagnosis) GetStagingSystemVersion() string {
	if m != nil {
		return m.StagingSystemVersion
	}
	return ""
}

func (m *Diagnosis) GetStagingSystemVersionTier() int32 {
	if m != nil {
		return m.StagingSystemVersionTier
	}
	return 0
}

func (m *Diagnosis) GetSpecificStage() string {
	if m != nil {
		return m.SpecificStage
	}
	return ""
}

func (m *Diagnosis) GetSpecificStageTier() int32 {
	if m != nil {
		return m.SpecificStageTier
	}
	return 0
}

func (m *Diagnosis) GetCancerSpecificBiomarkers() string {
	if m != nil {
		return m.CancerSpecificBiomarkers
	}
	return ""
}

func (m *Diagnosis) GetCancerSpecificBiomarkersTier() int32 {
	if m != nil {
		return m.CancerSpecificBiomarkersTier
	}
	return 0
}

func (m *Diagnosis) GetAdditionalMolecularDiagnosticTestingPerformed() string {
	if m != nil {
		return m.AdditionalMolecularDiagnosticTestingPerformed
	}
	return ""
}

func (m *Diagnosis) GetAdditionalMolecularDiagnosticTestingPerformedTier() int32 {
	if m != nil {
		return m.AdditionalMolecularDiagnosticTestingPerformedTier
	}
	return 0
}

func (m *Diagnosis) GetAdditionalTest() string {
	if m != nil {
		return m.AdditionalTest
	}
	return ""
}

func (m *Diagnosis) GetAdditionalTestTier() int32 {
	if m != nil {
		return m.AdditionalTestTier
	}
	return 0
}

type Sample struct {
	// This is unique in the context of the server instance.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The ID of the dataset this object belongs to.
	DatasetId string `protobuf:"bytes,2,opt,name=dataset_id,json=datasetId,proto3" json:"dataset_id,omitempty"`
	// This is a label or symbolic identifier for this object.
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// This attribute contains human readable text.
	Description string `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	// The :ref:`ISO 8601<metadata_date_time>` time at which this record was created.
	Created string `protobuf:"bytes,5,opt,name=created,proto3" json:"created,omitempty"`
	// The :ref:`ISO 8601<metadata_date_time>` time at which this record was updated.
	Updated string `protobuf:"bytes,6,opt,name=updated,proto3" json:"updated,omitempty"`
	// A map of additional information.
	Attributes *Attributes `protobuf:"bytes,7,opt,name=attributes,proto3" json:"attributes,omitempty"`
	//
	PatientId     string `protobuf:"bytes,8,opt,name=patientId,proto3" json:"patientId,omitempty"`
	PatientIdTier int32  `protobuf:"varint,9,opt,name=patientIdTier,proto3" json:"patientIdTier,omitempty"`
	//
	SampleId     string `protobuf:"bytes,10,opt,name=sampleId,proto3" json:"sampleId,omitempty"`
	SampleIdTier int32  `protobuf:"varint,11,opt,name=sampleIdTier,proto3" json:"sampleIdTier,omitempty"`
	//
	DiagnosisId     string `protobuf:"bytes,12,opt,name=diagnosisId,proto3" json:"diagnosisId,omitempty"`
	DiagnosisIdTier int32  `protobuf:"varint,13,opt,name=diagnosisIdTier,proto3" json:"diagnosisIdTier,omitempty"`
	//
	LocalBiobankId     string `protobuf:"bytes,14,opt,name=localBiobankId,proto3" json:"localBiobankId,omitempty"`
	LocalBiobankIdTier int32  `protobuf:"varint,15,opt,name=localBiobankIdTier,proto3" json:"localBiobankIdTier,omitempty"`
	//
	CollectionDate     string `protobuf:"bytes,16,opt,name=collectionDate,proto3" json:"collectionDate,omitempty"`
	CollectionDateTier int32  `protobuf:"varint,17,opt,name=collectionDateTier,proto3" json:"collectionDateTier,omitempty"`
	//
	CollectionHospital     string `protobuf:"bytes,18,opt,name=collectionHospital,proto3" json:"collectionHospital,omitempty"`
	CollectionHospitalTier int32  `protobuf:"varint,19,opt,name=collectionHospitalTier,proto3" json:"collectionHospitalTier,omitempty"`
	//
	SampleType     string `protobuf:"bytes,20,opt,name=sampleType,proto3" json:"sampleType,omitempty"`
	SampleTypeTier int32  `protobuf:"varint,21,opt,name=sampleTypeTier,proto3" json:"sampleTypeTier,omitempty"`
	//
	TissueDiseaseState     string `protobuf:"bytes,22,opt,name=tissueDiseaseState,proto3" json:"tissueDiseaseState,omitempty"`
	TissueDiseaseStateTier int32  `protobuf:"varint,23,opt,name=tissueDiseaseStateTier,proto3" json:"tissueDiseaseStateTier,omitempty"`
	//
	AnatomicSiteTheSampleObtainedFrom     string `protobuf:"bytes,24,opt,name=anatomicSiteTheSampleObtainedFrom,proto3" json:"anatomicSiteTheSampleObtainedFrom,omitempty"`
	AnatomicSiteTheSampleObtainedFromTier int32  `protobuf:"varint,25,opt,name=anatomicSiteTheSampleObtainedFromTier,proto3" json:"anatomicSiteTheSampleObtainedFromTier,omitempty"`
	//
	CancerType     string `protobuf:"bytes,26,opt,name=cancerType,proto3" json:"cancerType,omitempty"`
	CancerTypeTier int32  `protobuf:"varint,27,opt,name=cancerTypeTier,proto3" json:"cancerTypeTier,omitempty"`
	//
	CancerSubtype     string `protobuf:"bytes,28,opt,name=cancerSubtype,proto3" json:"cancerSubtype,omitempty"`
	CancerSubtypeTier int32  `protobuf:"varint,29,opt,name=cancerSubtypeTier,proto3" json:"cancerSubtypeTier,omitempty"`
	//
	PathologyReportId     string `protobuf:"bytes,30,opt,name=pathologyReportId,proto3" json:"pathologyReportId,omitempty"`
	PathologyReportIdTier int32  `protobuf:"varint,31,opt,name=pathologyReportIdTier,proto3" json:"pathologyReportIdTier,omitempty"`
	//
	MorphologicalCode     string `protobuf:"bytes,32,opt,name=morphologicalCode,proto3" json:"morphologicalCode,omitempty"`
	MorphologicalCodeTier int32  `protobuf:"varint,33,opt,name=morphologicalCodeTier,proto3" json:"morphologicalCodeTier,omitempty"`
	//
	TopologicalCode     string `protobuf:"bytes,34,opt,name=topologicalCode,proto3" json:"topologicalCode,omitempty"`
	TopologicalCodeTier int32  `protobuf:"varint,35,opt,name=topologicalCodeTier,proto3" json:"topologicalCodeTier,omitempty"`
	//
	ShippingDate     string `protobuf:"bytes,36,opt,name=shippingDate,proto3" json:"shippingDate,omitempty"`
	ShippingDateTier int32  `protobuf:"varint,37,opt,name=shippingDateTier,proto3" json:"shippingDateTier,omitempty"`
	//
	ReceivedDate     string `protobuf:"bytes,38,opt,name=receivedDate,proto3" json:"receivedDate,omitempty"`
	ReceivedDateTier int32  `protobuf:"varint,39,opt,name=receivedDateTier,proto3" json:"receivedDateTier,omitempty"`
	//
	QualityControlPerformed     string `protobuf:"bytes,40,opt,name=qualityControlPerformed,proto3" json:"qualityControlPerformed,omitempty"`
	QualityControlPerformedTier int32  `protobuf:"varint,41,opt,name=qualityControlPerformedTier,proto3" json:"qualityControlPerformedTier,omitempty"`
	//
	EstimatedTumorContent     string `protobuf:"bytes,42,opt,name=estimatedTumorContent,proto3" json:"estimatedTumorContent,omitempty"`
	EstimatedTumorContentTier int32  `protobuf:"varint,43,opt,name=estimatedTumorContentTier,proto3" json:"estimatedTumorContentTier,omitempty"`
	//
	Quantity     string `protobuf:"bytes,44,opt,name=quantity,proto3" json:"quantity,omitempty"`
	QuantityTier int32  `protobuf:"varint,45,opt,name=quantityTier,proto3" json:"quantityTier,omitempty"`
	//
	Units     string `protobuf:"bytes,46,opt,name=units,proto3" json:"units,omitempty"`
	UnitsTier int32  `protobuf:"varint,47,opt,name=unitsTier,proto3" json:"unitsTier,omitempty"`
	//
	AssociatedBiobank     string `protobuf:"bytes,48,opt,name=associatedBiobank,proto3" json:"associatedBiobank,omitempty"`
	AssociatedBiobankTier int32  `protobuf:"varint,49,opt,name=associatedBiobankTier,proto3" json:"associatedBiobankTier,omitempty"`
	//
	OtherBiobank     string `protobuf:"bytes,50,opt,name=otherBiobank,proto3" json:"otherBiobank,omitempty"`
	OtherBiobankTier int32  `protobuf:"varint,51,opt,name=otherBiobankTier,proto3" json:"otherBiobankTier,omitempty"`
	//
	SopFollowed     string `protobuf:"bytes,52,opt,name=sopFollowed,proto3" json:"sopFollowed,omitempty"`
	SopFollowedTier int32  `protobuf:"varint,53,opt,name=sopFollowedTier,proto3" json:"sopFollowedTier,omitempty"`
	//
	IfNotExplainAnyDeviation     string `protobuf:"bytes,54,opt,name=ifNotExplainAnyDeviation,proto3" json:"ifNotExplainAnyDeviation,omitempty"`
	IfNotExplainAnyDeviationTier int32  `protobuf:"varint,55,opt,name=ifNotExplainAnyDeviationTier,proto3" json:"ifNotExplainAnyDeviationTier,omitempty"`
	//
	RecordingDate     string `protobuf:"bytes,56,opt,name=recordingDate,proto3" json:"recordingDate,omitempty"`
	RecordingDateTier int32  `protobuf:"varint,57,opt,name=recordingDateTier,proto3" json:"recordingDateTier,omitempty"`
	//
	StartInterval        string   `protobuf:"bytes,58,opt,name=startInterval,proto3" json:"startInterval,omitempty"`
	StartIntervalTier    int32    `protobuf:"varint,59,opt,name=startIntervalTier,proto3" json:"startIntervalTier,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Sample) Reset()         { *m = Sample{} }
func (m *Sample) String() string { return proto.CompactTextString(m) }
func (*Sample) ProtoMessage()    {}
func (*Sample) Descriptor() ([]byte, []int) {
	return fileDescriptor_eca1b93ccfe37bb1, []int{4}
}

func (m *Sample) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Sample.Unmarshal(m, b)
}
func (m *Sample) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Sample.Marshal(b, m, deterministic)
}
func (m *Sample) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Sample.Merge(m, src)
}
func (m *Sample) XXX_Size() int {
	return xxx_messageInfo_Sample.Size(m)
}
func (m *Sample) XXX_DiscardUnknown() {
	xxx_messageInfo_Sample.DiscardUnknown(m)
}

var xxx_messageInfo_Sample proto.InternalMessageInfo

func (m *Sample) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Sample) GetDatasetId() string {
	if m != nil {
		return m.DatasetId
	}
	return ""
}

func (m *Sample) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Sample) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Sample) GetCreated() string {
	if m != nil {
		return m.Created
	}
	return ""
}

func (m *Sample) GetUpdated() string {
	if m != nil {
		return m.Updated
	}
	return ""
}

func (m *Sample) GetAttributes() *Attributes {
	if m != nil {
		return m.Attributes
	}
	return nil
}

func (m *Sample) GetPatientId() string {
	if m != nil {
		return m.PatientId
	}
	return ""
}

func (m *Sample) GetPatientIdTier() int32 {
	if m != nil {
		return m.PatientIdTier
	}
	return 0
}

func (m *Sample) GetSampleId() string {
	if m != nil {
		return m.SampleId
	}
	return ""
}

func (m *Sample) GetSampleIdTier() int32 {
	if m != nil {
		return m.SampleIdTier
	}
	return 0
}

func (m *Sample) GetDiagnosisId() string {
	if m != nil {
		return m.DiagnosisId
	}
	return ""
}

func (m *Sample) GetDiagnosisIdTier() int32 {
	if m != nil {
		return m.DiagnosisIdTier
	}
	return 0
}

func (m *Sample) GetLocalBiobankId() string {
	if m != nil {
		return m.LocalBiobankId
	}
	return ""
}

func (m *Sample) GetLocalBiobankIdTier() int32 {
	if m != nil {
		return m.LocalBiobankIdTier
	}
	return 0
}

func (m *Sample) GetCollectionDate() string {
	if m != nil {
		return m.CollectionDate
	}
	return ""
}

func (m *Sample) GetCollectionDateTier() int32 {
	if m != nil {
		return m.CollectionDateTier
	}
	return 0
}

func (m *Sample) GetCollectionHospital() string {
	if m != nil {
		return m.CollectionHospital
	}
	return ""
}

func (m *Sample) GetCollectionHospitalTier() int32 {
	if m != nil {
		return m.CollectionHospitalTier
	}
	return 0
}

func (m *Sample) GetSampleType() string {
	if m != nil {
		return m.SampleType
	}
	return ""
}

func (m *Sample) GetSampleTypeTier() int32 {
	if m != nil {
		return m.SampleTypeTier
	}
	return 0
}

func (m *Sample) GetTissueDiseaseState() string {
	if m != nil {
		return m.TissueDiseaseState
	}
	return ""
}

func (m *Sample) GetTissueDiseaseStateTier() int32 {
	if m != nil {
		return m.TissueDiseaseStateTier
	}
	return 0
}

func (m *Sample) GetAnatomicSiteTheSampleObtainedFrom() string {
	if m != nil {
		return m.AnatomicSiteTheSampleObtainedFrom
	}
	return ""
}

func (m *Sample) GetAnatomicSiteTheSampleObtainedFromTier() int32 {
	if m != nil {
		return m.AnatomicSiteTheSampleObtainedFromTier
	}
	return 0
}

func (m *Sample) GetCancerType() string {
	if m != nil {
		return m.CancerType
	}
	return ""
}

func (m *Sample) GetCancerTypeTier() int32 {
	if m != nil {
		return m.CancerTypeTier
	}
	return 0
}

func (m *Sample) GetCancerSubtype() string {
	if m != nil {
		return m.CancerSubtype
	}
	return ""
}

func (m *Sample) GetCancerSubtypeTier() int32 {
	if m != nil {
		return m.CancerSubtypeTier
	}
	return 0
}

func (m *Sample) GetPathologyReportId() string {
	if m != nil {
		return m.PathologyReportId
	}
	return ""
}

func (m *Sample) GetPathologyReportIdTier() int32 {
	if m != nil {
		return m.PathologyReportIdTier
	}
	return 0
}

func (m *Sample) GetMorphologicalCode() string {
	if m != nil {
		return m.MorphologicalCode
	}
	return ""
}

func (m *Sample) GetMorphologicalCodeTier() int32 {
	if m != nil {
		return m.MorphologicalCodeTier
	}
	return 0
}

func (m *Sample) GetTopologicalCode() string {
	if m != nil {
		return m.TopologicalCode
	}
	return ""
}

func (m *Sample) GetTopologicalCodeTier() int32 {
	if m != nil {
		return m.TopologicalCodeTier
	}
	return 0
}

func (m *Sample) GetShippingDate() string {
	if m != nil {
		return m.ShippingDate
	}
	return ""
}

func (m *Sample) GetShippingDateTier() int32 {
	if m != nil {
		return m.ShippingDateTier
	}
	return 0
}

func (m *Sample) GetReceivedDate() string {
	if m != nil {
		return m.ReceivedDate
	}
	return ""
}

func (m *Sample) GetReceivedDateTier() int32 {
	if m != nil {
		return m.ReceivedDateTier
	}
	return 0
}

func (m *Sample) GetQualityControlPerformed() string {
	if m != nil {
		return m.QualityControlPerformed
	}
	return ""
}

func (m *Sample) GetQualityControlPerformedTier() int32 {
	if m != nil {
		return m.QualityControlPerformedTier
	}
	return 0
}

func (m *Sample) GetEstimatedTumorContent() string {
	if m != nil {
		return m.EstimatedTumorContent
	}
	return ""
}

func (m *Sample) GetEstimatedTumorContentTier() int32 {
	if m != nil {
		return m.EstimatedTumorContentTier
	}
	return 0
}

func (m *Sample) GetQuantity() string {
	if m != nil {
		return m.Quantity
	}
	return ""
}

func (m *Sample) GetQuantityTier() int32 {
	if m != nil {
		return m.QuantityTier
	}
	return 0
}

func (m *Sample) GetUnits() string {
	if m != nil {
		return m.Units
	}
	return ""
}

func (m *Sample) GetUnitsTier() int32 {
	if m != nil {
		return m.UnitsTier
	}
	return 0
}

func (m *Sample) GetAssociatedBiobank() string {
	if m != nil {
		return m.AssociatedBiobank
	}
	return ""
}

func (m *Sample) GetAssociatedBiobankTier() int32 {
	if m != nil {
		return m.AssociatedBiobankTier
	}
	return 0
}

func (m *Sample) GetOtherBiobank() string {
	if m != nil {
		return m.OtherBiobank
	}
	return ""
}

func (m *Sample) GetOtherBiobankTier() int32 {
	if m != nil {
		return m.OtherBiobankTier
	}
	return 0
}

func (m *Sample) GetSopFollowed() string {
	if m != nil {
		return m.SopFollowed
	}
	return ""
}

func (m *Sample) GetSopFollowedTier() int32 {
	if m != nil {
		return m.SopFollowedTier
	}
	return 0
}

func (m *Sample) GetIfNotExplainAnyDeviation() string {
	if m != nil {
		return m.IfNotExplainAnyDeviation
	}
	return ""
}

func (m *Sample) GetIfNotExplainAnyDeviationTier() int32 {
	if m != nil {
		return m.IfNotExplainAnyDeviationTier
	}
	return 0
}

func (m *Sample) GetRecordingDate() string {
	if m != nil {
		return m.RecordingDate
	}
	return ""
}

func (m *Sample) GetRecordingDateTier() int32 {
	if m != nil {
		return m.RecordingDateTier
	}
	return 0
}

func (m *Sample) GetStartInterval() string {
	if m != nil {
		return m.StartInterval
	}
	return ""
}

func (m *Sample) GetStartIntervalTier() int32 {
	if m != nil {
		return m.StartIntervalTier
	}
	return 0
}

type Treatment struct {
	// This is unique in the context of the server instance.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The ID of the dataset this object belongs to.
	DatasetId string `protobuf:"bytes,2,opt,name=dataset_id,json=datasetId,proto3" json:"dataset_id,omitempty"`
	// This is a label or symbolic identifier for this object.
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// This attribute contains human readable text.
	Description string `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	// The :ref:`ISO 8601<metadata_date_time>` time at which this record was created.
	Created string `protobuf:"bytes,5,opt,name=created,proto3" json:"created,omitempty"`
	// The :ref:`ISO 8601<metadata_date_time>` time at which this record was updated.
	Updated string `protobuf:"bytes,6,opt,name=updated,proto3" json:"updated,omitempty"`
	// A map of additional information.
	Attributes *Attributes `protobuf:"bytes,7,opt,name=attributes,proto3" json:"attributes,omitempty"`
	//
	PatientId     string `protobuf:"bytes,8,opt,name=patientId,proto3" json:"patientId,omitempty"`
	PatientIdTier int32  `protobuf:"varint,9,opt,name=patientIdTier,proto3" json:"patientIdTier,omitempty"`
	//
	CourseNumber     string `protobuf:"bytes,10,opt,name=courseNumber,proto3" json:"courseNumber,omitempty"`
	CourseNumberTier int32  `protobuf:"varint,11,opt,name=courseNumberTier,proto3" json:"courseNumberTier,omitempty"`
	//
	TherapeuticModality     string `protobuf:"bytes,12,opt,name=therapeuticModality,proto3" json:"therapeuticModality,omitempty"`
	TherapeuticModalityTier int32  `protobuf:"varint,13,opt,name=therapeuticModalityTier,proto3" json:"therapeuticModalityTier,omitempty"`
	//
	TreatmentPlanType     string `protobuf:"bytes,14,opt,name=treatmentPlanType,proto3" json:"treatmentPlanType,omitempty"`
	TreatmentPlanTypeTier int32  `protobuf:"varint,15,opt,name=treatmentPlanTypeTier,proto3" json:"treatmentPlanTypeTier,omitempty"`
	//
	TreatmentIntent     string `protobuf:"bytes,16,opt,name=treatmentIntent,proto3" json:"treatmentIntent,omitempty"`
	TreatmentIntentTier int32  `protobuf:"varint,17,opt,name=treatmentIntentTier,proto3" json:"treatmentIntentTier,omitempty"`
	//
	StartDate     string `protobuf:"bytes,18,opt,name=startDate,proto3" json:"startDate,omitempty"`
	StartDateTier int32  `protobuf:"varint,19,opt,name=startDateTier,proto3" json:"startDateTier,omitempty"`
	//
	StopDate     string `protobuf:"bytes,20,opt,name=stopDate,proto3" json:"stopDate,omitempty"`
	StopDateTier int32  `protobuf:"varint,21,opt,name=stopDateTier,proto3" json:"stopDateTier,omitempty"`
	//
	ReasonForEndingTheTreatment     string `protobuf:"bytes,22,opt,name=reasonForEndingTheTreatment,proto3" json:"reasonForEndingTheTreatment,omitempty"`
	ReasonForEndingTheTreatmentTier int32  `protobuf:"varint,23,opt,name=reasonForEndingTheTreatmentTier,proto3" json:"reasonForEndingTheTreatmentTier,omitempty"`
	//
	ResponseToTreatment     string `protobuf:"bytes,24,opt,name=responseToTreatment,proto3" json:"responseToTreatment,omitempty"`
	ResponseToTreatmentTier int32  `protobuf:"varint,25,opt,name=responseToTreatmentTier,proto3" json:"responseToTreatmentTier,omitempty"`
	//
	ResponseCriteriaUsed     string `protobuf:"bytes,26,opt,name=responseCriteriaUsed,proto3" json:"responseCriteriaUsed,omitempty"`
	ResponseCriteriaUsedTier int32  `protobuf:"varint,27,opt,name=responseCriteriaUsedTier,proto3" json:"responseCriteriaUsedTier,omitempty"`
	//
	DateOfRecurrenceOrProgressionAfterThisTreatment     string `protobuf:"bytes,28,opt,name=dateOfRecurrenceOrProgressionAfterThisTreatment,proto3" json:"dateOfRecurrenceOrProgressionAfterThisTreatment,omitempty"`
	DateOfRecurrenceOrProgressionAfterThisTreatmentTier int32  `protobuf:"varint,29,opt,name=dateOfRecurrenceOrProgressionAfterThisTreatmentTier,proto3" json:"dateOfRecurrenceOrProgressionAfterThisTreatmentTier,omitempty"`
	//
	UnexpectedOrUnusualToxicityDuringTreatment     string `protobuf:"bytes,30,opt,name=unexpectedOrUnusualToxicityDuringTreatment,proto3" json:"unexpectedOrUnusualToxicityDuringTreatment,omitempty"`
	UnexpectedOrUnusualToxicityDuringTreatmentTier int32  `protobuf:"varint,31,opt,name=unexpectedOrUnusualToxicityDuringTreatmentTier,proto3" json:"unexpectedOrUnusualToxicityDuringTreatmentTier,omitempty"`
	//
	DiagnosisId     string `protobuf:"bytes,32,opt,name=diagnosisId,proto3" json:"diagnosisId,omitempty"`
	DiagnosisIdTier int32  `protobuf:"varint,33,opt,name=diagnosisIdTier,proto3" json:"diagnosisIdTier,omitempty"`
	//
	TreatmentPlanId      string   `protobuf:"bytes,34,opt,name=treatmentPlanId,proto3" json:"treatmentPlanId,omitempty"`
	TreatmentPlanIdTier  int32    `protobuf:"varint,35,opt,name=treatmentPlanIdTier,proto3" json:"treatmentPlanIdTier,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Treatment) Reset()         { *m = Treatment{} }
func (m *Treatment) String() string { return proto.CompactTextString(m) }
func (*Treatment) ProtoMessage()    {}
func (*Treatment) Descriptor() ([]byte, []int) {
	return fileDescriptor_eca1b93ccfe37bb1, []int{5}
}

func (m *Treatment) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Treatment.Unmarshal(m, b)
}
func (m *Treatment) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Treatment.Marshal(b, m, deterministic)
}
func (m *Treatment) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Treatment.Merge(m, src)
}
func (m *Treatment) XXX_Size() int {
	return xxx_messageInfo_Treatment.Size(m)
}
func (m *Treatment) XXX_DiscardUnknown() {
	xxx_messageInfo_Treatment.DiscardUnknown(m)
}

var xxx_messageInfo_Treatment proto.InternalMessageInfo

func (m *Treatment) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Treatment) GetDatasetId() string {
	if m != nil {
		return m.DatasetId
	}
	return ""
}

func (m *Treatment) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Treatment) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Treatment) GetCreated() string {
	if m != nil {
		return m.Created
	}
	return ""
}

func (m *Treatment) GetUpdated() string {
	if m != nil {
		return m.Updated
	}
	return ""
}

func (m *Treatment) GetAttributes() *Attributes {
	if m != nil {
		return m.Attributes
	}
	return nil
}

func (m *Treatment) GetPatientId() string {
	if m != nil {
		return m.PatientId
	}
	return ""
}

func (m *Treatment) GetPatientIdTier() int32 {
	if m != nil {
		return m.PatientIdTier
	}
	return 0
}

func (m *Treatment) GetCourseNumber() string {
	if m != nil {
		return m.CourseNumber
	}
	return ""
}

func (m *Treatment) GetCourseNumberTier() int32 {
	if m != nil {
		return m.CourseNumberTier
	}
	return 0
}

func (m *Treatment) GetTherapeuticModality() string {
	if m != nil {
		return m.TherapeuticModality
	}
	return ""
}

func (m *Treatment) GetTherapeuticModalityTier() int32 {
	if m != nil {
		return m.TherapeuticModalityTier
	}
	return 0
}

func (m *Treatment) GetTreatmentPlanType() string {
	if m != nil {
		return m.TreatmentPlanType
	}
	return ""
}

func (m *Treatment) GetTreatmentPlanTypeTier() int32 {
	if m != nil {
		return m.TreatmentPlanTypeTier
	}
	return 0
}

func (m *Treatment) GetTreatmentIntent() string {
	if m != nil {
		return m.TreatmentIntent
	}
	return ""
}

func (m *Treatment) GetTreatmentIntentTier() int32 {
	if m != nil {
		return m.TreatmentIntentTier
	}
	return 0
}

func (m *Treatment) GetStartDate() string {
	if m != nil {
		return m.StartDate
	}
	return ""
}

func (m *Treatment) GetStartDateTier() int32 {
	if m != nil {
		return m.StartDateTier
	}
	return 0
}

func (m *Treatment) GetStopDate() string {
	if m != nil {
		return m.StopDate
	}
	return ""
}

func (m *Treatment) GetStopDateTier() int32 {
	if m != nil {
		return m.StopDateTier
	}
	return 0
}

func (m *Treatment) GetReasonForEndingTheTreatment() string {
	if m != nil {
		return m.ReasonForEndingTheTreatment
	}
	return ""
}

func (m *Treatment) GetReasonForEndingTheTreatmentTier() int32 {
	if m != nil {
		return m.ReasonForEndingTheTreatmentTier
	}
	return 0
}

func (m *Treatment) GetResponseToTreatment() string {
	if m != nil {
		return m.ResponseToTreatment
	}
	return ""
}

func (m *Treatment) GetResponseToTreatmentTier() int32 {
	if m != nil {
		return m.ResponseToTreatmentTier
	}
	return 0
}

func (m *Treatment) GetResponseCriteriaUsed() string {
	if m != nil {
		return m.ResponseCriteriaUsed
	}
	return ""
}

func (m *Treatment) GetResponseCriteriaUsedTier() int32 {
	if m != nil {
		return m.ResponseCriteriaUsedTier
	}
	return 0
}

func (m *Treatment) GetDateOfRecurrenceOrProgressionAfterThisTreatment() string {
	if m != nil {
		return m.DateOfRecurrenceOrProgressionAfterThisTreatment
	}
	return ""
}

func (m *Treatment) GetDateOfRecurrenceOrProgressionAfterThisTreatmentTier() int32 {
	if m != nil {
		return m.DateOfRecurrenceOrProgressionAfterThisTreatmentTier
	}
	return 0
}

func (m *Treatment) GetUnexpectedOrUnusualToxicityDuringTreatment() string {
	if m != nil {
		return m.UnexpectedOrUnusualToxicityDuringTreatment
	}
	return ""
}

func (m *Treatment) GetUnexpectedOrUnusualToxicityDuringTreatmentTier() int32 {
	if m != nil {
		return m.UnexpectedOrUnusualToxicityDuringTreatmentTier
	}
	return 0
}

func (m *Treatment) GetDiagnosisId() string {
	if m != nil {
		return m.DiagnosisId
	}
	return ""
}

func (m *Treatment) GetDiagnosisIdTier() int32 {
	if m != nil {
		return m.DiagnosisIdTier
	}
	return 0
}

func (m *Treatment) GetTreatmentPlanId() string {
	if m != nil {
		return m.TreatmentPlanId
	}
	return ""
}

func (m *Treatment) GetTreatmentPlanIdTier() int32 {
	if m != nil {
		return m.TreatmentPlanIdTier
	}
	return 0
}

type Outcome struct {
	// This is unique in the context of the server instance.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The ID of the dataset this object belongs to.
	DatasetId string `protobuf:"bytes,2,opt,name=dataset_id,json=datasetId,proto3" json:"dataset_id,omitempty"`
	// This is a label or symbolic identifier for this object.
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// This attribute contains human readable text.
	Description string `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	// The :ref:`ISO 8601<metadata_date_time>` time at which this record was created.
	Created string `protobuf:"bytes,5,opt,name=created,proto3" json:"created,omitempty"`
	// The :ref:`ISO 8601<metadata_date_time>` time at which this record was updated.
	Updated string `protobuf:"bytes,6,opt,name=updated,proto3" json:"updated,omitempty"`
	// A map of additional information.
	Attributes *Attributes `protobuf:"bytes,7,opt,name=attributes,proto3" json:"attributes,omitempty"`
	//
	PatientId     string `protobuf:"bytes,8,opt,name=patientId,proto3" json:"patientId,omitempty"`
	PatientIdTier int32  `protobuf:"varint,9,opt,name=patientIdTier,proto3" json:"patientIdTier,omitempty"`
	//
	PhysicalExamId     string `protobuf:"bytes,10,opt,name=physicalExamId,proto3" json:"physicalExamId,omitempty"`
	PhysicalExamIdTier int32  `protobuf:"varint,11,opt,name=physicalExamIdTier,proto3" json:"physicalExamIdTier,omitempty"`
	//
	DateOfAssessment     string `protobuf:"bytes,12,opt,name=dateOfAssessment,proto3" json:"dateOfAssessment,omitempty"`
	DateOfAssessmentTier int32  `protobuf:"varint,13,opt,name=dateOfAssessmentTier,proto3" json:"dateOfAssessmentTier,omitempty"`
	//
	DiseaseResponseOrStatus     string `protobuf:"bytes,14,opt,name=diseaseResponseOrStatus,proto3" json:"diseaseResponseOrStatus,omitempty"`
	DiseaseResponseOrStatusTier int32  `protobuf:"varint,15,opt,name=diseaseResponseOrStatusTier,proto3" json:"diseaseResponseOrStatusTier,omitempty"`
	//
	OtherResponseClassification     string `protobuf:"bytes,16,opt,name=otherResponseClassification,proto3" json:"otherResponseClassification,omitempty"`
	OtherResponseClassificationTier int32  `protobuf:"varint,17,opt,name=otherResponseClassificationTier,proto3" json:"otherResponseClassificationTier,omitempty"`
	//
	MinimalResidualDiseaseAssessment     string `protobuf:"bytes,18,opt,name=minimalResidualDiseaseAssessment,proto3" json:"minimalResidualDiseaseAssessment,omitempty"`
	MinimalResidualDiseaseAssessmentTier int32  `protobuf:"varint,19,opt,name=minimalResidualDiseaseAssessmentTier,proto3" json:"minimalResidualDiseaseAssessmentTier,omitempty"`
	//
	MethodOfResponseEvaluation     string `protobuf:"bytes,20,opt,name=methodOfResponseEvaluation,proto3" json:"methodOfResponseEvaluation,omitempty"`
	MethodOfResponseEvaluationTier int32  `protobuf:"varint,21,opt,name=methodOfResponseEvaluationTier,proto3" json:"methodOfResponseEvaluationTier,omitempty"`
	//
	ResponseCriteriaUsed     string `protobuf:"bytes,22,opt,name=responseCriteriaUsed,proto3" json:"responseCriteriaUsed,omitempty"`
	ResponseCriteriaUsedTier int32  `protobuf:"varint,23,opt,name=responseCriteriaUsedTier,proto3" json:"responseCriteriaUsedTier,omitempty"`
	//
	SummaryStage     string `protobuf:"bytes,24,opt,name=summaryStage,proto3" json:"summaryStage,omitempty"`
	SummaryStageTier int32  `protobuf:"varint,25,opt,name=summaryStageTier,proto3" json:"summaryStageTier,omitempty"`
	//
	SitesOfAnyProgressionOrRecurrence     string `protobuf:"bytes,26,opt,name=sitesOfAnyProgressionOrRecurrence,proto3" json:"sitesOfAnyProgressionOrRecurrence,omitempty"`
	SitesOfAnyProgressionOrRecurrenceTier int32  `protobuf:"varint,27,opt,name=sitesOfAnyProgressionOrRecurrenceTier,proto3" json:"sitesOfAnyProgressionOrRecurrenceTier,omitempty"`
	//
	VitalStatus     string `protobuf:"bytes,28,opt,name=vitalStatus,proto3" json:"vitalStatus,omitempty"`
	VitalStatusTier int32  `protobuf:"varint,29,opt,name=vitalStatusTier,proto3" json:"vitalStatusTier,omitempty"`
	//
	Height     string `protobuf:"bytes,30,opt,name=height,proto3" json:"height,omitempty"`
	HeightTier int32  `protobuf:"varint,31,opt,name=heightTier,proto3" json:"heightTier,omitempty"`
	//
	Weight     string `protobuf:"bytes,32,opt,name=weight,proto3" json:"weight,omitempty"`
	WeightTier int32  `protobuf:"varint,33,opt,name=weightTier,proto3" json:"weightTier,omitempty"`
	//
	HeightUnits     string `protobuf:"bytes,34,opt,name=heightUnits,proto3" json:"heightUnits,omitempty"`
	HeightUnitsTier int32  `protobuf:"varint,35,opt,name=heightUnitsTier,proto3" json:"heightUnitsTier,omitempty"`
	//
	WeightUnits     string `protobuf:"bytes,36,opt,name=weightUnits,proto3" json:"weightUnits,omitempty"`
	WeightUnitsTier int32  `protobuf:"varint,37,opt,name=weightUnitsTier,proto3" json:"weightUnitsTier,omitempty"`
	//
	PerformanceStatus     string `protobuf:"bytes,38,opt,name=performanceStatus,proto3" json:"performanceStatus,omitempty"`
	PerformanceStatusTier int32  `protobuf:"varint,39,opt,name=performanceStatusTier,proto3" json:"performanceStatusTier,omitempty"`
	//
	OverallSurvivalInMonths     string `protobuf:"bytes,40,opt,name=overallSurvivalInMonths,proto3" json:"overallSurvivalInMonths,omitempty"`
	OverallSurvivalInMonthsTier int32  `protobuf:"varint,41,opt,name=overallSurvivalInMonthsTier,proto3" json:"overallSurvivalInMonthsTier,omitempty"`
	//
	DiseaseFreeSurvivalInMonths     string   `protobuf:"bytes,42,opt,name=diseaseFreeSurvivalInMonths,proto3" json:"diseaseFreeSurvivalInMonths,omitempty"`
	DiseaseFreeSurvivalInMonthsTier int32    `protobuf:"varint,43,opt,name=diseaseFreeSurvivalInMonthsTier,proto3" json:"diseaseFreeSurvivalInMonthsTier,omitempty"`
	XXX_NoUnkeyedLiteral            struct{} `json:"-"`
	XXX_unrecognized                []byte   `json:"-"`
	XXX_sizecache                   int32    `json:"-"`
}

func (m *Outcome) Reset()         { *m = Outcome{} }
func (m *Outcome) String() string { return proto.CompactTextString(m) }
func (*Outcome) ProtoMessage()    {}
func (*Outcome) Descriptor() ([]byte, []int) {
	return fileDescriptor_eca1b93ccfe37bb1, []int{6}
}

func (m *Outcome) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Outcome.Unmarshal(m, b)
}
func (m *Outcome) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Outcome.Marshal(b, m, deterministic)
}
func (m *Outcome) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Outcome.Merge(m, src)
}
func (m *Outcome) XXX_Size() int {
	return xxx_messageInfo_Outcome.Size(m)
}
func (m *Outcome) XXX_DiscardUnknown() {
	xxx_messageInfo_Outcome.DiscardUnknown(m)
}

var xxx_messageInfo_Outcome proto.InternalMessageInfo

func (m *Outcome) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Outcome) GetDatasetId() string {
	if m != nil {
		return m.DatasetId
	}
	return ""
}

func (m *Outcome) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Outcome) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Outcome) GetCreated() string {
	if m != nil {
		return m.Created
	}
	return ""
}

func (m *Outcome) GetUpdated() string {
	if m != nil {
		return m.Updated
	}
	return ""
}

func (m *Outcome) GetAttributes() *Attributes {
	if m != nil {
		return m.Attributes
	}
	return nil
}

func (m *Outcome) GetPatientId() string {
	if m != nil {
		return m.PatientId
	}
	return ""
}

func (m *Outcome) GetPatientIdTier() int32 {
	if m != nil {
		return m.PatientIdTier
	}
	return 0
}

func (m *Outcome) GetPhysicalExamId() string {
	if m != nil {
		return m.PhysicalExamId
	}
	return ""
}

func (m *Outcome) GetPhysicalExamIdTier() int32 {
	if m != nil {
		return m.PhysicalExamIdTier
	}
	return 0
}

func (m *Outcome) GetDateOfAssessment() string {
	if m != nil {
		return m.DateOfAssessment
	}
	return ""
}

func (m *Outcome) GetDateOfAssessmentTier() int32 {
	if m != nil {
		return m.DateOfAssessmentTier
	}
	return 0
}

func (m *Outcome) GetDiseaseResponseOrStatus() string {
	if m != nil {
		return m.DiseaseResponseOrStatus
	}
	return ""
}

func (m *Outcome) GetDiseaseResponseOrStatusTier() int32 {
	if m != nil {
		return m.DiseaseResponseOrStatusTier
	}
	return 0
}

func (m *Outcome) GetOtherResponseClassification() string {
	if m != nil {
		return m.OtherResponseClassification
	}
	return ""
}

func (m *Outcome) GetOtherResponseClassificationTier() int32 {
	if m != nil {
		return m.OtherResponseClassificationTier
	}
	return 0
}

func (m *Outcome) GetMinimalResidualDiseaseAssessment() string {
	if m != nil {
		return m.MinimalResidualDiseaseAssessment
	}
	return ""
}

func (m *Outcome) GetMinimalResidualDiseaseAssessmentTier() int32 {
	if m != nil {
		return m.MinimalResidualDiseaseAssessmentTier
	}
	return 0
}

func (m *Outcome) GetMethodOfResponseEvaluation() string {
	if m != nil {
		return m.MethodOfResponseEvaluation
	}
	return ""
}

func (m *Outcome) GetMethodOfResponseEvaluationTier() int32 {
	if m != nil {
		return m.MethodOfResponseEvaluationTier
	}
	return 0
}

func (m *Outcome) GetResponseCriteriaUsed() string {
	if m != nil {
		return m.ResponseCriteriaUsed
	}
	return ""
}

func (m *Outcome) GetResponseCriteriaUsedTier() int32 {
	if m != nil {
		return m.ResponseCriteriaUsedTier
	}
	return 0
}

func (m *Outcome) GetSummaryStage() string {
	if m != nil {
		return m.SummaryStage
	}
	return ""
}

func (m *Outcome) GetSummaryStageTier() int32 {
	if m != nil {
		return m.SummaryStageTier
	}
	return 0
}

func (m *Outcome) GetSitesOfAnyProgressionOrRecurrence() string {
	if m != nil {
		return m.SitesOfAnyProgressionOrRecurrence
	}
	return ""
}

func (m *Outcome) GetSitesOfAnyProgressionOrRecurrenceTier() int32 {
	if m != nil {
		return m.SitesOfAnyProgressionOrRecurrenceTier
	}
	return 0
}

func (m *Outcome) GetVitalStatus() string {
	if m != nil {
		return m.VitalStatus
	}
	return ""
}

func (m *Outcome) GetVitalStatusTier() int32 {
	if m != nil {
		return m.VitalStatusTier
	}
	return 0
}

func (m *Outcome) GetHeight() string {
	if m != nil {
		return m.Height
	}
	return ""
}

func (m *Outcome) GetHeightTier() int32 {
	if m != nil {
		return m.HeightTier
	}
	return 0
}

func (m *Outcome) GetWeight() string {
	if m != nil {
		return m.Weight
	}
	return ""
}

func (m *Outcome) GetWeightTier() int32 {
	if m != nil {
		return m.WeightTier
	}
	return 0
}

func (m *Outcome) GetHeightUnits() string {
	if m != nil {
		return m.HeightUnits
	}
	return ""
}

func (m *Outcome) GetHeightUnitsTier() int32 {
	if m != nil {
		return m.HeightUnitsTier
	}
	return 0
}

func (m *Outcome) GetWeightUnits() string {
	if m != nil {
		return m.WeightUnits
	}
	return ""
}

func (m *Outcome) GetWeightUnitsTier() int32 {
	if m != nil {
		return m.WeightUnitsTier
	}
	return 0
}

func (m *Outcome) GetPerformanceStatus() string {
	if m != nil {
		return m.PerformanceStatus
	}
	return ""
}

func (m *Outcome) GetPerformanceStatusTier() int32 {
	if m != nil {
		return m.PerformanceStatusTier
	}
	return 0
}

func (m *Outcome) GetOverallSurvivalInMonths() string {
	if m != nil {
		return m.OverallSurvivalInMonths
	}
	return ""
}

func (m *Outcome) GetOverallSurvivalInMonthsTier() int32 {
	if m != nil {
		return m.OverallSurvivalInMonthsTier
	}
	return 0
}

func (m *Outcome) GetDiseaseFreeSurvivalInMonths() string {
	if m != nil {
		return m.DiseaseFreeSurvivalInMonths
	}
	return ""
}

func (m *Outcome) GetDiseaseFreeSurvivalInMonthsTier() int32 {
	if m != nil {
		return m.DiseaseFreeSurvivalInMonthsTier
	}
	return 0
}

type Complication struct {
	// This is unique in the context of the server instance.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The ID of the dataset this object belongs to.
	DatasetId string `protobuf:"bytes,2,opt,name=dataset_id,json=datasetId,proto3" json:"dataset_id,omitempty"`
	// This is a label or symbolic identifier for this object.
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// This attribute contains human readable text.
	Description string `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	// The :ref:`ISO 8601<metadata_date_time>` time at which this record was created.
	Created string `protobuf:"bytes,5,opt,name=created,proto3" json:"created,omitempty"`
	// The :ref:`ISO 8601<metadata_date_time>` time at which this record was updated.
	Updated string `protobuf:"bytes,6,opt,name=updated,proto3" json:"updated,omitempty"`
	// A map of additional information.
	Attributes *Attributes `protobuf:"bytes,7,opt,name=attributes,proto3" json:"attributes,omitempty"`
	//
	PatientId     string `protobuf:"bytes,8,opt,name=patientId,proto3" json:"patientId,omitempty"`
	PatientIdTier int32  `protobuf:"varint,9,opt,name=patientIdTier,proto3" json:"patientIdTier,omitempty"`
	//
	Date     string `protobuf:"bytes,10,opt,name=date,proto3" json:"date,omitempty"`
	DateTier int32  `protobuf:"varint,11,opt,name=dateTier,proto3" json:"dateTier,omitempty"`
	//
	LateComplicationOfTherapyDeveloped     string `protobuf:"bytes,12,opt,name=lateComplicationOfTherapyDeveloped,proto3" json:"lateComplicationOfTherapyDeveloped,omitempty"`
	LateComplicationOfTherapyDevelopedTier int32  `protobuf:"varint,13,opt,name=lateComplicationOfTherapyDevelopedTier,proto3" json:"lateComplicationOfTherapyDevelopedTier,omitempty"`
	//
	LateToxicityDetail     string `protobuf:"bytes,14,opt,name=lateToxicityDetail,proto3" json:"lateToxicityDetail,omitempty"`
	LateToxicityDetailTier int32  `protobuf:"varint,15,opt,name=lateToxicityDetailTier,proto3" json:"lateToxicityDetailTier,omitempty"`
	//
	SuspectedTreatmentInducedNeoplasmDeveloped     string `protobuf:"bytes,16,opt,name=suspectedTreatmentInducedNeoplasmDeveloped,proto3" json:"suspectedTreatmentInducedNeoplasmDeveloped,omitempty"`
	SuspectedTreatmentInducedNeoplasmDevelopedTier int32  `protobuf:"varint,17,opt,name=suspectedTreatmentInducedNeoplasmDevelopedTier,proto3" json:"suspectedTreatmentInducedNeoplasmDevelopedTier,omitempty"`
	//
	TreatmentInducedNeoplasmDetails     string   `protobuf:"bytes,18,opt,name=treatmentInducedNeoplasmDetails,proto3" json:"treatmentInducedNeoplasmDetails,omitempty"`
	TreatmentInducedNeoplasmDetailsTier int32    `protobuf:"varint,19,opt,name=treatmentInducedNeoplasmDetailsTier,proto3" json:"treatmentInducedNeoplasmDetailsTier,omitempty"`
	XXX_NoUnkeyedLiteral                struct{} `json:"-"`
	XXX_unrecognized                    []byte   `json:"-"`
	XXX_sizecache                       int32    `json:"-"`
}

func (m *Complication) Reset()         { *m = Complication{} }
func (m *Complication) String() string { return proto.CompactTextString(m) }
func (*Complication) ProtoMessage()    {}
func (*Complication) Descriptor() ([]byte, []int) {
	return fileDescriptor_eca1b93ccfe37bb1, []int{7}
}

func (m *Complication) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Complication.Unmarshal(m, b)
}
func (m *Complication) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Complication.Marshal(b, m, deterministic)
}
func (m *Complication) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Complication.Merge(m, src)
}
func (m *Complication) XXX_Size() int {
	return xxx_messageInfo_Complication.Size(m)
}
func (m *Complication) XXX_DiscardUnknown() {
	xxx_messageInfo_Complication.DiscardUnknown(m)
}

var xxx_messageInfo_Complication proto.InternalMessageInfo

func (m *Complication) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Complication) GetDatasetId() string {
	if m != nil {
		return m.DatasetId
	}
	return ""
}

func (m *Complication) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Complication) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Complication) GetCreated() string {
	if m != nil {
		return m.Created
	}
	return ""
}

func (m *Complication) GetUpdated() string {
	if m != nil {
		return m.Updated
	}
	return ""
}

func (m *Complication) GetAttributes() *Attributes {
	if m != nil {
		return m.Attributes
	}
	return nil
}

func (m *Complication) GetPatientId() string {
	if m != nil {
		return m.PatientId
	}
	return ""
}

func (m *Complication) GetPatientIdTier() int32 {
	if m != nil {
		return m.PatientIdTier
	}
	return 0
}

func (m *Complication) GetDate() string {
	if m != nil {
		return m.Date
	}
	return ""
}

func (m *Complication) GetDateTier() int32 {
	if m != nil {
		return m.DateTier
	}
	return 0
}

func (m *Complication) GetLateComplicationOfTherapyDeveloped() string {
	if m != nil {
		return m.LateComplicationOfTherapyDeveloped
	}
	return ""
}

func (m *Complication) GetLateComplicationOfTherapyDevelopedTier() int32 {
	if m != nil {
		return m.LateComplicationOfTherapyDevelopedTier
	}
	return 0
}

func (m *Complication) GetLateToxicityDetail() string {
	if m != nil {
		return m.LateToxicityDetail
	}
	return ""
}

func (m *Complication) GetLateToxicityDetailTier() int32 {
	if m != nil {
		return m.LateToxicityDetailTier
	}
	return 0
}

func (m *Complication) GetSuspectedTreatmentInducedNeoplasmDeveloped() string {
	if m != nil {
		return m.SuspectedTreatmentInducedNeoplasmDeveloped
	}
	return ""
}

func (m *Complication) GetSuspectedTreatmentInducedNeoplasmDevelopedTier() int32 {
	if m != nil {
		return m.SuspectedTreatmentInducedNeoplasmDevelopedTier
	}
	return 0
}

func (m *Complication) GetTreatmentInducedNeoplasmDetails() string {
	if m != nil {
		return m.TreatmentInducedNeoplasmDetails
	}
	return ""
}

func (m *Complication) GetTreatmentInducedNeoplasmDetailsTier() int32 {
	if m != nil {
		return m.TreatmentInducedNeoplasmDetailsTier
	}
	return 0
}

type Tumourboard struct {
	// This is unique in the context of the server instance.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The ID of the dataset this object belongs to.
	DatasetId string `protobuf:"bytes,2,opt,name=dataset_id,json=datasetId,proto3" json:"dataset_id,omitempty"`
	// This is a label or symbolic identifier for this object.
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// This attribute contains human readable text.
	Description string `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	// The :ref:`ISO 8601<metadata_date_time>` time at which this record was created.
	Created string `protobuf:"bytes,5,opt,name=created,proto3" json:"created,omitempty"`
	// The :ref:`ISO 8601<metadata_date_time>` time at which this record was updated.
	Updated string `protobuf:"bytes,6,opt,name=updated,proto3" json:"updated,omitempty"`
	// A map of additional information.
	Attributes *Attributes `protobuf:"bytes,7,opt,name=attributes,proto3" json:"attributes,omitempty"`
	//
	PatientId     string `protobuf:"bytes,8,opt,name=patientId,proto3" json:"patientId,omitempty"`
	PatientIdTier int32  `protobuf:"varint,9,opt,name=patientIdTier,proto3" json:"patientIdTier,omitempty"`
	//
	DateOfMolecularTumorBoard     string `protobuf:"bytes,10,opt,name=dateOfMolecularTumorBoard,proto3" json:"dateOfMolecularTumorBoard,omitempty"`
	DateOfMolecularTumorBoardTier int32  `protobuf:"varint,11,opt,name=dateOfMolecularTumorBoardTier,proto3" json:"dateOfMolecularTumorBoardTier,omitempty"`
	//
	TypeOfSampleAnalyzed     string `protobuf:"bytes,12,opt,name=typeOfSampleAnalyzed,proto3" json:"typeOfSampleAnalyzed,omitempty"`
	TypeOfSampleAnalyzedTier int32  `protobuf:"varint,13,opt,name=typeOfSampleAnalyzedTier,proto3" json:"typeOfSampleAnalyzedTier,omitempty"`
	//
	TypeOfTumourSampleAnalyzed     string `protobuf:"bytes,14,opt,name=typeOfTumourSampleAnalyzed,proto3" json:"typeOfTumourSampleAnalyzed,omitempty"`
	TypeOfTumourSampleAnalyzedTier int32  `protobuf:"varint,15,opt,name=typeOfTumourSampleAnalyzedTier,proto3" json:"typeOfTumourSampleAnalyzedTier,omitempty"`
	//
	AnalysesDiscussed     string `protobuf:"bytes,16,opt,name=analysesDiscussed,proto3" json:"analysesDiscussed,omitempty"`
	AnalysesDiscussedTier int32  `protobuf:"varint,17,opt,name=analysesDiscussedTier,proto3" json:"analysesDiscussedTier,omitempty"`
	//
	SomaticSampleType     string `protobuf:"bytes,18,opt,name=somaticSampleType,proto3" json:"somaticSampleType,omitempty"`
	SomaticSampleTypeTier int32  `protobuf:"varint,19,opt,name=somaticSampleTypeTier,proto3" json:"somaticSampleTypeTier,omitempty"`
	//
	NormalExpressionComparator     string `protobuf:"bytes,20,opt,name=normalExpressionComparator,proto3" json:"normalExpressionComparator,omitempty"`
	NormalExpressionComparatorTier int32  `protobuf:"varint,21,opt,name=normalExpressionComparatorTier,proto3" json:"normalExpressionComparatorTier,omitempty"`
	//
	DiseaseExpressionComparator     string `protobuf:"bytes,22,opt,name=diseaseExpressionComparator,proto3" json:"diseaseExpressionComparator,omitempty"`
	DiseaseExpressionComparatorTier int32  `protobuf:"varint,23,opt,name=diseaseExpressionComparatorTier,proto3" json:"diseaseExpressionComparatorTier,omitempty"`
	//
	HasAGermlineVariantBeenIdentifiedByProfilingThatMayPredisposeToCancer     string `protobuf:"bytes,24,opt,name=hasAGermlineVariantBeenIdentifiedByProfilingThatMayPredisposeToCancer,proto3" json:"hasAGermlineVariantBeenIdentifiedByProfilingThatMayPredisposeToCancer,omitempty"`
	HasAGermlineVariantBeenIdentifiedByProfilingThatMayPredisposeToCancerTier int32  `protobuf:"varint,25,opt,name=hasAGermlineVariantBeenIdentifiedByProfilingThatMayPredisposeToCancerTier,proto3" json:"hasAGermlineVariantBeenIdentifiedByProfilingThatMayPredisposeToCancerTier,omitempty"`
	//
	ActionableTargetFound     string `protobuf:"bytes,26,opt,name=actionableTargetFound,proto3" json:"actionableTargetFound,omitempty"`
	ActionableTargetFoundTier int32  `protobuf:"varint,27,opt,name=actionableTargetFoundTier,proto3" json:"actionableTargetFoundTier,omitempty"`
	//
	MolecularTumorBoardRecommendation     string `protobuf:"bytes,28,opt,name=molecularTumorBoardRecommendation,proto3" json:"molecularTumorBoardRecommendation,omitempty"`
	MolecularTumorBoardRecommendationTier int32  `protobuf:"varint,29,opt,name=molecularTumorBoardRecommendationTier,proto3" json:"molecularTumorBoardRecommendationTier,omitempty"`
	//
	GermlineDnaSampleId     string `protobuf:"bytes,30,opt,name=germlineDnaSampleId,proto3" json:"germlineDnaSampleId,omitempty"`
	GermlineDnaSampleIdTier int32  `protobuf:"varint,31,opt,name=germlineDnaSampleIdTier,proto3" json:"germlineDnaSampleIdTier,omitempty"`
	//
	TumorDnaSampleId     string `protobuf:"bytes,32,opt,name=tumorDnaSampleId,proto3" json:"tumorDnaSampleId,omitempty"`
	TumorDnaSampleIdTier int32  `protobuf:"varint,33,opt,name=tumorDnaSampleIdTier,proto3" json:"tumorDnaSampleIdTier,omitempty"`
	//
	TumorRnaSampleId     string `protobuf:"bytes,34,opt,name=tumorRnaSampleId,proto3" json:"tumorRnaSampleId,omitempty"`
	TumorRnaSampleIdTier int32  `protobuf:"varint,35,opt,name=tumorRnaSampleIdTier,proto3" json:"tumorRnaSampleIdTier,omitempty"`
	//
	GermlineSnvDiscussed     string `protobuf:"bytes,36,opt,name=germlineSnvDiscussed,proto3" json:"germlineSnvDiscussed,omitempty"`
	GermlineSnvDiscussedTier int32  `protobuf:"varint,37,opt,name=germlineSnvDiscussedTier,proto3" json:"germlineSnvDiscussedTier,omitempty"`
	//
	SomaticSnvDiscussed     string `protobuf:"bytes,38,opt,name=somaticSnvDiscussed,proto3" json:"somaticSnvDiscussed,omitempty"`
	SomaticSnvDiscussedTier int32  `protobuf:"varint,39,opt,name=somaticSnvDiscussedTier,proto3" json:"somaticSnvDiscussedTier,omitempty"`
	//
	CnvsDiscussed     string `protobuf:"bytes,40,opt,name=cnvsDiscussed,proto3" json:"cnvsDiscussed,omitempty"`
	CnvsDiscussedTier int32  `protobuf:"varint,41,opt,name=cnvsDiscussedTier,proto3" json:"cnvsDiscussedTier,omitempty"`
	//
	StructuralVariantDiscussed     string `protobuf:"bytes,42,opt,name=structuralVariantDiscussed,proto3" json:"structuralVariantDiscussed,omitempty"`
	StructuralVariantDiscussedTier int32  `protobuf:"varint,43,opt,name=structuralVariantDiscussedTier,proto3" json:"structuralVariantDiscussedTier,omitempty"`
	//
	ClassificationOfVariants     string `protobuf:"bytes,44,opt,name=classificationOfVariants,proto3" json:"classificationOfVariants,omitempty"`
	ClassificationOfVariantsTier int32  `protobuf:"varint,45,opt,name=classificationOfVariantsTier,proto3" json:"classificationOfVariantsTier,omitempty"`
	//
	ClinicalValidationProgress     string `protobuf:"bytes,46,opt,name=clinicalValidationProgress,proto3" json:"clinicalValidationProgress,omitempty"`
	ClinicalValidationProgressTier int32  `protobuf:"varint,47,opt,name=clinicalValidationProgressTier,proto3" json:"clinicalValidationProgressTier,omitempty"`
	//
	TypeOfValidation     string `protobuf:"bytes,48,opt,name=typeOfValidation,proto3" json:"typeOfValidation,omitempty"`
	TypeOfValidationTier int32  `protobuf:"varint,49,opt,name=typeOfValidationTier,proto3" json:"typeOfValidationTier,omitempty"`
	//
	AgentOrDrugClass     string `protobuf:"bytes,50,opt,name=agentOrDrugClass,proto3" json:"agentOrDrugClass,omitempty"`
	AgentOrDrugClassTier int32  `protobuf:"varint,51,opt,name=agentOrDrugClassTier,proto3" json:"agentOrDrugClassTier,omitempty"`
	//
	LevelOfEvidenceForExpressionTargetAgentMatch     string `protobuf:"bytes,52,opt,name=levelOfEvidenceForExpressionTargetAgentMatch,proto3" json:"levelOfEvidenceForExpressionTargetAgentMatch,omitempty"`
	LevelOfEvidenceForExpressionTargetAgentMatchTier int32  `protobuf:"varint,53,opt,name=levelOfEvidenceForExpressionTargetAgentMatchTier,proto3" json:"levelOfEvidenceForExpressionTargetAgentMatchTier,omitempty"`
	//
	DidTreatmentPlanChangeBasedOnProfilingResult     string `protobuf:"bytes,54,opt,name=didTreatmentPlanChangeBasedOnProfilingResult,proto3" json:"didTreatmentPlanChangeBasedOnProfilingResult,omitempty"`
	DidTreatmentPlanChangeBasedOnProfilingResultTier int32  `protobuf:"varint,55,opt,name=didTreatmentPlanChangeBasedOnProfilingResultTier,proto3" json:"didTreatmentPlanChangeBasedOnProfilingResultTier,omitempty"`
	//
	HowTreatmentHasAlteredBasedOnProfiling     string `protobuf:"bytes,56,opt,name=howTreatmentHasAlteredBasedOnProfiling,proto3" json:"howTreatmentHasAlteredBasedOnProfiling,omitempty"`
	HowTreatmentHasAlteredBasedOnProfilingTier int32  `protobuf:"varint,57,opt,name=howTreatmentHasAlteredBasedOnProfilingTier,proto3" json:"howTreatmentHasAlteredBasedOnProfilingTier,omitempty"`
	//
	ReasonTreatmentPlanDidNotChangeBasedOnProfiling     string `protobuf:"bytes,58,opt,name=reasonTreatmentPlanDidNotChangeBasedOnProfiling,proto3" json:"reasonTreatmentPlanDidNotChangeBasedOnProfiling,omitempty"`
	ReasonTreatmentPlanDidNotChangeBasedOnProfilingTier int32  `protobuf:"varint,59,opt,name=reasonTreatmentPlanDidNotChangeBasedOnProfilingTier,proto3" json:"reasonTreatmentPlanDidNotChangeBasedOnProfilingTier,omitempty"`
	//
	DetailsOfTreatmentPlanImpact     string `protobuf:"bytes,60,opt,name=detailsOfTreatmentPlanImpact,proto3" json:"detailsOfTreatmentPlanImpact,omitempty"`
	DetailsOfTreatmentPlanImpactTier int32  `protobuf:"varint,61,opt,name=detailsOfTreatmentPlanImpactTier,proto3" json:"detailsOfTreatmentPlanImpactTier,omitempty"`
	//
	PatientOrFamilyInformedOfGermlineVariant     string `protobuf:"bytes,62,opt,name=patientOrFamilyInformedOfGermlineVariant,proto3" json:"patientOrFamilyInformedOfGermlineVariant,omitempty"`
	PatientOrFamilyInformedOfGermlineVariantTier int32  `protobuf:"varint,63,opt,name=patientOrFamilyInformedOfGermlineVariantTier,proto3" json:"patientOrFamilyInformedOfGermlineVariantTier,omitempty"`
	//
	PatientHasBeenReferredToAHereditaryCancerProgramBasedOnThisMolecularProfiling     string `protobuf:"bytes,64,opt,name=patientHasBeenReferredToAHereditaryCancerProgramBasedOnThisMolecularProfiling,proto3" json:"patientHasBeenReferredToAHereditaryCancerProgramBasedOnThisMolecularProfiling,omitempty"`
	PatientHasBeenReferredToAHereditaryCancerProgramBasedOnThisMolecularProfilingTier int32  `protobuf:"varint,65,opt,name=patientHasBeenReferredToAHereditaryCancerProgramBasedOnThisMolecularProfilingTier,proto3" json:"patientHasBeenReferredToAHereditaryCancerProgramBasedOnThisMolecularProfilingTier,omitempty"`
	//
	SummaryReport        string   `protobuf:"bytes,66,opt,name=summaryReport,proto3" json:"summaryReport,omitempty"`
	SummaryReportTier    int32    `protobuf:"varint,67,opt,name=summaryReportTier,proto3" json:"summaryReportTier,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Tumourboard) Reset()         { *m = Tumourboard{} }
func (m *Tumourboard) String() string { return proto.CompactTextString(m) }
func (*Tumourboard) ProtoMessage()    {}
func (*Tumourboard) Descriptor() ([]byte, []int) {
	return fileDescriptor_eca1b93ccfe37bb1, []int{8}
}

func (m *Tumourboard) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Tumourboard.Unmarshal(m, b)
}
func (m *Tumourboard) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Tumourboard.Marshal(b, m, deterministic)
}
func (m *Tumourboard) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Tumourboard.Merge(m, src)
}
func (m *Tumourboard) XXX_Size() int {
	return xxx_messageInfo_Tumourboard.Size(m)
}
func (m *Tumourboard) XXX_DiscardUnknown() {
	xxx_messageInfo_Tumourboard.DiscardUnknown(m)
}

var xxx_messageInfo_Tumourboard proto.InternalMessageInfo

func (m *Tumourboard) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Tumourboard) GetDatasetId() string {
	if m != nil {
		return m.DatasetId
	}
	return ""
}

func (m *Tumourboard) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Tumourboard) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Tumourboard) GetCreated() string {
	if m != nil {
		return m.Created
	}
	return ""
}

func (m *Tumourboard) GetUpdated() string {
	if m != nil {
		return m.Updated
	}
	return ""
}

func (m *Tumourboard) GetAttributes() *Attributes {
	if m != nil {
		return m.Attributes
	}
	return nil
}

func (m *Tumourboard) GetPatientId() string {
	if m != nil {
		return m.PatientId
	}
	return ""
}

func (m *Tumourboard) GetPatientIdTier() int32 {
	if m != nil {
		return m.PatientIdTier
	}
	return 0
}

func (m *Tumourboard) GetDateOfMolecularTumorBoard() string {
	if m != nil {
		return m.DateOfMolecularTumorBoard
	}
	return ""
}

func (m *Tumourboard) GetDateOfMolecularTumorBoardTier() int32 {
	if m != nil {
		return m.DateOfMolecularTumorBoardTier
	}
	return 0
}

func (m *Tumourboard) GetTypeOfSampleAnalyzed() string {
	if m != nil {
		return m.TypeOfSampleAnalyzed
	}
	return ""
}

func (m *Tumourboard) GetTypeOfSampleAnalyzedTier() int32 {
	if m != nil {
		return m.TypeOfSampleAnalyzedTier
	}
	return 0
}

func (m *Tumourboard) GetTypeOfTumourSampleAnalyzed() string {
	if m != nil {
		return m.TypeOfTumourSampleAnalyzed
	}
	return ""
}

func (m *Tumourboard) GetTypeOfTumourSampleAnalyzedTier() int32 {
	if m != nil {
		return m.TypeOfTumourSampleAnalyzedTier
	}
	return 0
}

func (m *Tumourboard) GetAnalysesDiscussed() string {
	if m != nil {
		return m.AnalysesDiscussed
	}
	return ""
}

func (m *Tumourboard) GetAnalysesDiscussedTier() int32 {
	if m != nil {
		return m.AnalysesDiscussedTier
	}
	return 0
}

func (m *Tumourboard) GetSomaticSampleType() string {
	if m != nil {
		return m.SomaticSampleType
	}
	return ""
}

func (m *Tumourboard) GetSomaticSampleTypeTier() int32 {
	if m != nil {
		return m.SomaticSampleTypeTier
	}
	return 0
}

func (m *Tumourboard) GetNormalExpressionComparator() string {
	if m != nil {
		return m.NormalExpressionComparator
	}
	return ""
}

func (m *Tumourboard) GetNormalExpressionComparatorTier() int32 {
	if m != nil {
		return m.NormalExpressionComparatorTier
	}
	return 0
}

func (m *Tumourboard) GetDiseaseExpressionComparator() string {
	if m != nil {
		return m.DiseaseExpressionComparator
	}
	return ""
}

func (m *Tumourboard) GetDiseaseExpressionComparatorTier() int32 {
	if m != nil {
		return m.DiseaseExpressionComparatorTier
	}
	return 0
}

func (m *Tumourboard) GetHasAGermlineVariantBeenIdentifiedByProfilingThatMayPredisposeToCancer() string {
	if m != nil {
		return m.HasAGermlineVariantBeenIdentifiedByProfilingThatMayPredisposeToCancer
	}
	return ""
}

func (m *Tumourboard) GetHasAGermlineVariantBeenIdentifiedByProfilingThatMayPredisposeToCancerTier() int32 {
	if m != nil {
		return m.HasAGermlineVariantBeenIdentifiedByProfilingThatMayPredisposeToCancerTier
	}
	return 0
}

func (m *Tumourboard) GetActionableTargetFound() string {
	if m != nil {
		return m.ActionableTargetFound
	}
	return ""
}

func (m *Tumourboard) GetActionableTargetFoundTier() int32 {
	if m != nil {
		return m.ActionableTargetFoundTier
	}
	return 0
}

func (m *Tumourboard) GetMolecularTumorBoardRecommendation() string {
	if m != nil {
		return m.MolecularTumorBoardRecommendation
	}
	return ""
}

func (m *Tumourboard) GetMolecularTumorBoardRecommendationTier() int32 {
	if m != nil {
		return m.MolecularTumorBoardRecommendationTier
	}
	return 0
}

func (m *Tumourboard) GetGermlineDnaSampleId() string {
	if m != nil {
		return m.GermlineDnaSampleId
	}
	return ""
}

func (m *Tumourboard) GetGermlineDnaSampleIdTier() int32 {
	if m != nil {
		return m.GermlineDnaSampleIdTier
	}
	return 0
}

func (m *Tumourboard) GetTumorDnaSampleId() string {
	if m != nil {
		return m.TumorDnaSampleId
	}
	return ""
}

func (m *Tumourboard) GetTumorDnaSampleIdTier() int32 {
	if m != nil {
		return m.TumorDnaSampleIdTier
	}
	return 0
}

func (m *Tumourboard) GetTumorRnaSampleId() string {
	if m != nil {
		return m.TumorRnaSampleId
	}
	return ""
}

func (m *Tumourboard) GetTumorRnaSampleIdTier() int32 {
	if m != nil {
		return m.TumorRnaSampleIdTier
	}
	return 0
}

func (m *Tumourboard) GetGermlineSnvDiscussed() string {
	if m != nil {
		return m.GermlineSnvDiscussed
	}
	return ""
}

func (m *Tumourboard) GetGermlineSnvDiscussedTier() int32 {
	if m != nil {
		return m.GermlineSnvDiscussedTier
	}
	return 0
}

func (m *Tumourboard) GetSomaticSnvDiscussed() string {
	if m != nil {
		return m.SomaticSnvDiscussed
	}
	return ""
}

func (m *Tumourboard) GetSomaticSnvDiscussedTier() int32 {
	if m != nil {
		return m.SomaticSnvDiscussedTier
	}
	return 0
}

func (m *Tumourboard) GetCnvsDiscussed() string {
	if m != nil {
		return m.CnvsDiscussed
	}
	return ""
}

func (m *Tumourboard) GetCnvsDiscussedTier() int32 {
	if m != nil {
		return m.CnvsDiscussedTier
	}
	return 0
}

func (m *Tumourboard) GetStructuralVariantDiscussed() string {
	if m != nil {
		return m.StructuralVariantDiscussed
	}
	return ""
}

func (m *Tumourboard) GetStructuralVariantDiscussedTier() int32 {
	if m != nil {
		return m.StructuralVariantDiscussedTier
	}
	return 0
}

func (m *Tumourboard) GetClassificationOfVariants() string {
	if m != nil {
		return m.ClassificationOfVariants
	}
	return ""
}

func (m *Tumourboard) GetClassificationOfVariantsTier() int32 {
	if m != nil {
		return m.ClassificationOfVariantsTier
	}
	return 0
}

func (m *Tumourboard) GetClinicalValidationProgress() string {
	if m != nil {
		return m.ClinicalValidationProgress
	}
	return ""
}

func (m *Tumourboard) GetClinicalValidationProgressTier() int32 {
	if m != nil {
		return m.ClinicalValidationProgressTier
	}
	return 0
}

func (m *Tumourboard) GetTypeOfValidation() string {
	if m != nil {
		return m.TypeOfValidation
	}
	return ""
}

func (m *Tumourboard) GetTypeOfValidationTier() int32 {
	if m != nil {
		return m.TypeOfValidationTier
	}
	return 0
}

func (m *Tumourboard) GetAgentOrDrugClass() string {
	if m != nil {
		return m.AgentOrDrugClass
	}
	return ""
}

func (m *Tumourboard) GetAgentOrDrugClassTier() int32 {
	if m != nil {
		return m.AgentOrDrugClassTier
	}
	return 0
}

func (m *Tumourboard) GetLevelOfEvidenceForExpressionTargetAgentMatch() string {
	if m != nil {
		return m.LevelOfEvidenceForExpressionTargetAgentMatch
	}
	return ""
}

func (m *Tumourboard) GetLevelOfEvidenceForExpressionTargetAgentMatchTier() int32 {
	if m != nil {
		return m.LevelOfEvidenceForExpressionTargetAgentMatchTier
	}
	return 0
}

func (m *Tumourboard) GetDidTreatmentPlanChangeBasedOnProfilingResult() string {
	if m != nil {
		return m.DidTreatmentPlanChangeBasedOnProfilingResult
	}
	return ""
}

func (m *Tumourboard) GetDidTreatmentPlanChangeBasedOnProfilingResultTier() int32 {
	if m != nil {
		return m.DidTreatmentPlanChangeBasedOnProfilingResultTier
	}
	return 0
}

func (m *Tumourboard) GetHowTreatmentHasAlteredBasedOnProfiling() string {
	if m != nil {
		return m.HowTreatmentHasAlteredBasedOnProfiling
	}
	return ""
}

func (m *Tumourboard) GetHowTreatmentHasAlteredBasedOnProfilingTier() int32 {
	if m != nil {
		return m.HowTreatmentHasAlteredBasedOnProfilingTier
	}
	return 0
}

func (m *Tumourboard) GetReasonTreatmentPlanDidNotChangeBasedOnProfiling() string {
	if m != nil {
		return m.ReasonTreatmentPlanDidNotChangeBasedOnProfiling
	}
	return ""
}

func (m *Tumourboard) GetReasonTreatmentPlanDidNotChangeBasedOnProfilingTier() int32 {
	if m != nil {
		return m.ReasonTreatmentPlanDidNotChangeBasedOnProfilingTier
	}
	return 0
}

func (m *Tumourboard) GetDetailsOfTreatmentPlanImpact() string {
	if m != nil {
		return m.DetailsOfTreatmentPlanImpact
	}
	return ""
}

func (m *Tumourboard) GetDetailsOfTreatmentPlanImpactTier() int32 {
	if m != nil {
		return m.DetailsOfTreatmentPlanImpactTier
	}
	return 0
}

func (m *Tumourboard) GetPatientOrFamilyInformedOfGermlineVariant() string {
	if m != nil {
		return m.PatientOrFamilyInformedOfGermlineVariant
	}
	return ""
}

func (m *Tumourboard) GetPatientOrFamilyInformedOfGermlineVariantTier() int32 {
	if m != nil {
		return m.PatientOrFamilyInformedOfGermlineVariantTier
	}
	return 0
}

func (m *Tumourboard) GetPatientHasBeenReferredToAHereditaryCancerProgramBasedOnThisMolecularProfiling() string {
	if m != nil {
		return m.PatientHasBeenReferredToAHereditaryCancerProgramBasedOnThisMolecularProfiling
	}
	return ""
}

func (m *Tumourboard) GetPatientHasBeenReferredToAHereditaryCancerProgramBasedOnThisMolecularProfilingTier() int32 {
	if m != nil {
		return m.PatientHasBeenReferredToAHereditaryCancerProgramBasedOnThisMolecularProfilingTier
	}
	return 0
}

func (m *Tumourboard) GetSummaryReport() string {
	if m != nil {
		return m.SummaryReport
	}
	return ""
}

func (m *Tumourboard) GetSummaryReportTier() int32 {
	if m != nil {
		return m.SummaryReportTier
	}
	return 0
}

type Chemotherapy struct {
	// This is unique in the context of the server instance.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The ID of the dataset this object belongs to.
	DatasetId string `protobuf:"bytes,2,opt,name=dataset_id,json=datasetId,proto3" json:"dataset_id,omitempty"`
	// This is a label or symbolic identifier for this object.
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// This attribute contains human readable text.
	Description string `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	// The :ref:`ISO 8601<metadata_date_time>` time at which this record was created.
	Created string `protobuf:"bytes,5,opt,name=created,proto3" json:"created,omitempty"`
	// The :ref:`ISO 8601<metadata_date_time>` time at which this record was updated.
	Updated string `protobuf:"bytes,6,opt,name=updated,proto3" json:"updated,omitempty"`
	// A map of additional information.
	Attributes *Attributes `protobuf:"bytes,7,opt,name=attributes,proto3" json:"attributes,omitempty"`
	//
	PatientId                      string   `protobuf:"bytes,8,opt,name=patientId,proto3" json:"patientId,omitempty"`
	PatientIdTier                  int32    `protobuf:"varint,9,opt,name=patientIdTier,proto3" json:"patientIdTier,omitempty"`
	CourseNumber                   string   `protobuf:"bytes,10,opt,name=courseNumber,proto3" json:"courseNumber,omitempty"`
	CourseNumberTier               int32    `protobuf:"varint,11,opt,name=courseNumberTier,proto3" json:"courseNumberTier,omitempty"`
	StartDate                      string   `protobuf:"bytes,12,opt,name=startDate,proto3" json:"startDate,omitempty"`
	StartDateTier                  int32    `protobuf:"varint,13,opt,name=startDateTier,proto3" json:"startDateTier,omitempty"`
	StopDate                       string   `protobuf:"bytes,14,opt,name=stopDate,proto3" json:"stopDate,omitempty"`
	StopDateTier                   int32    `protobuf:"varint,15,opt,name=stopDateTier,proto3" json:"stopDateTier,omitempty"`
	SystematicTherapyAgentName     string   `protobuf:"bytes,16,opt,name=systematicTherapyAgentName,proto3" json:"systematicTherapyAgentName,omitempty"`
	SystematicTherapyAgentNameTier int32    `protobuf:"varint,17,opt,name=systematicTherapyAgentNameTier,proto3" json:"systematicTherapyAgentNameTier,omitempty"`
	Route                          string   `protobuf:"bytes,18,opt,name=route,proto3" json:"route,omitempty"`
	RouteTier                      int32    `protobuf:"varint,19,opt,name=routeTier,proto3" json:"routeTier,omitempty"`
	Dose                           string   `protobuf:"bytes,20,opt,name=dose,proto3" json:"dose,omitempty"`
	DoseTier                       int32    `protobuf:"varint,21,opt,name=doseTier,proto3" json:"doseTier,omitempty"`
	DoseFrequency                  string   `protobuf:"bytes,22,opt,name=doseFrequency,proto3" json:"doseFrequency,omitempty"`
	DoseFrequencyTier              int32    `protobuf:"varint,23,opt,name=doseFrequencyTier,proto3" json:"doseFrequencyTier,omitempty"`
	DoseUnit                       string   `protobuf:"bytes,24,opt,name=doseUnit,proto3" json:"doseUnit,omitempty"`
	DoseUnitTier                   int32    `protobuf:"varint,25,opt,name=doseUnitTier,proto3" json:"doseUnitTier,omitempty"`
	DaysPerCycle                   string   `protobuf:"bytes,26,opt,name=daysPerCycle,proto3" json:"daysPerCycle,omitempty"`
	DaysPerCycleTier               int32    `protobuf:"varint,27,opt,name=daysPerCycleTier,proto3" json:"daysPerCycleTier,omitempty"`
	NumberOfCycle                  string   `protobuf:"bytes,28,opt,name=numberOfCycle,proto3" json:"numberOfCycle,omitempty"`
	NumberOfCycleTier              int32    `protobuf:"varint,29,opt,name=numberOfCycleTier,proto3" json:"numberOfCycleTier,omitempty"`
	TreatmentIntent                string   `protobuf:"bytes,30,opt,name=treatmentIntent,proto3" json:"treatmentIntent,omitempty"`
	TreatmentIntentTier            int32    `protobuf:"varint,31,opt,name=treatmentIntentTier,proto3" json:"treatmentIntentTier,omitempty"`
	TreatingCentreName             string   `protobuf:"bytes,32,opt,name=treatingCentreName,proto3" json:"treatingCentreName,omitempty"`
	TreatingCentreNameTier         int32    `protobuf:"varint,33,opt,name=treatingCentreNameTier,proto3" json:"treatingCentreNameTier,omitempty"`
	Type                           string   `protobuf:"bytes,34,opt,name=type,proto3" json:"type,omitempty"`
	TypeTier                       int32    `protobuf:"varint,35,opt,name=typeTier,proto3" json:"typeTier,omitempty"`
	ProtocolCode                   string   `protobuf:"bytes,36,opt,name=protocolCode,proto3" json:"protocolCode,omitempty"`
	ProtocolCodeTier               int32    `protobuf:"varint,37,opt,name=protocolCodeTier,proto3" json:"protocolCodeTier,omitempty"`
	RecordingDate                  string   `protobuf:"bytes,38,opt,name=recordingDate,proto3" json:"recordingDate,omitempty"`
	RecordingDateTier              int32    `protobuf:"varint,39,opt,name=recordingDateTier,proto3" json:"recordingDateTier,omitempty"`
	TreatmentPlanId                string   `protobuf:"bytes,40,opt,name=treatmentPlanId,proto3" json:"treatmentPlanId,omitempty"`
	TreatmentPlanIdTier            int32    `protobuf:"varint,41,opt,name=treatmentPlanIdTier,proto3" json:"treatmentPlanIdTier,omitempty"`
	XXX_NoUnkeyedLiteral           struct{} `json:"-"`
	XXX_unrecognized               []byte   `json:"-"`
	XXX_sizecache                  int32    `json:"-"`
}

func (m *Chemotherapy) Reset()         { *m = Chemotherapy{} }
func (m *Chemotherapy) String() string { return proto.CompactTextString(m) }
func (*Chemotherapy) ProtoMessage()    {}
func (*Chemotherapy) Descriptor() ([]byte, []int) {
	return fileDescriptor_eca1b93ccfe37bb1, []int{9}
}

func (m *Chemotherapy) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Chemotherapy.Unmarshal(m, b)
}
func (m *Chemotherapy) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Chemotherapy.Marshal(b, m, deterministic)
}
func (m *Chemotherapy) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Chemotherapy.Merge(m, src)
}
func (m *Chemotherapy) XXX_Size() int {
	return xxx_messageInfo_Chemotherapy.Size(m)
}
func (m *Chemotherapy) XXX_DiscardUnknown() {
	xxx_messageInfo_Chemotherapy.DiscardUnknown(m)
}

var xxx_messageInfo_Chemotherapy proto.InternalMessageInfo

func (m *Chemotherapy) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Chemotherapy) GetDatasetId() string {
	if m != nil {
		return m.DatasetId
	}
	return ""
}

func (m *Chemotherapy) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Chemotherapy) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Chemotherapy) GetCreated() string {
	if m != nil {
		return m.Created
	}
	return ""
}

func (m *Chemotherapy) GetUpdated() string {
	if m != nil {
		return m.Updated
	}
	return ""
}

func (m *Chemotherapy) GetAttributes() *Attributes {
	if m != nil {
		return m.Attributes
	}
	return nil
}

func (m *Chemotherapy) GetPatientId() string {
	if m != nil {
		return m.PatientId
	}
	return ""
}

func (m *Chemotherapy) GetPatientIdTier() int32 {
	if m != nil {
		return m.PatientIdTier
	}
	return 0
}

func (m *Chemotherapy) GetCourseNumber() string {
	if m != nil {
		return m.CourseNumber
	}
	return ""
}

func (m *Chemotherapy) GetCourseNumberTier() int32 {
	if m != nil {
		return m.CourseNumberTier
	}
	return 0
}

func (m *Chemotherapy) GetStartDate() string {
	if m != nil {
		return m.StartDate
	}
	return ""
}

func (m *Chemotherapy) GetStartDateTier() int32 {
	if m != nil {
		return m.StartDateTier
	}
	return 0
}

func (m *Chemotherapy) GetStopDate() string {
	if m != nil {
		return m.StopDate
	}
	return ""
}

func (m *Chemotherapy) GetStopDateTier() int32 {
	if m != nil {
		return m.StopDateTier
	}
	return 0
}

func (m *Chemotherapy) GetSystematicTherapyAgentName() string {
	if m != nil {
		return m.SystematicTherapyAgentName
	}
	return ""
}

func (m *Chemotherapy) GetSystematicTherapyAgentNameTier() int32 {
	if m != nil {
		return m.SystematicTherapyAgentNameTier
	}
	return 0
}

func (m *Chemotherapy) GetRoute() string {
	if m != nil {
		return m.Route
	}
	return ""
}

func (m *Chemotherapy) GetRouteTier() int32 {
	if m != nil {
		return m.RouteTier
	}
	return 0
}

func (m *Chemotherapy) GetDose() string {
	if m != nil {
		return m.Dose
	}
	return ""
}

func (m *Chemotherapy) GetDoseTier() int32 {
	if m != nil {
		return m.DoseTier
	}
	return 0
}

func (m *Chemotherapy) GetDoseFrequency() string {
	if m != nil {
		return m.DoseFrequency
	}
	return ""
}

func (m *Chemotherapy) GetDoseFrequencyTier() int32 {
	if m != nil {
		return m.DoseFrequencyTier
	}
	return 0
}

func (m *Chemotherapy) GetDoseUnit() string {
	if m != nil {
		return m.DoseUnit
	}
	return ""
}

func (m *Chemotherapy) GetDoseUnitTier() int32 {
	if m != nil {
		return m.DoseUnitTier
	}
	return 0
}

func (m *Chemotherapy) GetDaysPerCycle() string {
	if m != nil {
		return m.DaysPerCycle
	}
	return ""
}

func (m *Chemotherapy) GetDaysPerCycleTier() int32 {
	if m != nil {
		return m.DaysPerCycleTier
	}
	return 0
}

func (m *Chemotherapy) GetNumberOfCycle() string {
	if m != nil {
		return m.NumberOfCycle
	}
	return ""
}

func (m *Chemotherapy) GetNumberOfCycleTier() int32 {
	if m != nil {
		return m.NumberOfCycleTier
	}
	return 0
}

func (m *Chemotherapy) GetTreatmentIntent() string {
	if m != nil {
		return m.TreatmentIntent
	}
	return ""
}

func (m *Chemotherapy) GetTreatmentIntentTier() int32 {
	if m != nil {
		return m.TreatmentIntentTier
	}
	return 0
}

func (m *Chemotherapy) GetTreatingCentreName() string {
	if m != nil {
		return m.TreatingCentreName
	}
	return ""
}

func (m *Chemotherapy) GetTreatingCentreNameTier() int32 {
	if m != nil {
		return m.TreatingCentreNameTier
	}
	return 0
}

func (m *Chemotherapy) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *Chemotherapy) GetTypeTier() int32 {
	if m != nil {
		return m.TypeTier
	}
	return 0
}

func (m *Chemotherapy) GetProtocolCode() string {
	if m != nil {
		return m.ProtocolCode
	}
	return ""
}

func (m *Chemotherapy) GetProtocolCodeTier() int32 {
	if m != nil {
		return m.ProtocolCodeTier
	}
	return 0
}

func (m *Chemotherapy) GetRecordingDate() string {
	if m != nil {
		return m.RecordingDate
	}
	return ""
}

func (m *Chemotherapy) GetRecordingDateTier() int32 {
	if m != nil {
		return m.RecordingDateTier
	}
	return 0
}

func (m *Chemotherapy) GetTreatmentPlanId() string {
	if m != nil {
		return m.TreatmentPlanId
	}
	return ""
}

func (m *Chemotherapy) GetTreatmentPlanIdTier() int32 {
	if m != nil {
		return m.TreatmentPlanIdTier
	}
	return 0
}

type Radiotherapy struct {
	// This is unique in the context of the server instance.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The ID of the dataset this object belongs to.
	DatasetId string `protobuf:"bytes,2,opt,name=dataset_id,json=datasetId,proto3" json:"dataset_id,omitempty"`
	// This is a label or symbolic identifier for this object.
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// This attribute contains human readable text.
	Description string `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	// The :ref:`ISO 8601<metadata_date_time>` time at which this record was created.
	Created string `protobuf:"bytes,5,opt,name=created,proto3" json:"created,omitempty"`
	// The :ref:`ISO 8601<metadata_date_time>` time at which this record was updated.
	Updated string `protobuf:"bytes,6,opt,name=updated,proto3" json:"updated,omitempty"`
	// A map of additional information.
	Attributes *Attributes `protobuf:"bytes,7,opt,name=attributes,proto3" json:"attributes,omitempty"`
	//
	PatientId               string   `protobuf:"bytes,8,opt,name=patientId,proto3" json:"patientId,omitempty"`
	PatientIdTier           int32    `protobuf:"varint,9,opt,name=patientIdTier,proto3" json:"patientIdTier,omitempty"`
	CourseNumber            string   `protobuf:"bytes,10,opt,name=courseNumber,proto3" json:"courseNumber,omitempty"`
	CourseNumberTier        int32    `protobuf:"varint,11,opt,name=courseNumberTier,proto3" json:"courseNumberTier,omitempty"`
	StartDate               string   `protobuf:"bytes,12,opt,name=startDate,proto3" json:"startDate,omitempty"`
	StartDateTier           int32    `protobuf:"varint,13,opt,name=startDateTier,proto3" json:"startDateTier,omitempty"`
	StopDate                string   `protobuf:"bytes,14,opt,name=stopDate,proto3" json:"stopDate,omitempty"`
	StopDateTier            int32    `protobuf:"varint,15,opt,name=stopDateTier,proto3" json:"stopDateTier,omitempty"`
	TherapeuticModality     string   `protobuf:"bytes,16,opt,name=therapeuticModality,proto3" json:"therapeuticModality,omitempty"`
	TherapeuticModalityTier int32    `protobuf:"varint,17,opt,name=therapeuticModalityTier,proto3" json:"therapeuticModalityTier,omitempty"`
	Baseline                string   `protobuf:"bytes,18,opt,name=baseline,proto3" json:"baseline,omitempty"`
	BaselineTier            int32    `protobuf:"varint,19,opt,name=baselineTier,proto3" json:"baselineTier,omitempty"`
	TestResult              string   `protobuf:"bytes,20,opt,name=testResult,proto3" json:"testResult,omitempty"`
	TestResultTier          int32    `protobuf:"varint,21,opt,name=testResultTier,proto3" json:"testResultTier,omitempty"`
	TestResultStd           string   `protobuf:"bytes,22,opt,name=testResultStd,proto3" json:"testResultStd,omitempty"`
	TestResultStdTier       int32    `protobuf:"varint,23,opt,name=testResultStdTier,proto3" json:"testResultStdTier,omitempty"`
	TreatingCentreName      string   `protobuf:"bytes,24,opt,name=treatingCentreName,proto3" json:"treatingCentreName,omitempty"`
	TreatingCentreNameTier  int32    `protobuf:"varint,25,opt,name=treatingCentreNameTier,proto3" json:"treatingCentreNameTier,omitempty"`
	StartIntervalRad        string   `protobuf:"bytes,26,opt,name=startIntervalRad,proto3" json:"startIntervalRad,omitempty"`
	StartIntervalRadTier    int32    `protobuf:"varint,27,opt,name=startIntervalRadTier,proto3" json:"startIntervalRadTier,omitempty"`
	StartIntervalRadRaw     string   `protobuf:"bytes,28,opt,name=startIntervalRadRaw,proto3" json:"startIntervalRadRaw,omitempty"`
	StartIntervalRadRawTier int32    `protobuf:"varint,29,opt,name=startIntervalRadRawTier,proto3" json:"startIntervalRadRawTier,omitempty"`
	RecordingDate           string   `protobuf:"bytes,30,opt,name=recordingDate,proto3" json:"recordingDate,omitempty"`
	RecordingDateTier       int32    `protobuf:"varint,31,opt,name=recordingDateTier,proto3" json:"recordingDateTier,omitempty"`
	AdjacentFields          string   `protobuf:"bytes,32,opt,name=adjacentFields,proto3" json:"adjacentFields,omitempty"`
	AdjacentFieldsTier      int32    `protobuf:"varint,33,opt,name=adjacentFieldsTier,proto3" json:"adjacentFieldsTier,omitempty"`
	AdjacentFractions       string   `protobuf:"bytes,34,opt,name=adjacentFractions,proto3" json:"adjacentFractions,omitempty"`
	AdjacentFractionsTier   int32    `protobuf:"varint,35,opt,name=adjacentFractionsTier,proto3" json:"adjacentFractionsTier,omitempty"`
	Complete                string   `protobuf:"bytes,36,opt,name=complete,proto3" json:"complete,omitempty"`
	CompleteTier            int32    `protobuf:"varint,37,opt,name=completeTier,proto3" json:"completeTier,omitempty"`
	BrachytherapyDose       string   `protobuf:"bytes,38,opt,name=brachytherapyDose,proto3" json:"brachytherapyDose,omitempty"`
	BrachytherapyDoseTier   int32    `protobuf:"varint,39,opt,name=brachytherapyDoseTier,proto3" json:"brachytherapyDoseTier,omitempty"`
	RadiotherapyDose        string   `protobuf:"bytes,40,opt,name=radiotherapyDose,proto3" json:"radiotherapyDose,omitempty"`
	RadiotherapyDoseTier    int32    `protobuf:"varint,41,opt,name=radiotherapyDoseTier,proto3" json:"radiotherapyDoseTier,omitempty"`
	SiteNumber              string   `protobuf:"bytes,42,opt,name=siteNumber,proto3" json:"siteNumber,omitempty"`
	SiteNumberTier          int32    `protobuf:"varint,43,opt,name=siteNumberTier,proto3" json:"siteNumberTier,omitempty"`
	Technique               string   `protobuf:"bytes,44,opt,name=technique,proto3" json:"technique,omitempty"`
	TechniqueTier           int32    `protobuf:"varint,45,opt,name=techniqueTier,proto3" json:"techniqueTier,omitempty"`
	TreatedRegion           string   `protobuf:"bytes,46,opt,name=treatedRegion,proto3" json:"treatedRegion,omitempty"`
	TreatedRegionTier       int32    `protobuf:"varint,47,opt,name=treatedRegionTier,proto3" json:"treatedRegionTier,omitempty"`
	TreatmentPlanId         string   `protobuf:"bytes,48,opt,name=treatmentPlanId,proto3" json:"treatmentPlanId,omitempty"`
	TreatmentPlanIdTier     int32    `protobuf:"varint,49,opt,name=treatmentPlanIdTier,proto3" json:"treatmentPlanIdTier,omitempty"`
	RadiationType           string   `protobuf:"bytes,50,opt,name=radiationType,proto3" json:"radiationType,omitempty"`
	RadiationTypeTier       int32    `protobuf:"varint,51,opt,name=radiationTypeTier,proto3" json:"radiationTypeTier,omitempty"`
	RadiationSite           string   `protobuf:"bytes,52,opt,name=radiationSite,proto3" json:"radiationSite,omitempty"`
	RadiationSiteTier       int32    `protobuf:"varint,53,opt,name=radiationSiteTier,proto3" json:"radiationSiteTier,omitempty"`
	TotalDose               string   `protobuf:"bytes,54,opt,name=totalDose,proto3" json:"totalDose,omitempty"`
	TotalDoseTier           int32    `protobuf:"varint,55,opt,name=totalDoseTier,proto3" json:"totalDoseTier,omitempty"`
	BoostSite               string   `protobuf:"bytes,56,opt,name=boostSite,proto3" json:"boostSite,omitempty"`
	BoostSiteTier           int32    `protobuf:"varint,57,opt,name=boostSiteTier,proto3" json:"boostSiteTier,omitempty"`
	BoostDose               string   `protobuf:"bytes,58,opt,name=boostDose,proto3" json:"boostDose,omitempty"`
	BoostDoseTier           int32    `protobuf:"varint,59,opt,name=boostDoseTier,proto3" json:"boostDoseTier,omitempty"`
	XXX_NoUnkeyedLiteral    struct{} `json:"-"`
	XXX_unrecognized        []byte   `json:"-"`
	XXX_sizecache           int32    `json:"-"`
}

func (m *Radiotherapy) Reset()         { *m = Radiotherapy{} }
func (m *Radiotherapy) String() string { return proto.CompactTextString(m) }
func (*Radiotherapy) ProtoMessage()    {}
func (*Radiotherapy) Descriptor() ([]byte, []int) {
	return fileDescriptor_eca1b93ccfe37bb1, []int{10}
}

func (m *Radiotherapy) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Radiotherapy.Unmarshal(m, b)
}
func (m *Radiotherapy) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Radiotherapy.Marshal(b, m, deterministic)
}
func (m *Radiotherapy) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Radiotherapy.Merge(m, src)
}
func (m *Radiotherapy) XXX_Size() int {
	return xxx_messageInfo_Radiotherapy.Size(m)
}
func (m *Radiotherapy) XXX_DiscardUnknown() {
	xxx_messageInfo_Radiotherapy.DiscardUnknown(m)
}

var xxx_messageInfo_Radiotherapy proto.InternalMessageInfo

func (m *Radiotherapy) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Radiotherapy) GetDatasetId() string {
	if m != nil {
		return m.DatasetId
	}
	return ""
}

func (m *Radiotherapy) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Radiotherapy) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Radiotherapy) GetCreated() string {
	if m != nil {
		return m.Created
	}
	return ""
}

func (m *Radiotherapy) GetUpdated() string {
	if m != nil {
		return m.Updated
	}
	return ""
}

func (m *Radiotherapy) GetAttributes() *Attributes {
	if m != nil {
		return m.Attributes
	}
	return nil
}

func (m *Radiotherapy) GetPatientId() string {
	if m != nil {
		return m.PatientId
	}
	return ""
}

func (m *Radiotherapy) GetPatientIdTier() int32 {
	if m != nil {
		return m.PatientIdTier
	}
	return 0
}

func (m *Radiotherapy) GetCourseNumber() string {
	if m != nil {
		return m.CourseNumber
	}
	return ""
}

func (m *Radiotherapy) GetCourseNumberTier() int32 {
	if m != nil {
		return m.CourseNumberTier
	}
	return 0
}

func (m *Radiotherapy) GetStartDate() string {
	if m != nil {
		return m.StartDate
	}
	return ""
}

func (m *Radiotherapy) GetStartDateTier() int32 {
	if m != nil {
		return m.StartDateTier
	}
	return 0
}

func (m *Radiotherapy) GetStopDate() string {
	if m != nil {
		return m.StopDate
	}
	return ""
}

func (m *Radiotherapy) GetStopDateTier() int32 {
	if m != nil {
		return m.StopDateTier
	}
	return 0
}

func (m *Radiotherapy) GetTherapeuticModality() string {
	if m != nil {
		return m.TherapeuticModality
	}
	return ""
}

func (m *Radiotherapy) GetTherapeuticModalityTier() int32 {
	if m != nil {
		return m.TherapeuticModalityTier
	}
	return 0
}

func (m *Radiotherapy) GetBaseline() string {
	if m != nil {
		return m.Baseline
	}
	return ""
}

func (m *Radiotherapy) GetBaselineTier() int32 {
	if m != nil {
		return m.BaselineTier
	}
	return 0
}

func (m *Radiotherapy) GetTestResult() string {
	if m != nil {
		return m.TestResult
	}
	return ""
}

func (m *Radiotherapy) GetTestResultTier() int32 {
	if m != nil {
		return m.TestResultTier
	}
	return 0
}

func (m *Radiotherapy) GetTestResultStd() string {
	if m != nil {
		return m.TestResultStd
	}
	return ""
}

func (m *Radiotherapy) GetTestResultStdTier() int32 {
	if m != nil {
		return m.TestResultStdTier
	}
	return 0
}

func (m *Radiotherapy) GetTreatingCentreName() string {
	if m != nil {
		return m.TreatingCentreName
	}
	return ""
}

func (m *Radiotherapy) GetTreatingCentreNameTier() int32 {
	if m != nil {
		return m.TreatingCentreNameTier
	}
	return 0
}

func (m *Radiotherapy) GetStartIntervalRad() string {
	if m != nil {
		return m.StartIntervalRad
	}
	return ""
}

func (m *Radiotherapy) GetStartIntervalRadTier() int32 {
	if m != nil {
		return m.StartIntervalRadTier
	}
	return 0
}

func (m *Radiotherapy) GetStartIntervalRadRaw() string {
	if m != nil {
		return m.StartIntervalRadRaw
	}
	return ""
}

func (m *Radiotherapy) GetStartIntervalRadRawTier() int32 {
	if m != nil {
		return m.StartIntervalRadRawTier
	}
	return 0
}

func (m *Radiotherapy) GetRecordingDate() string {
	if m != nil {
		return m.RecordingDate
	}
	return ""
}

func (m *Radiotherapy) GetRecordingDateTier() int32 {
	if m != nil {
		return m.RecordingDateTier
	}
	return 0
}

func (m *Radiotherapy) GetAdjacentFields() string {
	if m != nil {
		return m.AdjacentFields
	}
	return ""
}

func (m *Radiotherapy) GetAdjacentFieldsTier() int32 {
	if m != nil {
		return m.AdjacentFieldsTier
	}
	return 0
}

func (m *Radiotherapy) GetAdjacentFractions() string {
	if m != nil {
		return m.AdjacentFractions
	}
	return ""
}

func (m *Radiotherapy) GetAdjacentFractionsTier() int32 {
	if m != nil {
		return m.AdjacentFractionsTier
	}
	return 0
}

func (m *Radiotherapy) GetComplete() string {
	if m != nil {
		return m.Complete
	}
	return ""
}

func (m *Radiotherapy) GetCompleteTier() int32 {
	if m != nil {
		return m.CompleteTier
	}
	return 0
}

func (m *Radiotherapy) GetBrachytherapyDose() string {
	if m != nil {
		return m.BrachytherapyDose
	}
	return ""
}

func (m *Radiotherapy) GetBrachytherapyDoseTier() int32 {
	if m != nil {
		return m.BrachytherapyDoseTier
	}
	return 0
}

func (m *Radiotherapy) GetRadiotherapyDose() string {
	if m != nil {
		return m.RadiotherapyDose
	}
	return ""
}

func (m *Radiotherapy) GetRadiotherapyDoseTier() int32 {
	if m != nil {
		return m.RadiotherapyDoseTier
	}
	return 0
}

func (m *Radiotherapy) GetSiteNumber() string {
	if m != nil {
		return m.SiteNumber
	}
	return ""
}

func (m *Radiotherapy) GetSiteNumberTier() int32 {
	if m != nil {
		return m.SiteNumberTier
	}
	return 0
}

func (m *Radiotherapy) GetTechnique() string {
	if m != nil {
		return m.Technique
	}
	return ""
}

func (m *Radiotherapy) GetTechniqueTier() int32 {
	if m != nil {
		return m.TechniqueTier
	}
	return 0
}

func (m *Radiotherapy) GetTreatedRegion() string {
	if m != nil {
		return m.TreatedRegion
	}
	return ""
}

func (m *Radiotherapy) GetTreatedRegionTier() int32 {
	if m != nil {
		return m.TreatedRegionTier
	}
	return 0
}

func (m *Radiotherapy) GetTreatmentPlanId() string {
	if m != nil {
		return m.TreatmentPlanId
	}
	return ""
}

func (m *Radiotherapy) GetTreatmentPlanIdTier() int32 {
	if m != nil {
		return m.TreatmentPlanIdTier
	}
	return 0
}

func (m *Radiotherapy) GetRadiationType() string {
	if m != nil {
		return m.RadiationType
	}
	return ""
}

func (m *Radiotherapy) GetRadiationTypeTier() int32 {
	if m != nil {
		return m.RadiationTypeTier
	}
	return 0
}

func (m *Radiotherapy) GetRadiationSite() string {
	if m != nil {
		return m.RadiationSite
	}
	return ""
}

func (m *Radiotherapy) GetRadiationSiteTier() int32 {
	if m != nil {
		return m.RadiationSiteTier
	}
	return 0
}

func (m *Radiotherapy) GetTotalDose() string {
	if m != nil {
		return m.TotalDose
	}
	return ""
}

func (m *Radiotherapy) GetTotalDoseTier() int32 {
	if m != nil {
		return m.TotalDoseTier
	}
	return 0
}

func (m *Radiotherapy) GetBoostSite() string {
	if m != nil {
		return m.BoostSite
	}
	return ""
}

func (m *Radiotherapy) GetBoostSiteTier() int32 {
	if m != nil {
		return m.BoostSiteTier
	}
	return 0
}

func (m *Radiotherapy) GetBoostDose() string {
	if m != nil {
		return m.BoostDose
	}
	return ""
}

func (m *Radiotherapy) GetBoostDoseTier() int32 {
	if m != nil {
		return m.BoostDoseTier
	}
	return 0
}

type Immunotherapy struct {
	// This is unique in the context of the server instance.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The ID of the dataset this object belongs to.
	DatasetId string `protobuf:"bytes,2,opt,name=dataset_id,json=datasetId,proto3" json:"dataset_id,omitempty"`
	// This is a label or symbolic identifier for this object.
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// This attribute contains human readable text.
	Description string `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	// The :ref:`ISO 8601<metadata_date_time>` time at which this record was created.
	Created string `protobuf:"bytes,5,opt,name=created,proto3" json:"created,omitempty"`
	// The :ref:`ISO 8601<metadata_date_time>` time at which this record was updated.
	Updated string `protobuf:"bytes,6,opt,name=updated,proto3" json:"updated,omitempty"`
	// A map of additional information.
	Attributes *Attributes `protobuf:"bytes,7,opt,name=attributes,proto3" json:"attributes,omitempty"`
	//
	PatientId               string   `protobuf:"bytes,8,opt,name=patientId,proto3" json:"patientId,omitempty"`
	PatientIdTier           int32    `protobuf:"varint,9,opt,name=patientIdTier,proto3" json:"patientIdTier,omitempty"`
	StartDate               string   `protobuf:"bytes,10,opt,name=startDate,proto3" json:"startDate,omitempty"`
	StartDateTier           int32    `protobuf:"varint,11,opt,name=startDateTier,proto3" json:"startDateTier,omitempty"`
	ImmunotherapyType       string   `protobuf:"bytes,12,opt,name=immunotherapyType,proto3" json:"immunotherapyType,omitempty"`
	ImmunotherapyTypeTier   int32    `protobuf:"varint,13,opt,name=immunotherapyTypeTier,proto3" json:"immunotherapyTypeTier,omitempty"`
	ImmunotherapyTarget     string   `protobuf:"bytes,14,opt,name=immunotherapyTarget,proto3" json:"immunotherapyTarget,omitempty"`
	ImmunotherapyTargetTier int32    `protobuf:"varint,15,opt,name=immunotherapyTargetTier,proto3" json:"immunotherapyTargetTier,omitempty"`
	ImmunotherapyDetail     string   `protobuf:"bytes,16,opt,name=immunotherapyDetail,proto3" json:"immunotherapyDetail,omitempty"`
	ImmunotherapyDetailTier int32    `protobuf:"varint,17,opt,name=immunotherapyDetailTier,proto3" json:"immunotherapyDetailTier,omitempty"`
	TreatmentPlanId         string   `protobuf:"bytes,18,opt,name=treatmentPlanId,proto3" json:"treatmentPlanId,omitempty"`
	TreatmentPlanIdTier     int32    `protobuf:"varint,19,opt,name=treatmentPlanIdTier,proto3" json:"treatmentPlanIdTier,omitempty"`
	CourseNumber            string   `protobuf:"bytes,20,opt,name=courseNumber,proto3" json:"courseNumber,omitempty"`
	CourseNumberTier        int32    `protobuf:"varint,21,opt,name=courseNumberTier,proto3" json:"courseNumberTier,omitempty"`
	XXX_NoUnkeyedLiteral    struct{} `json:"-"`
	XXX_unrecognized        []byte   `json:"-"`
	XXX_sizecache           int32    `json:"-"`
}

func (m *Immunotherapy) Reset()         { *m = Immunotherapy{} }
func (m *Immunotherapy) String() string { return proto.CompactTextString(m) }
func (*Immunotherapy) ProtoMessage()    {}
func (*Immunotherapy) Descriptor() ([]byte, []int) {
	return fileDescriptor_eca1b93ccfe37bb1, []int{11}
}

func (m *Immunotherapy) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Immunotherapy.Unmarshal(m, b)
}
func (m *Immunotherapy) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Immunotherapy.Marshal(b, m, deterministic)
}
func (m *Immunotherapy) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Immunotherapy.Merge(m, src)
}
func (m *Immunotherapy) XXX_Size() int {
	return xxx_messageInfo_Immunotherapy.Size(m)
}
func (m *Immunotherapy) XXX_DiscardUnknown() {
	xxx_messageInfo_Immunotherapy.DiscardUnknown(m)
}

var xxx_messageInfo_Immunotherapy proto.InternalMessageInfo

func (m *Immunotherapy) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Immunotherapy) GetDatasetId() string {
	if m != nil {
		return m.DatasetId
	}
	return ""
}

func (m *Immunotherapy) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Immunotherapy) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Immunotherapy) GetCreated() string {
	if m != nil {
		return m.Created
	}
	return ""
}

func (m *Immunotherapy) GetUpdated() string {
	if m != nil {
		return m.Updated
	}
	return ""
}

func (m *Immunotherapy) GetAttributes() *Attributes {
	if m != nil {
		return m.Attributes
	}
	return nil
}

func (m *Immunotherapy) GetPatientId() string {
	if m != nil {
		return m.PatientId
	}
	return ""
}

func (m *Immunotherapy) GetPatientIdTier() int32 {
	if m != nil {
		return m.PatientIdTier
	}
	return 0
}

func (m *Immunotherapy) GetStartDate() string {
	if m != nil {
		return m.StartDate
	}
	return ""
}

func (m *Immunotherapy) GetStartDateTier() int32 {
	if m != nil {
		return m.StartDateTier
	}
	return 0
}

func (m *Immunotherapy) GetImmunotherapyType() string {
	if m != nil {
		return m.ImmunotherapyType
	}
	return ""
}

func (m *Immunotherapy) GetImmunotherapyTypeTier() int32 {
	if m != nil {
		return m.ImmunotherapyTypeTier
	}
	return 0
}

func (m *Immunotherapy) GetImmunotherapyTarget() string {
	if m != nil {
		return m.ImmunotherapyTarget
	}
	return ""
}

func (m *Immunotherapy) GetImmunotherapyTargetTier() int32 {
	if m != nil {
		return m.ImmunotherapyTargetTier
	}
	return 0
}

func (m *Immunotherapy) GetImmunotherapyDetail() string {
	if m != nil {
		return m.ImmunotherapyDetail
	}
	return ""
}

func (m *Immunotherapy) GetImmunotherapyDetailTier() int32 {
	if m != nil {
		return m.ImmunotherapyDetailTier
	}
	return 0
}

func (m *Immunotherapy) GetTreatmentPlanId() string {
	if m != nil {
		return m.TreatmentPlanId
	}
	return ""
}

func (m *Immunotherapy) GetTreatmentPlanIdTier() int32 {
	if m != nil {
		return m.TreatmentPlanIdTier
	}
	return 0
}

func (m *Immunotherapy) GetCourseNumber() string {
	if m != nil {
		return m.CourseNumber
	}
	return ""
}

func (m *Immunotherapy) GetCourseNumberTier() int32 {
	if m != nil {
		return m.CourseNumberTier
	}
	return 0
}

type Surgery struct {
	// This is unique in the context of the server instance.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The ID of the dataset this object belongs to.
	DatasetId string `protobuf:"bytes,2,opt,name=dataset_id,json=datasetId,proto3" json:"dataset_id,omitempty"`
	// This is a label or symbolic identifier for this object.
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// This attribute contains human readable text.
	Description string `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	// The :ref:`ISO 8601<metadata_date_time>` time at which this record was created.
	Created string `protobuf:"bytes,5,opt,name=created,proto3" json:"created,omitempty"`
	// The :ref:`ISO 8601<metadata_date_time>` time at which this record was updated.
	Updated string `protobuf:"bytes,6,opt,name=updated,proto3" json:"updated,omitempty"`
	// A map of additional information.
	Attributes *Attributes `protobuf:"bytes,7,opt,name=attributes,proto3" json:"attributes,omitempty"`
	//
	PatientId               string   `protobuf:"bytes,8,opt,name=patientId,proto3" json:"patientId,omitempty"`
	PatientIdTier           int32    `protobuf:"varint,9,opt,name=patientIdTier,proto3" json:"patientIdTier,omitempty"`
	StartDate               string   `protobuf:"bytes,10,opt,name=startDate,proto3" json:"startDate,omitempty"`
	StartDateTier           int32    `protobuf:"varint,11,opt,name=startDateTier,proto3" json:"startDateTier,omitempty"`
	StopDate                string   `protobuf:"bytes,12,opt,name=stopDate,proto3" json:"stopDate,omitempty"`
	StopDateTier            int32    `protobuf:"varint,13,opt,name=stopDateTier,proto3" json:"stopDateTier,omitempty"`
	SampleId                string   `protobuf:"bytes,14,opt,name=sampleId,proto3" json:"sampleId,omitempty"`
	SampleIdTier            int32    `protobuf:"varint,15,opt,name=sampleIdTier,proto3" json:"sampleIdTier,omitempty"`
	CollectionTimePoint     string   `protobuf:"bytes,16,opt,name=collectionTimePoint,proto3" json:"collectionTimePoint,omitempty"`
	CollectionTimePointTier int32    `protobuf:"varint,17,opt,name=collectionTimePointTier,proto3" json:"collectionTimePointTier,omitempty"`
	DiagnosisDate           string   `protobuf:"bytes,18,opt,name=diagnosisDate,proto3" json:"diagnosisDate,omitempty"`
	DiagnosisDateTier       int32    `protobuf:"varint,19,opt,name=diagnosisDateTier,proto3" json:"diagnosisDateTier,omitempty"`
	Site                    string   `protobuf:"bytes,20,opt,name=site,proto3" json:"site,omitempty"`
	SiteTier                int32    `protobuf:"varint,21,opt,name=siteTier,proto3" json:"siteTier,omitempty"`
	Type                    string   `protobuf:"bytes,22,opt,name=type,proto3" json:"type,omitempty"`
	TypeTier                int32    `protobuf:"varint,23,opt,name=typeTier,proto3" json:"typeTier,omitempty"`
	RecordingDate           string   `protobuf:"bytes,24,opt,name=recordingDate,proto3" json:"recordingDate,omitempty"`
	RecordingDateTier       int32    `protobuf:"varint,25,opt,name=recordingDateTier,proto3" json:"recordingDateTier,omitempty"`
	TreatmentPlanId         string   `protobuf:"bytes,26,opt,name=treatmentPlanId,proto3" json:"treatmentPlanId,omitempty"`
	TreatmentPlanIdTier     int32    `protobuf:"varint,27,opt,name=treatmentPlanIdTier,proto3" json:"treatmentPlanIdTier,omitempty"`
	CourseNumber            string   `protobuf:"bytes,28,opt,name=courseNumber,proto3" json:"courseNumber,omitempty"`
	CourseNumberTier        int32    `protobuf:"varint,29,opt,name=courseNumberTier,proto3" json:"courseNumberTier,omitempty"`
	XXX_NoUnkeyedLiteral    struct{} `json:"-"`
	XXX_unrecognized        []byte   `json:"-"`
	XXX_sizecache           int32    `json:"-"`
}

func (m *Surgery) Reset()         { *m = Surgery{} }
func (m *Surgery) String() string { return proto.CompactTextString(m) }
func (*Surgery) ProtoMessage()    {}
func (*Surgery) Descriptor() ([]byte, []int) {
	return fileDescriptor_eca1b93ccfe37bb1, []int{12}
}

func (m *Surgery) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Surgery.Unmarshal(m, b)
}
func (m *Surgery) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Surgery.Marshal(b, m, deterministic)
}
func (m *Surgery) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Surgery.Merge(m, src)
}
func (m *Surgery) XXX_Size() int {
	return xxx_messageInfo_Surgery.Size(m)
}
func (m *Surgery) XXX_DiscardUnknown() {
	xxx_messageInfo_Surgery.DiscardUnknown(m)
}

var xxx_messageInfo_Surgery proto.InternalMessageInfo

func (m *Surgery) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Surgery) GetDatasetId() string {
	if m != nil {
		return m.DatasetId
	}
	return ""
}

func (m *Surgery) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Surgery) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Surgery) GetCreated() string {
	if m != nil {
		return m.Created
	}
	return ""
}

func (m *Surgery) GetUpdated() string {
	if m != nil {
		return m.Updated
	}
	return ""
}

func (m *Surgery) GetAttributes() *Attributes {
	if m != nil {
		return m.Attributes
	}
	return nil
}

func (m *Surgery) GetPatientId() string {
	if m != nil {
		return m.PatientId
	}
	return ""
}

func (m *Surgery) GetPatientIdTier() int32 {
	if m != nil {
		return m.PatientIdTier
	}
	return 0
}

func (m *Surgery) GetStartDate() string {
	if m != nil {
		return m.StartDate
	}
	return ""
}

func (m *Surgery) GetStartDateTier() int32 {
	if m != nil {
		return m.StartDateTier
	}
	return 0
}

func (m *Surgery) GetStopDate() string {
	if m != nil {
		return m.StopDate
	}
	return ""
}

func (m *Surgery) GetStopDateTier() int32 {
	if m != nil {
		return m.StopDateTier
	}
	return 0
}

func (m *Surgery) GetSampleId() string {
	if m != nil {
		return m.SampleId
	}
	return ""
}

func (m *Surgery) GetSampleIdTier() int32 {
	if m != nil {
		return m.SampleIdTier
	}
	return 0
}

func (m *Surgery) GetCollectionTimePoint() string {
	if m != nil {
		return m.CollectionTimePoint
	}
	return ""
}

func (m *Surgery) GetCollectionTimePointTier() int32 {
	if m != nil {
		return m.CollectionTimePointTier
	}
	return 0
}

func (m *Surgery) GetDiagnosisDate() string {
	if m != nil {
		return m.DiagnosisDate
	}
	return ""
}

func (m *Surgery) GetDiagnosisDateTier() int32 {
	if m != nil {
		return m.DiagnosisDateTier
	}
	return 0
}

func (m *Surgery) GetSite() string {
	if m != nil {
		return m.Site
	}
	return ""
}

func (m *Surgery) GetSiteTier() int32 {
	if m != nil {
		return m.SiteTier
	}
	return 0
}

func (m *Surgery) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *Surgery) GetTypeTier() int32 {
	if m != nil {
		return m.TypeTier
	}
	return 0
}

func (m *Surgery) GetRecordingDate() string {
	if m != nil {
		return m.RecordingDate
	}
	return ""
}

func (m *Surgery) GetRecordingDateTier() int32 {
	if m != nil {
		return m.RecordingDateTier
	}
	return 0
}

func (m *Surgery) GetTreatmentPlanId() string {
	if m != nil {
		return m.TreatmentPlanId
	}
	return ""
}

func (m *Surgery) GetTreatmentPlanIdTier() int32 {
	if m != nil {
		return m.TreatmentPlanIdTier
	}
	return 0
}

func (m *Surgery) GetCourseNumber() string {
	if m != nil {
		return m.CourseNumber
	}
	return ""
}

func (m *Surgery) GetCourseNumberTier() int32 {
	if m != nil {
		return m.CourseNumberTier
	}
	return 0
}

type Celltransplant struct {
	// This is unique in the context of the server instance.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The ID of the dataset this object belongs to.
	DatasetId string `protobuf:"bytes,2,opt,name=dataset_id,json=datasetId,proto3" json:"dataset_id,omitempty"`
	// This is a label or symbolic identifier for this object.
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// This attribute contains human readable text.
	Description string `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	// The :ref:`ISO 8601<metadata_date_time>` time at which this record was created.
	Created string `protobuf:"bytes,5,opt,name=created,proto3" json:"created,omitempty"`
	// The :ref:`ISO 8601<metadata_date_time>` time at which this record was updated.
	Updated string `protobuf:"bytes,6,opt,name=updated,proto3" json:"updated,omitempty"`
	// A map of additional information.
	Attributes *Attributes `protobuf:"bytes,7,opt,name=attributes,proto3" json:"attributes,omitempty"`
	//
	PatientId            string   `protobuf:"bytes,8,opt,name=patientId,proto3" json:"patientId,omitempty"`
	PatientIdTier        int32    `protobuf:"varint,9,opt,name=patientIdTier,proto3" json:"patientIdTier,omitempty"`
	StartDate            string   `protobuf:"bytes,10,opt,name=startDate,proto3" json:"startDate,omitempty"`
	StartDateTier        int32    `protobuf:"varint,11,opt,name=startDateTier,proto3" json:"startDateTier,omitempty"`
	CellSource           string   `protobuf:"bytes,12,opt,name=cellSource,proto3" json:"cellSource,omitempty"`
	CellSourceTier       int32    `protobuf:"varint,13,opt,name=cellSourceTier,proto3" json:"cellSourceTier,omitempty"`
	DonorType            string   `protobuf:"bytes,14,opt,name=donorType,proto3" json:"donorType,omitempty"`
	DonorTypeTier        int32    `protobuf:"varint,15,opt,name=donorTypeTier,proto3" json:"donorTypeTier,omitempty"`
	TreatmentPlanId      string   `protobuf:"bytes,16,opt,name=treatmentPlanId,proto3" json:"treatmentPlanId,omitempty"`
	TreatmentPlanIdTier  int32    `protobuf:"varint,17,opt,name=treatmentPlanIdTier,proto3" json:"treatmentPlanIdTier,omitempty"`
	CourseNumber         string   `protobuf:"bytes,18,opt,name=courseNumber,proto3" json:"courseNumber,omitempty"`
	CourseNumberTier     int32    `protobuf:"varint,19,opt,name=courseNumberTier,proto3" json:"courseNumberTier,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Celltransplant) Reset()         { *m = Celltransplant{} }
func (m *Celltransplant) String() string { return proto.CompactTextString(m) }
func (*Celltransplant) ProtoMessage()    {}
func (*Celltransplant) Descriptor() ([]byte, []int) {
	return fileDescriptor_eca1b93ccfe37bb1, []int{13}
}

func (m *Celltransplant) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Celltransplant.Unmarshal(m, b)
}
func (m *Celltransplant) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Celltransplant.Marshal(b, m, deterministic)
}
func (m *Celltransplant) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Celltransplant.Merge(m, src)
}
func (m *Celltransplant) XXX_Size() int {
	return xxx_messageInfo_Celltransplant.Size(m)
}
func (m *Celltransplant) XXX_DiscardUnknown() {
	xxx_messageInfo_Celltransplant.DiscardUnknown(m)
}

var xxx_messageInfo_Celltransplant proto.InternalMessageInfo

func (m *Celltransplant) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Celltransplant) GetDatasetId() string {
	if m != nil {
		return m.DatasetId
	}
	return ""
}

func (m *Celltransplant) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Celltransplant) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Celltransplant) GetCreated() string {
	if m != nil {
		return m.Created
	}
	return ""
}

func (m *Celltransplant) GetUpdated() string {
	if m != nil {
		return m.Updated
	}
	return ""
}

func (m *Celltransplant) GetAttributes() *Attributes {
	if m != nil {
		return m.Attributes
	}
	return nil
}

func (m *Celltransplant) GetPatientId() string {
	if m != nil {
		return m.PatientId
	}
	return ""
}

func (m *Celltransplant) GetPatientIdTier() int32 {
	if m != nil {
		return m.PatientIdTier
	}
	return 0
}

func (m *Celltransplant) GetStartDate() string {
	if m != nil {
		return m.StartDate
	}
	return ""
}

func (m *Celltransplant) GetStartDateTier() int32 {
	if m != nil {
		return m.StartDateTier
	}
	return 0
}

func (m *Celltransplant) GetCellSource() string {
	if m != nil {
		return m.CellSource
	}
	return ""
}

func (m *Celltransplant) GetCellSourceTier() int32 {
	if m != nil {
		return m.CellSourceTier
	}
	return 0
}

func (m *Celltransplant) GetDonorType() string {
	if m != nil {
		return m.DonorType
	}
	return ""
}

func (m *Celltransplant) GetDonorTypeTier() int32 {
	if m != nil {
		return m.DonorTypeTier
	}
	return 0
}

func (m *Celltransplant) GetTreatmentPlanId() string {
	if m != nil {
		return m.TreatmentPlanId
	}
	return ""
}

func (m *Celltransplant) GetTreatmentPlanIdTier() int32 {
	if m != nil {
		return m.TreatmentPlanIdTier
	}
	return 0
}

func (m *Celltransplant) GetCourseNumber() string {
	if m != nil {
		return m.CourseNumber
	}
	return ""
}

func (m *Celltransplant) GetCourseNumberTier() int32 {
	if m != nil {
		return m.CourseNumberTier
	}
	return 0
}

type Slide struct {
	// This is unique in the context of the server instance.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The ID of the dataset this object belongs to.
	DatasetId string `protobuf:"bytes,2,opt,name=dataset_id,json=datasetId,proto3" json:"dataset_id,omitempty"`
	// This is a label or symbolic identifier for this object.
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// This attribute contains human readable text.
	Description string `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	// The :ref:`ISO 8601<metadata_date_time>` time at which this record was created.
	Created string `protobuf:"bytes,5,opt,name=created,proto3" json:"created,omitempty"`
	// The :ref:`ISO 8601<metadata_date_time>` time at which this record was updated.
	Updated string `protobuf:"bytes,6,opt,name=updated,proto3" json:"updated,omitempty"`
	// A map of additional information.
	Attributes *Attributes `protobuf:"bytes,7,opt,name=attributes,proto3" json:"attributes,omitempty"`
	//
	PatientId                           string   `protobuf:"bytes,8,opt,name=patientId,proto3" json:"patientId,omitempty"`
	PatientIdTier                       int32    `protobuf:"varint,9,opt,name=patientIdTier,proto3" json:"patientIdTier,omitempty"`
	SampleId                            string   `protobuf:"bytes,10,opt,name=sampleId,proto3" json:"sampleId,omitempty"`
	SampleIdTier                        int32    `protobuf:"varint,11,opt,name=sampleIdTier,proto3" json:"sampleIdTier,omitempty"`
	SlideId                             string   `protobuf:"bytes,12,opt,name=slideId,proto3" json:"slideId,omitempty"`
	SlideIdTier                         int32    `protobuf:"varint,13,opt,name=slideIdTier,proto3" json:"slideIdTier,omitempty"`
	SlideOtherId                        string   `protobuf:"bytes,14,opt,name=slideOtherId,proto3" json:"slideOtherId,omitempty"`
	SlideOtherIdTier                    int32    `protobuf:"varint,15,opt,name=slideOtherIdTier,proto3" json:"slideOtherIdTier,omitempty"`
	LymphocyteInfiltrationPercent       string   `protobuf:"bytes,16,opt,name=lymphocyteInfiltrationPercent,proto3" json:"lymphocyteInfiltrationPercent,omitempty"`
	LymphocyteInfiltrationPercentTier   int32    `protobuf:"varint,17,opt,name=lymphocyteInfiltrationPercentTier,proto3" json:"lymphocyteInfiltrationPercentTier,omitempty"`
	TumorNucleiPercent                  string   `protobuf:"bytes,18,opt,name=tumorNucleiPercent,proto3" json:"tumorNucleiPercent,omitempty"`
	TumorNucleiPercentTier              int32    `protobuf:"varint,19,opt,name=tumorNucleiPercentTier,proto3" json:"tumorNucleiPercentTier,omitempty"`
	MonocyteInfiltrationPercent         string   `protobuf:"bytes,20,opt,name=monocyteInfiltrationPercent,proto3" json:"monocyteInfiltrationPercent,omitempty"`
	MonocyteInfiltrationPercentTier     int32    `protobuf:"varint,21,opt,name=monocyteInfiltrationPercentTier,proto3" json:"monocyteInfiltrationPercentTier,omitempty"`
	NormalCellsPercent                  string   `protobuf:"bytes,22,opt,name=normalCellsPercent,proto3" json:"normalCellsPercent,omitempty"`
	NormalCellsPercentTier              int32    `protobuf:"varint,23,opt,name=normalCellsPercentTier,proto3" json:"normalCellsPercentTier,omitempty"`
	TumorCellsPercent                   string   `protobuf:"bytes,24,opt,name=tumorCellsPercent,proto3" json:"tumorCellsPercent,omitempty"`
	TumorCellsPercentTier               int32    `protobuf:"varint,25,opt,name=tumorCellsPercentTier,proto3" json:"tumorCellsPercentTier,omitempty"`
	StromalCellsPercent                 string   `protobuf:"bytes,26,opt,name=stromalCellsPercent,proto3" json:"stromalCellsPercent,omitempty"`
	StromalCellsPercentTier             int32    `protobuf:"varint,27,opt,name=stromalCellsPercentTier,proto3" json:"stromalCellsPercentTier,omitempty"`
	EosinophilInfiltrationPercent       string   `protobuf:"bytes,28,opt,name=eosinophilInfiltrationPercent,proto3" json:"eosinophilInfiltrationPercent,omitempty"`
	EosinophilInfiltrationPercentTier   int32    `protobuf:"varint,29,opt,name=eosinophilInfiltrationPercentTier,proto3" json:"eosinophilInfiltrationPercentTier,omitempty"`
	NeutrophilInfiltrationPercent       string   `protobuf:"bytes,30,opt,name=neutrophilInfiltrationPercent,proto3" json:"neutrophilInfiltrationPercent,omitempty"`
	NeutrophilInfiltrationPercentTier   int32    `protobuf:"varint,31,opt,name=neutrophilInfiltrationPercentTier,proto3" json:"neutrophilInfiltrationPercentTier,omitempty"`
	GranulocyteInfiltrationPercent      string   `protobuf:"bytes,32,opt,name=granulocyteInfiltrationPercent,proto3" json:"granulocyteInfiltrationPercent,omitempty"`
	GranulocyteInfiltrationPercentTier  int32    `protobuf:"varint,33,opt,name=granulocyteInfiltrationPercentTier,proto3" json:"granulocyteInfiltrationPercentTier,omitempty"`
	NecrosisPercent                     string   `protobuf:"bytes,34,opt,name=necrosisPercent,proto3" json:"necrosisPercent,omitempty"`
	NecrosisPercentTier                 int32    `protobuf:"varint,35,opt,name=necrosisPercentTier,proto3" json:"necrosisPercentTier,omitempty"`
	InflammatoryInfiltrationPercent     string   `protobuf:"bytes,36,opt,name=inflammatoryInfiltrationPercent,proto3" json:"inflammatoryInfiltrationPercent,omitempty"`
	InflammatoryInfiltrationPercentTier int32    `protobuf:"varint,37,opt,name=inflammatoryInfiltrationPercentTier,proto3" json:"inflammatoryInfiltrationPercentTier,omitempty"`
	ProliferatingCellsNumber            string   `protobuf:"bytes,38,opt,name=proliferatingCellsNumber,proto3" json:"proliferatingCellsNumber,omitempty"`
	ProliferatingCellsNumberTier        int32    `protobuf:"varint,39,opt,name=proliferatingCellsNumberTier,proto3" json:"proliferatingCellsNumberTier,omitempty"`
	SectionLocation                     string   `protobuf:"bytes,40,opt,name=sectionLocation,proto3" json:"sectionLocation,omitempty"`
	SectionLocationTier                 int32    `protobuf:"varint,41,opt,name=sectionLocationTier,proto3" json:"sectionLocationTier,omitempty"`
	XXX_NoUnkeyedLiteral                struct{} `json:"-"`
	XXX_unrecognized                    []byte   `json:"-"`
	XXX_sizecache                       int32    `json:"-"`
}

func (m *Slide) Reset()         { *m = Slide{} }
func (m *Slide) String() string { return proto.CompactTextString(m) }
func (*Slide) ProtoMessage()    {}
func (*Slide) Descriptor() ([]byte, []int) {
	return fileDescriptor_eca1b93ccfe37bb1, []int{14}
}

func (m *Slide) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Slide.Unmarshal(m, b)
}
func (m *Slide) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Slide.Marshal(b, m, deterministic)
}
func (m *Slide) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Slide.Merge(m, src)
}
func (m *Slide) XXX_Size() int {
	return xxx_messageInfo_Slide.Size(m)
}
func (m *Slide) XXX_DiscardUnknown() {
	xxx_messageInfo_Slide.DiscardUnknown(m)
}

var xxx_messageInfo_Slide proto.InternalMessageInfo

func (m *Slide) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Slide) GetDatasetId() string {
	if m != nil {
		return m.DatasetId
	}
	return ""
}

func (m *Slide) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Slide) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Slide) GetCreated() string {
	if m != nil {
		return m.Created
	}
	return ""
}

func (m *Slide) GetUpdated() string {
	if m != nil {
		return m.Updated
	}
	return ""
}

func (m *Slide) GetAttributes() *Attributes {
	if m != nil {
		return m.Attributes
	}
	return nil
}

func (m *Slide) GetPatientId() string {
	if m != nil {
		return m.PatientId
	}
	return ""
}

func (m *Slide) GetPatientIdTier() int32 {
	if m != nil {
		return m.PatientIdTier
	}
	return 0
}

func (m *Slide) GetSampleId() string {
	if m != nil {
		return m.SampleId
	}
	return ""
}

func (m *Slide) GetSampleIdTier() int32 {
	if m != nil {
		return m.SampleIdTier
	}
	return 0
}

func (m *Slide) GetSlideId() string {
	if m != nil {
		return m.SlideId
	}
	return ""
}

func (m *Slide) GetSlideIdTier() int32 {
	if m != nil {
		return m.SlideIdTier
	}
	return 0
}

func (m *Slide) GetSlideOtherId() string {
	if m != nil {
		return m.SlideOtherId
	}
	return ""
}

func (m *Slide) GetSlideOtherIdTier() int32 {
	if m != nil {
		return m.SlideOtherIdTier
	}
	return 0
}

func (m *Slide) GetLymphocyteInfiltrationPercent() string {
	if m != nil {
		return m.LymphocyteInfiltrationPercent
	}
	return ""
}

func (m *Slide) GetLymphocyteInfiltrationPercentTier() int32 {
	if m != nil {
		return m.LymphocyteInfiltrationPercentTier
	}
	return 0
}

func (m *Slide) GetTumorNucleiPercent() string {
	if m != nil {
		return m.TumorNucleiPercent
	}
	return ""
}

func (m *Slide) GetTumorNucleiPercentTier() int32 {
	if m != nil {
		return m.TumorNucleiPercentTier
	}
	return 0
}

func (m *Slide) GetMonocyteInfiltrationPercent() string {
	if m != nil {
		return m.MonocyteInfiltrationPercent
	}
	return ""
}

func (m *Slide) GetMonocyteInfiltrationPercentTier() int32 {
	if m != nil {
		return m.MonocyteInfiltrationPercentTier
	}
	return 0
}

func (m *Slide) GetNormalCellsPercent() string {
	if m != nil {
		return m.NormalCellsPercent
	}
	return ""
}

func (m *Slide) GetNormalCellsPercentTier() int32 {
	if m != nil {
		return m.NormalCellsPercentTier
	}
	return 0
}

func (m *Slide) GetTumorCellsPercent() string {
	if m != nil {
		return m.TumorCellsPercent
	}
	return ""
}

func (m *Slide) GetTumorCellsPercentTier() int32 {
	if m != nil {
		return m.TumorCellsPercentTier
	}
	return 0
}

func (m *Slide) GetStromalCellsPercent() string {
	if m != nil {
		return m.StromalCellsPercent
	}
	return ""
}

func (m *Slide) GetStromalCellsPercentTier() int32 {
	if m != nil {
		return m.StromalCellsPercentTier
	}
	return 0
}

func (m *Slide) GetEosinophilInfiltrationPercent() string {
	if m != nil {
		return m.EosinophilInfiltrationPercent
	}
	return ""
}

func (m *Slide) GetEosinophilInfiltrationPercentTier() int32 {
	if m != nil {
		return m.EosinophilInfiltrationPercentTier
	}
	return 0
}

func (m *Slide) GetNeutrophilInfiltrationPercent() string {
	if m != nil {
		return m.NeutrophilInfiltrationPercent
	}
	return ""
}

func (m *Slide) GetNeutrophilInfiltrationPercentTier() int32 {
	if m != nil {
		return m.NeutrophilInfiltrationPercentTier
	}
	return 0
}

func (m *Slide) GetGranulocyteInfiltrationPercent() string {
	if m != nil {
		return m.GranulocyteInfiltrationPercent
	}
	return ""
}

func (m *Slide) GetGranulocyteInfiltrationPercentTier() int32 {
	if m != nil {
		return m.GranulocyteInfiltrationPercentTier
	}
	return 0
}

func (m *Slide) GetNecrosisPercent() string {
	if m != nil {
		return m.NecrosisPercent
	}
	return ""
}

func (m *Slide) GetNecrosisPercentTier() int32 {
	if m != nil {
		return m.NecrosisPercentTier
	}
	return 0
}

func (m *Slide) GetInflammatoryInfiltrationPercent() string {
	if m != nil {
		return m.InflammatoryInfiltrationPercent
	}
	return ""
}

func (m *Slide) GetInflammatoryInfiltrationPercentTier() int32 {
	if m != nil {
		return m.InflammatoryInfiltrationPercentTier
	}
	return 0
}

func (m *Slide) GetProliferatingCellsNumber() string {
	if m != nil {
		return m.ProliferatingCellsNumber
	}
	return ""
}

func (m *Slide) GetProliferatingCellsNumberTier() int32 {
	if m != nil {
		return m.ProliferatingCellsNumberTier
	}
	return 0
}

func (m *Slide) GetSectionLocation() string {
	if m != nil {
		return m.SectionLocation
	}
	return ""
}

func (m *Slide) GetSectionLocationTier() int32 {
	if m != nil {
		return m.SectionLocationTier
	}
	return 0
}

type Study struct {
	// This is unique in the context of the server instance.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The ID of the dataset this object belongs to.
	DatasetId string `protobuf:"bytes,2,opt,name=dataset_id,json=datasetId,proto3" json:"dataset_id,omitempty"`
	// This is a label or symbolic identifier for this object.
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// This attribute contains human readable text.
	Description string `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	// The :ref:`ISO 8601<metadata_date_time>` time at which this record was created.
	Created string `protobuf:"bytes,5,opt,name=created,proto3" json:"created,omitempty"`
	// The :ref:`ISO 8601<metadata_date_time>` time at which this record was updated.
	Updated string `protobuf:"bytes,6,opt,name=updated,proto3" json:"updated,omitempty"`
	// A map of additional information.
	Attributes *Attributes `protobuf:"bytes,7,opt,name=attributes,proto3" json:"attributes,omitempty"`
	//
	PatientId            string   `protobuf:"bytes,8,opt,name=patientId,proto3" json:"patientId,omitempty"`
	PatientIdTier        int32    `protobuf:"varint,9,opt,name=patientIdTier,proto3" json:"patientIdTier,omitempty"`
	StartDate            string   `protobuf:"bytes,10,opt,name=startDate,proto3" json:"startDate,omitempty"`
	StartDateTier        int32    `protobuf:"varint,11,opt,name=startDateTier,proto3" json:"startDateTier,omitempty"`
	EndDate              string   `protobuf:"bytes,12,opt,name=endDate,proto3" json:"endDate,omitempty"`
	EndDateTier          int32    `protobuf:"varint,13,opt,name=endDateTier,proto3" json:"endDateTier,omitempty"`
	Status               string   `protobuf:"bytes,14,opt,name=status,proto3" json:"status,omitempty"`
	StatusTier           int32    `protobuf:"varint,15,opt,name=statusTier,proto3" json:"statusTier,omitempty"`
	RecordingDate        string   `protobuf:"bytes,16,opt,name=recordingDate,proto3" json:"recordingDate,omitempty"`
	RecordingDateTier    int32    `protobuf:"varint,17,opt,name=recordingDateTier,proto3" json:"recordingDateTier,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Study) Reset()         { *m = Study{} }
func (m *Study) String() string { return proto.CompactTextString(m) }
func (*Study) ProtoMessage()    {}
func (*Study) Descriptor() ([]byte, []int) {
	return fileDescriptor_eca1b93ccfe37bb1, []int{15}
}

func (m *Study) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Study.Unmarshal(m, b)
}
func (m *Study) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Study.Marshal(b, m, deterministic)
}
func (m *Study) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Study.Merge(m, src)
}
func (m *Study) XXX_Size() int {
	return xxx_messageInfo_Study.Size(m)
}
func (m *Study) XXX_DiscardUnknown() {
	xxx_messageInfo_Study.DiscardUnknown(m)
}

var xxx_messageInfo_Study proto.InternalMessageInfo

func (m *Study) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Study) GetDatasetId() string {
	if m != nil {
		return m.DatasetId
	}
	return ""
}

func (m *Study) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Study) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Study) GetCreated() string {
	if m != nil {
		return m.Created
	}
	return ""
}

func (m *Study) GetUpdated() string {
	if m != nil {
		return m.Updated
	}
	return ""
}

func (m *Study) GetAttributes() *Attributes {
	if m != nil {
		return m.Attributes
	}
	return nil
}

func (m *Study) GetPatientId() string {
	if m != nil {
		return m.PatientId
	}
	return ""
}

func (m *Study) GetPatientIdTier() int32 {
	if m != nil {
		return m.PatientIdTier
	}
	return 0
}

func (m *Study) GetStartDate() string {
	if m != nil {
		return m.StartDate
	}
	return ""
}

func (m *Study) GetStartDateTier() int32 {
	if m != nil {
		return m.StartDateTier
	}
	return 0
}

func (m *Study) GetEndDate() string {
	if m != nil {
		return m.EndDate
	}
	return ""
}

func (m *Study) GetEndDateTier() int32 {
	if m != nil {
		return m.EndDateTier
	}
	return 0
}

func (m *Study) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *Study) GetStatusTier() int32 {
	if m != nil {
		return m.StatusTier
	}
	return 0
}

func (m *Study) GetRecordingDate() string {
	if m != nil {
		return m.RecordingDate
	}
	return ""
}

func (m *Study) GetRecordingDateTier() int32 {
	if m != nil {
		return m.RecordingDateTier
	}
	return 0
}

type Labtest struct {
	// This is unique in the context of the server instance.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The ID of the dataset this object belongs to.
	DatasetId string `protobuf:"bytes,2,opt,name=dataset_id,json=datasetId,proto3" json:"dataset_id,omitempty"`
	// This is a label or symbolic identifier for this object.
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// This attribute contains human readable text.
	Description string `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	// The :ref:`ISO 8601<metadata_date_time>` time at which this record was created.
	Created string `protobuf:"bytes,5,opt,name=created,proto3" json:"created,omitempty"`
	// The :ref:`ISO 8601<metadata_date_time>` time at which this record was updated.
	Updated string `protobuf:"bytes,6,opt,name=updated,proto3" json:"updated,omitempty"`
	// A map of additional information.
	Attributes *Attributes `protobuf:"bytes,7,opt,name=attributes,proto3" json:"attributes,omitempty"`
	//
	PatientId            string   `protobuf:"bytes,8,opt,name=patientId,proto3" json:"patientId,omitempty"`
	PatientIdTier        int32    `protobuf:"varint,9,opt,name=patientIdTier,proto3" json:"patientIdTier,omitempty"`
	StartDate            string   `protobuf:"bytes,10,opt,name=startDate,proto3" json:"startDate,omitempty"`
	StartDateTier        int32    `protobuf:"varint,11,opt,name=startDateTier,proto3" json:"startDateTier,omitempty"`
	CollectionDate       string   `protobuf:"bytes,12,opt,name=collectionDate,proto3" json:"collectionDate,omitempty"`
	CollectionDateTier   int32    `protobuf:"varint,13,opt,name=collectionDateTier,proto3" json:"collectionDateTier,omitempty"`
	EndDate              string   `protobuf:"bytes,14,opt,name=endDate,proto3" json:"endDate,omitempty"`
	EndDateTier          int32    `protobuf:"varint,15,opt,name=endDateTier,proto3" json:"endDateTier,omitempty"`
	EventType            string   `protobuf:"bytes,16,opt,name=eventType,proto3" json:"eventType,omitempty"`
	EventTypeTier        int32    `protobuf:"varint,17,opt,name=eventTypeTier,proto3" json:"eventTypeTier,omitempty"`
	TestResults          string   `protobuf:"bytes,18,opt,name=testResults,proto3" json:"testResults,omitempty"`
	TestResultsTier      int32    `protobuf:"varint,19,opt,name=testResultsTier,proto3" json:"testResultsTier,omitempty"`
	TimePoint            string   `protobuf:"bytes,20,opt,name=timePoint,proto3" json:"timePoint,omitempty"`
	TimePointTier        int32    `protobuf:"varint,21,opt,name=timePointTier,proto3" json:"timePointTier,omitempty"`
	RecordingDate        string   `protobuf:"bytes,22,opt,name=recordingDate,proto3" json:"recordingDate,omitempty"`
	RecordingDateTier    int32    `protobuf:"varint,23,opt,name=recordingDateTier,proto3" json:"recordingDateTier,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Labtest) Reset()         { *m = Labtest{} }
func (m *Labtest) String() string { return proto.CompactTextString(m) }
func (*Labtest) ProtoMessage()    {}
func (*Labtest) Descriptor() ([]byte, []int) {
	return fileDescriptor_eca1b93ccfe37bb1, []int{16}
}

func (m *Labtest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Labtest.Unmarshal(m, b)
}
func (m *Labtest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Labtest.Marshal(b, m, deterministic)
}
func (m *Labtest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Labtest.Merge(m, src)
}
func (m *Labtest) XXX_Size() int {
	return xxx_messageInfo_Labtest.Size(m)
}
func (m *Labtest) XXX_DiscardUnknown() {
	xxx_messageInfo_Labtest.DiscardUnknown(m)
}

var xxx_messageInfo_Labtest proto.InternalMessageInfo

func (m *Labtest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Labtest) GetDatasetId() string {
	if m != nil {
		return m.DatasetId
	}
	return ""
}

func (m *Labtest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Labtest) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Labtest) GetCreated() string {
	if m != nil {
		return m.Created
	}
	return ""
}

func (m *Labtest) GetUpdated() string {
	if m != nil {
		return m.Updated
	}
	return ""
}

func (m *Labtest) GetAttributes() *Attributes {
	if m != nil {
		return m.Attributes
	}
	return nil
}

func (m *Labtest) GetPatientId() string {
	if m != nil {
		return m.PatientId
	}
	return ""
}

func (m *Labtest) GetPatientIdTier() int32 {
	if m != nil {
		return m.PatientIdTier
	}
	return 0
}

func (m *Labtest) GetStartDate() string {
	if m != nil {
		return m.StartDate
	}
	return ""
}

func (m *Labtest) GetStartDateTier() int32 {
	if m != nil {
		return m.StartDateTier
	}
	return 0
}

func (m *Labtest) GetCollectionDate() string {
	if m != nil {
		return m.CollectionDate
	}
	return ""
}

func (m *Labtest) GetCollectionDateTier() int32 {
	if m != nil {
		return m.CollectionDateTier
	}
	return 0
}

func (m *Labtest) GetEndDate() string {
	if m != nil {
		return m.EndDate
	}
	return ""
}

func (m *Labtest) GetEndDateTier() int32 {
	if m != nil {
		return m.EndDateTier
	}
	return 0
}

func (m *Labtest) GetEventType() string {
	if m != nil {
		return m.EventType
	}
	return ""
}

func (m *Labtest) GetEventTypeTier() int32 {
	if m != nil {
		return m.EventTypeTier
	}
	return 0
}

func (m *Labtest) GetTestResults() string {
	if m != nil {
		return m.TestResults
	}
	return ""
}

func (m *Labtest) GetTestResultsTier() int32 {
	if m != nil {
		return m.TestResultsTier
	}
	return 0
}

func (m *Labtest) GetTimePoint() string {
	if m != nil {
		return m.TimePoint
	}
	return ""
}

func (m *Labtest) GetTimePointTier() int32 {
	if m != nil {
		return m.TimePointTier
	}
	return 0
}

func (m *Labtest) GetRecordingDate() string {
	if m != nil {
		return m.RecordingDate
	}
	return ""
}

func (m *Labtest) GetRecordingDateTier() int32 {
	if m != nil {
		return m.RecordingDateTier
	}
	return 0
}

func init() {
	proto.RegisterType((*Patient)(nil), "candig.Patient")
	proto.RegisterType((*Enrollment)(nil), "candig.Enrollment")
	proto.RegisterType((*Consent)(nil), "candig.Consent")
	proto.RegisterType((*Diagnosis)(nil), "candig.Diagnosis")
	proto.RegisterType((*Sample)(nil), "candig.Sample")
	proto.RegisterType((*Treatment)(nil), "candig.Treatment")
	proto.RegisterType((*Outcome)(nil), "candig.Outcome")
	proto.RegisterType((*Complication)(nil), "candig.Complication")
	proto.RegisterType((*Tumourboard)(nil), "candig.Tumourboard")
	proto.RegisterType((*Chemotherapy)(nil), "candig.Chemotherapy")
	proto.RegisterType((*Radiotherapy)(nil), "candig.Radiotherapy")
	proto.RegisterType((*Immunotherapy)(nil), "candig.Immunotherapy")
	proto.RegisterType((*Surgery)(nil), "candig.Surgery")
	proto.RegisterType((*Celltransplant)(nil), "candig.Celltransplant")
	proto.RegisterType((*Slide)(nil), "candig.Slide")
	proto.RegisterType((*Study)(nil), "candig.Study")
	proto.RegisterType((*Labtest)(nil), "candig.Labtest")
}

func init() { proto.RegisterFile("candig/clinical_metadata.proto", fileDescriptor_eca1b93ccfe37bb1) }

var fileDescriptor_eca1b93ccfe37bb1 = []byte{
	// 6185 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x5d, 0x4f, 0x93, 0x1c, 0xb7,
	0x75, 0x2f, 0x3a, 0x22, 0x69, 0x42, 0x4b, 0x6a, 0x09, 0x52, 0xd4, 0x88, 0xa2, 0x28, 0x6a, 0x25,
	0xd1, 0xb4, 0x22, 0x53, 0xd4, 0x1f, 0x2b, 0x8e, 0xe3, 0x38, 0x5e, 0xee, 0x72, 0xcd, 0x75, 0x89,
	0xbb, 0xeb, 0xdd, 0x95, 0x9c, 0x4a, 0xa5, 0xe2, 0xc2, 0x76, 0x63, 0x67, 0x60, 0xf7, 0x34, 0x46,
	0x68, 0xf4, 0x52, 0xe3, 0xaf, 0x90, 0x6b, 0x72, 0x49, 0x25, 0x39, 0xb9, 0x72, 0xca, 0x2d, 0x97,
	0xdc, 0x73, 0xcd, 0x21, 0x9f, 0x21, 0x95, 0x4f, 0x91, 0xaa, 0xa4, 0x52, 0xef, 0x01, 0xdd, 0xfd,
	0xba, 0x1b, 0xe8, 0x99, 0x51, 0x51, 0xa7, 0xec, 0x69, 0x07, 0xbf, 0xdf, 0x6b, 0x00, 0x8d, 0x06,
	0xf0, 0x7e, 0x78, 0x8d, 0xc6, 0xb2, 0xbb, 0x89, 0xc8, 0x53, 0x35, 0xfe, 0x30, 0xc9, 0x54, 0xae,
	0x12, 0x91, 0xfd, 0x7a, 0x2a, 0xad, 0x48, 0x85, 0x15, 0x0f, 0x67, 0x46, 0x5b, 0xcd, 0x2f, 0x39,
	0xfe, 0xf6, 0x9d, 0xb1, 0xd6, 0xe3, 0x4c, 0x7e, 0x88, 0xe8, 0x49, 0x79, 0xfa, 0x61, 0x61, 0x4d,
	0x99, 0x58, 0x67, 0x75, 0xfb, 0x46, 0x95, 0x8b, 0x9e, 0x4e, 0x75, 0xee, 0xc0, 0x8d, 0xff, 0x5e,
	0x67, 0x97, 0x0f, 0x84, 0x55, 0x32, 0xb7, 0xfc, 0x1a, 0xfb, 0x8e, 0x4a, 0x47, 0x17, 0xee, 0x5d,
	0x78, 0x70, 0xe5, 0xf0, 0x3b, 0x2a, 0xe5, 0x6f, 0x32, 0x06, 0x85, 0x14, 0xd2, 0xfe, 0x5a, 0xa5,
	0xa3, 0xef, 0x20, 0x7e, 0xc5, 0x23, 0xbb, 0x29, 0xe7, 0xec, 0xa5, 0x5c, 0x4c, 0xe5, 0xe8, 0x0f,
	0x90, 0xc0, 0xdf, 0xfc, 0x1e, 0x7b, 0x39, 0x95, 0x45, 0x62, 0xd4, 0xcc, 0x2a, 0x9d, 0x8f, 0x5e,
	0x42, 0x8a, 0x42, 0x7c, 0xc4, 0x2e, 0x27, 0x46, 0x0a, 0x2b, 0xd3, 0xd1, 0x45, 0x64, 0xab, 0x24,
	0x30, 0xe5, 0x2c, 0x45, 0xe6, 0x92, 0x63, 0x7c, 0x92, 0x7f, 0xcc, 0x98, 0xb0, 0xd6, 0xa8, 0x93,
	0xd2, 0xca, 0x62, 0x74, 0xf9, 0xde, 0x85, 0x07, 0x2f, 0x7f, 0xcc, 0x1f, 0xba, 0xdb, 0x79, 0xb8,
	0x59, 0x33, 0x87, 0xc4, 0x8a, 0xdf, 0x61, 0x57, 0x66, 0xee, 0xbe, 0x76, 0xd3, 0xd1, 0x77, 0x5d,
	0xdd, 0x6b, 0x80, 0xbf, 0xcb, 0xae, 0xd6, 0x89, 0x63, 0x25, 0xcd, 0xe8, 0xca, 0xbd, 0x0b, 0x0f,
	0x2e, 0x1e, 0xb6, 0x41, 0x7e, 0x9b, 0x7d, 0x57, 0xdb, 0x89, 0x34, 0xbb, 0x69, 0x31, 0x62, 0x98,
	0x45, 0x9d, 0xe6, 0x1b, 0x6c, 0xad, 0xfa, 0x8d, 0x19, 0xbc, 0x8c, 0x19, 0xb4, 0x30, 0x6c, 0x0d,
	0x61, 0xe5, 0xfe, 0xe9, 0x63, 0x65, 0xec, 0x64, 0xb4, 0xe6, 0x5b, 0xa3, 0x81, 0xf8, 0x03, 0xf6,
	0x0a, 0x49, 0x62, 0x46, 0x57, 0x31, 0xa3, 0x2e, 0xcc, 0x6f, 0xb1, 0x4b, 0x63, 0x99, 0xa7, 0xd2,
	0x8c, 0xae, 0x61, 0x36, 0x3e, 0xc5, 0xef, 0x32, 0xe6, 0x7e, 0xe1, 0xc5, 0xaf, 0xe0, 0xc5, 0x04,
	0x81, 0x76, 0x90, 0x76, 0x92, 0xab, 0x44, 0xd9, 0xf9, 0x68, 0xdd, 0xb5, 0x43, 0x0d, 0x40, 0x3b,
	0xd4, 0x09, 0xcc, 0xe0, 0xba, 0x6b, 0x87, 0x16, 0x08, 0x4f, 0xda, 0x88, 0x44, 0x8e, 0xb8, 0x7b,
	0xd2, 0xf0, 0x1b, 0xda, 0x06, 0xfe, 0xe2, 0x45, 0x37, 0xf0, 0xa2, 0x3a, 0xcd, 0x1f, 0xb1, 0x1b,
	0x33, 0xa3, 0xcf, 0x54, 0x9e, 0xc8, 0xfd, 0xd3, 0x43, 0x59, 0xa8, 0x54, 0xe6, 0x89, 0x1c, 0xdd,
	0xc4, 0xcb, 0x43, 0x14, 0xff, 0x11, 0x7b, 0x2d, 0x00, 0x63, 0xe6, 0xaf, 0x62, 0xe6, 0x31, 0xba,
	0x69, 0xe3, 0x6d, 0x29, 0xec, 0x64, 0x74, 0x8b, 0xb6, 0x31, 0x42, 0x4d, 0x1b, 0x63, 0x12, 0xf3,
	0x7c, 0x8d, 0xb6, 0x71, 0x0d, 0xc3, 0x33, 0x4d, 0x44, 0x59, 0xd4, 0x99, 0x8d, 0x30, 0xb3, 0x16,
	0xc6, 0xdf, 0x67, 0xeb, 0x34, 0x8d, 0xd9, 0xbd, 0x8e, 0xd9, 0xf5, 0x70, 0xfe, 0x63, 0x36, 0x12,
	0xa5, 0xd5, 0xb3, 0x62, 0x7e, 0xac, 0x8a, 0xa2, 0x94, 0x3b, 0xda, 0x1c, 0xca, 0x42, 0x0a, 0x93,
	0x4c, 0x46, 0xb7, 0x31, 0xef, 0x28, 0xcf, 0x1f, 0xb3, 0x3b, 0x31, 0x0e, 0xcb, 0x7c, 0x03, 0xcb,
	0x1c, 0xb4, 0x81, 0x3b, 0x9f, 0x19, 0xa5, 0xcd, 0x33, 0x91, 0xa9, 0x71, 0x2e, 0xf2, 0x64, 0x3e,
	0xba, 0x83, 0xc5, 0x76, 0x61, 0xf7, 0xc4, 0x5a, 0x10, 0x16, 0xf2, 0x26, 0x16, 0x12, 0xa2, 0xf8,
	0xa7, 0xec, 0x55, 0xd7, 0x7c, 0x07, 0x9d, 0x12, 0xee, 0x62, 0x09, 0x61, 0x92, 0xff, 0x84, 0xbd,
	0x1e, 0x24, 0xb0, 0xb4, 0xb7, 0xb0, 0xb4, 0xb8, 0x01, 0xff, 0x19, 0x7b, 0xe3, 0x54, 0x4c, 0x55,
	0x36, 0x7f, 0xaa, 0x0a, 0xab, 0xcd, 0x7c, 0x33, 0x4f, 0x0f, 0x55, 0xf1, 0xdb, 0x1d, 0x91, 0x58,
	0x6d, 0x8a, 0xd1, 0x3d, 0x2c, 0x79, 0xc8, 0x84, 0x3f, 0x65, 0x6f, 0x0d, 0xd0, 0x58, 0x8b, 0xb7,
	0xb1, 0x16, 0x8b, 0xcc, 0xf8, 0x31, 0x7b, 0xaf, 0x65, 0x02, 0x35, 0x96, 0xa9, 0x2a, 0x66, 0xba,
	0x50, 0x30, 0xd1, 0x1d, 0xcd, 0xf3, 0xd4, 0xe8, 0xa9, 0x1c, 0x6d, 0x60, 0xad, 0x96, 0x33, 0xe6,
	0x7f, 0xc9, 0xbe, 0xbf, 0x94, 0x21, 0xd6, 0xf4, 0x1d, 0xac, 0xe9, 0xf2, 0x17, 0xc0, 0xdd, 0xa7,
	0xd2, 0x0a, 0x95, 0x15, 0xd1, 0xda, 0xbe, 0x8b, 0xb5, 0x5d, 0x64, 0xc6, 0x0f, 0xd8, 0x3b, 0x0b,
	0x4c, 0xb0, 0x86, 0xef, 0x61, 0x0d, 0x97, 0x31, 0x85, 0xfe, 0x34, 0x96, 0xb9, 0xb4, 0x2a, 0xd9,
	0x12, 0x79, 0x22, 0x4d, 0x5d, 0xa3, 0xfb, 0xae, 0x3f, 0x05, 0x49, 0xe8, 0x4f, 0x41, 0x02, 0x4b,
	0xff, 0x9e, 0xeb, 0x4f, 0x51, 0x03, 0x9e, 0xb2, 0x1f, 0xe0, 0x7c, 0xfd, 0x73, 0x6f, 0xa1, 0xf3,
	0x14, 0x2b, 0xb6, 0x6f, 0x8e, 0xd4, 0x38, 0x57, 0xa7, 0x2a, 0x11, 0xb9, 0xdd, 0xd2, 0x53, 0x6d,
	0x4e, 0x54, 0x0a, 0xf3, 0xe7, 0x03, 0xac, 0xcb, 0x6a, 0x17, 0xf1, 0x8c, 0x7d, 0xb4, 0xd2, 0x05,
	0x58, 0xf7, 0xef, 0x63, 0xdd, 0x57, 0xbf, 0x10, 0x9e, 0x8c, 0x4e, 0x92, 0x12, 0x1c, 0x99, 0xce,
	0x45, 0xb6, 0x6f, 0x9e, 0xe4, 0x67, 0xca, 0xe8, 0x7c, 0x2a, 0x73, 0x2b, 0xb2, 0x27, 0x5f, 0xcf,
	0x74, 0x51, 0x1a, 0x39, 0x7a, 0x1f, 0xef, 0x64, 0x19, 0x53, 0xfe, 0xe7, 0xec, 0x7b, 0x4b, 0x98,
	0x61, 0xad, 0xff, 0x10, 0x6b, 0xbd, 0xac, 0xf9, 0xc6, 0xdf, 0xae, 0x33, 0xf6, 0x24, 0x37, 0x3a,
	0xcb, 0xa6, 0xe7, 0xfa, 0x23, 0xa0, 0x3f, 0x3e, 0x65, 0xaf, 0xca, 0xba, 0x79, 0x76, 0xf3, 0xc2,
	0x2a, 0x5b, 0xe2, 0x7d, 0x39, 0x31, 0x12, 0x26, 0x61, 0x4c, 0x04, 0x09, 0x22, 0x53, 0xe2, 0x06,
	0xfc, 0x33, 0x76, 0xab, 0x21, 0x37, 0x67, 0xe0, 0x76, 0x45, 0xb6, 0x2d, 0xac, 0xf4, 0xf2, 0x25,
	0xc2, 0xf2, 0x9f, 0xb2, 0xdb, 0x61, 0x86, 0x88, 0x9a, 0x01, 0x0b, 0xf0, 0x55, 0x89, 0xd1, 0x45,
	0xd1, 0xf4, 0x07, 0x2f, 0x74, 0xba, 0x30, 0xf8, 0xaa, 0x0e, 0x44, 0xa4, 0x4f, 0x88, 0xe2, 0x7b,
	0x6c, 0x03, 0x07, 0xd2, 0x81, 0x34, 0x05, 0xf4, 0x49, 0xf5, 0x3b, 0x99, 0x3e, 0x93, 0xa9, 0x4a,
	0x54, 0x2e, 0x8f, 0x6c, 0x99, 0xce, 0xf7, 0xa0, 0x1f, 0x39, 0x71, 0xb4, 0x84, 0x25, 0xff, 0x92,
	0xdd, 0x5f, 0x6c, 0x45, 0xe4, 0xd4, 0x92, 0xd6, 0xfc, 0x17, 0xec, 0xde, 0xb0, 0xe5, 0x6e, 0xea,
	0x35, 0xd8, 0x42, 0x3b, 0x7e, 0xc8, 0xde, 0x5d, 0x64, 0x43, 0xb4, 0xdb, 0x52, 0xb6, 0xf0, 0x8c,
	0xc4, 0x58, 0x6e, 0x5a, 0xf2, 0x8c, 0x9c, 0xa6, 0xeb, 0xc2, 0xf0, 0x8c, 0x3a, 0x10, 0xd1, 0x72,
	0x21, 0x0a, 0xae, 0x90, 0x99, 0x1a, 0xab, 0x13, 0x95, 0x29, 0x3b, 0xdf, 0x12, 0x56, 0x8e, 0xb5,
	0x99, 0x7b, 0x3d, 0x17, 0xa2, 0x40, 0x33, 0x06, 0x60, 0xa2, 0xef, 0x62, 0x34, 0x7f, 0xc8, 0x78,
	0x61, 0x85, 0x2d, 0x8b, 0xd6, 0xad, 0x38, 0xb5, 0x17, 0x60, 0x60, 0x4c, 0xf4, 0x51, 0xa2, 0xfc,
	0x22, 0x2c, 0x8c, 0xdf, 0x99, 0x51, 0x53, 0x61, 0xe6, 0xfb, 0x79, 0xa2, 0x33, 0x3d, 0x56, 0x85,
	0xc5, 0xae, 0xe6, 0xc4, 0x5f, 0x98, 0x84, 0xf1, 0x1b, 0x24, 0x88, 0xec, 0x8b, 0x1b, 0x80, 0xe6,
	0xec, 0x91, 0x5b, 0x3a, 0xb7, 0x22, 0xb1, 0x5e, 0xfc, 0x45, 0x79, 0xd0, 0x9c, 0x31, 0x8e, 0xc8,
	0xc1, 0x41, 0x1b, 0x68, 0x2b, 0x23, 0x4f, 0xa5, 0x31, 0x2a, 0x1f, 0x1f, 0x4c, 0xe6, 0x85, 0x4a,
	0x94, 0xc8, 0xf1, 0xa6, 0x9d, 0x30, 0x8c, 0xb0, 0x30, 0x7f, 0x84, 0x19, 0x22, 0x0d, 0x07, 0x2c,
	0xa0, 0xd5, 0xfa, 0x6c, 0x75, 0xe3, 0x4e, 0x19, 0xc6, 0x0d, 0xf8, 0x36, 0x7b, 0x33, 0x4a, 0x12,
	0x55, 0x38, 0x6c, 0x84, 0xfd, 0xaa, 0x9c, 0x62, 0xdb, 0x9c, 0xee, 0xa6, 0x87, 0xf2, 0xab, 0x52,
	0x16, 0xd6, 0x0b, 0xc0, 0x00, 0x83, 0xfd, 0xaa, 0x87, 0x12, 0x69, 0x17, 0x61, 0xa1, 0x1c, 0x0b,
	0x4e, 0x4b, 0xe5, 0xe3, 0x2d, 0x99, 0x5b, 0x23, 0xb1, 0x7d, 0x9d, 0x74, 0x0b, 0x30, 0x50, 0x4e,
	0x1f, 0x25, 0x02, 0x2d, 0xc2, 0xf6, 0xaf, 0x3b, 0xf0, 0x8b, 0x30, 0x2f, 0xca, 0x22, 0x2c, 0x3c,
	0xcb, 0x30, 0x43, 0x64, 0xd9, 0x80, 0xc5, 0xc6, 0x7f, 0x5e, 0x67, 0x97, 0xb7, 0x74, 0x5e, 0x9c,
	0x8b, 0x82, 0x80, 0x28, 0xb8, 0xc3, 0xae, 0x24, 0xae, 0x6d, 0x76, 0x53, 0x2f, 0x04, 0x1a, 0x00,
	0xf2, 0xa8, 0x13, 0xc4, 0xe1, 0xb7, 0x41, 0x68, 0x11, 0x0f, 0x10, 0xcf, 0x4e, 0x21, 0x74, 0xc7,
	0x4d, 0x92, 0x06, 0x26, 0x3a, 0x30, 0xbf, 0xcf, 0xae, 0x79, 0xe8, 0x4b, 0x69, 0x0a, 0x68, 0x60,
	0xe7, 0xb7, 0x3b, 0x28, 0x74, 0xda, 0x36, 0x42, 0xbc, 0x76, 0x80, 0x01, 0x7b, 0x7f, 0xe3, 0xbe,
	0x2b, 0xc8, 0xf4, 0x58, 0x7b, 0x27, 0x1d, 0x60, 0xa0, 0xb3, 0xf6, 0x51, 0xe2, 0x84, 0x23, 0x2c,
	0x94, 0x63, 0xa4, 0x28, 0x74, 0x8e, 0xab, 0xe7, 0xdf, 0xc8, 0x04, 0x3b, 0x89, 0x73, 0xb3, 0x01,
	0xc6, 0x4d, 0x70, 0x5d, 0x94, 0xb8, 0xd2, 0x08, 0xcb, 0x3f, 0x60, 0xd7, 0x9f, 0x8b, 0x62, 0xb3,
	0x80, 0xc2, 0xf7, 0x4f, 0xac, 0x50, 0xb9, 0x4c, 0xbd, 0xfb, 0xec, 0x13, 0xe0, 0x3a, 0x7a, 0x20,
	0x71, 0xa1, 0x61, 0x92, 0x6f, 0xb0, 0x35, 0xb7, 0x7a, 0x76, 0x9c, 0xf7, 0x9e, 0x2d, 0x8c, 0xbf,
	0xcf, 0xd6, 0x69, 0x9a, 0xf8, 0xcb, 0x1e, 0x0e, 0x75, 0x16, 0x98, 0xda, 0xd1, 0x66, 0x5a, 0x3d,
	0x5e, 0xe7, 0x27, 0xfb, 0x04, 0xd4, 0xb9, 0x07, 0x12, 0x2f, 0x19, 0x26, 0x61, 0xe2, 0x56, 0xbe,
	0xcc, 0x3d, 0x5d, 0xdf, 0xce, 0xaf, 0x26, 0xf3, 0x3d, 0x6d, 0xbd, 0xa3, 0x8c, 0x1b, 0xc0, 0xc4,
	0x1d, 0x25, 0x89, 0xc3, 0x1c, 0x36, 0x82, 0x51, 0x63, 0x24, 0x1d, 0x11, 0xce, 0x53, 0xb6, 0x41,
	0x68, 0x8d, 0x16, 0x40, 0x7c, 0x62, 0x9f, 0x80, 0x76, 0xae, 0xc1, 0xaa, 0xe9, 0x9c, 0x0b, 0xec,
	0xe1, 0xfc, 0x63, 0x76, 0xb3, 0x8b, 0x11, 0xb7, 0x17, 0xe4, 0xa0, 0xdd, 0x3c, 0x0a, 0x93, 0xa8,
	0xd6, 0x26, 0x55, 0xb9, 0xb0, 0xda, 0xa0, 0x2f, 0xf0, 0x0e, 0x2f, 0x6a, 0x00, 0xed, 0x16, 0x25,
	0xa9, 0xc3, 0x1b, 0x34, 0x72, 0x61, 0x23, 0x79, 0xa6, 0x74, 0x59, 0x64, 0xf3, 0x7a, 0x60, 0x79,
	0x8f, 0x17, 0xa2, 0x5c, 0xa0, 0xaf, 0x07, 0x13, 0x9f, 0x17, 0xa3, 0x61, 0x9c, 0xc2, 0x6c, 0xbe,
	0x7f, 0xba, 0x0f, 0x52, 0xf5, 0xb1, 0xd2, 0x27, 0x22, 0xff, 0x6d, 0xe5, 0xf4, 0xfa, 0x0c, 0x8c,
	0xd3, 0x3e, 0x4a, 0x9d, 0x5e, 0x98, 0x85, 0x1a, 0x4e, 0x44, 0xe1, 0xcb, 0x7e, 0x2c, 0x65, 0xfe,
	0x2b, 0x65, 0x27, 0xa9, 0x11, 0xcf, 0x73, 0xef, 0xf5, 0x62, 0x34, 0xff, 0x19, 0x7b, 0x23, 0x42,
	0x11, 0xbf, 0x37, 0x64, 0x02, 0x65, 0xbb, 0x31, 0xe8, 0x2d, 0x2a, 0x56, 0x64, 0x3e, 0xf4, 0x10,
	0xa3, 0xa1, 0xec, 0x08, 0x45, 0xc2, 0x09, 0x43, 0x26, 0x50, 0xb6, 0x9d, 0xcf, 0x82, 0x65, 0xbb,
	0x60, 0x41, 0x8c, 0x86, 0xb2, 0x23, 0x14, 0x09, 0x0a, 0x0c, 0x99, 0x38, 0xf1, 0xe7, 0x67, 0xcd,
	0x7e, 0xf1, 0x1f, 0x60, 0xf1, 0x03, 0x16, 0x7c, 0x87, 0xdd, 0x8d, 0xb3, 0x58, 0x89, 0x1f, 0x60,
	0x25, 0x16, 0x58, 0xe1, 0xd2, 0xd2, 0x11, 0x30, 0x4b, 0x6d, 0xe9, 0xe9, 0x2c, 0x93, 0x56, 0x8e,
	0x1e, 0xba, 0xfe, 0x1c, 0xa0, 0xa0, 0xd5, 0x02, 0x30, 0x16, 0xf9, 0xa1, 0xeb, 0xcf, 0x11, 0x7a,
	0xe3, 0xbf, 0x46, 0xec, 0xca, 0xb6, 0x12, 0xe3, 0x5c, 0x17, 0xaa, 0x38, 0x97, 0x39, 0x5d, 0x99,
	0x03, 0x77, 0x53, 0xb5, 0x4e, 0x2d, 0x74, 0x28, 0x84, 0x71, 0xfd, 0x26, 0x49, 0xc4, 0x4e, 0x17,
	0x86, 0x12, 0x6b, 0x88, 0x08, 0x9e, 0x36, 0x08, 0xd3, 0x7b, 0x0b, 0x20, 0xa2, 0xa7, 0x4f, 0x80,
	0xec, 0xc1, 0x65, 0x6c, 0xfd, 0x08, 0x2b, 0xd9, 0xd3, 0x46, 0x61, 0xda, 0x6a, 0x23, 0x54, 0xf6,
	0xf4, 0x19, 0x7e, 0x97, 0xb1, 0x04, 0x23, 0x95, 0xc7, 0xf3, 0x59, 0x15, 0x93, 0x20, 0x08, 0xca,
	0xad, 0x3a, 0x45, 0xe4, 0x4d, 0x07, 0x45, 0xbb, 0x4c, 0x14, 0x05, 0x86, 0x09, 0x89, 0xa4, 0xe9,
	0xa0, 0x28, 0xcb, 0x5a, 0x08, 0x91, 0x32, 0x01, 0xa6, 0xa9, 0xdf, 0x91, 0xb2, 0xd5, 0x2b, 0x1d,
	0x82, 0x34, 0xf5, 0x83, 0x14, 0x51, 0x2c, 0x1d, 0x14, 0xfa, 0xc8, 0x44, 0x15, 0x16, 0x56, 0x90,
	0xd5, 0x2a, 0xbf, 0x01, 0xe0, 0x89, 0xd5, 0x09, 0xa2, 0x50, 0xda, 0x20, 0x4c, 0x3c, 0x53, 0x69,
	0x27, 0x3a, 0xdd, 0x3f, 0xdd, 0x96, 0xa7, 0x2a, 0x57, 0x56, 0x9d, 0xc9, 0xe6, 0x81, 0x38, 0xa1,
	0x32, 0x64, 0xc2, 0x9f, 0xb2, 0xb7, 0x06, 0x68, 0x22, 0x5e, 0x16, 0x99, 0x41, 0xbb, 0x14, 0x02,
	0x86, 0x37, 0x3e, 0x37, 0xa7, 0x5b, 0x08, 0x02, 0xed, 0xd2, 0xa4, 0x88, 0x32, 0xe9, 0xa0, 0x4d,
	0x3e, 0xd8, 0xbe, 0x77, 0x68, 0x3e, 0x55, 0xfb, 0x36, 0x29, 0xa2, 0x40, 0x3a, 0x28, 0xe4, 0x63,
	0xcb, 0xa9, 0x36, 0x3f, 0x37, 0x22, 0xad, 0xd6, 0xde, 0x04, 0x81, 0x7c, 0x9a, 0x14, 0x11, 0x1b,
	0x1d, 0x14, 0x46, 0xc5, 0xd8, 0x88, 0x54, 0xe5, 0xe3, 0xa3, 0x79, 0x61, 0xe5, 0xf4, 0x8b, 0x42,
	0xa6, 0x5e, 0x5e, 0xf4, 0x09, 0x8c, 0xe2, 0x77, 0x41, 0x22, 0x27, 0xc2, 0x24, 0x94, 0x51, 0x28,
	0x2b, 0x8b, 0xfd, 0xd3, 0x67, 0xd2, 0x8a, 0x02, 0x26, 0xb9, 0xc2, 0x8b, 0x88, 0x3e, 0x01, 0x65,
	0xf4, 0x40, 0x22, 0x20, 0xc2, 0x24, 0xf4, 0xa8, 0xc2, 0x8a, 0x71, 0x5d, 0xb8, 0x57, 0x0e, 0x6d,
	0x10, 0x6b, 0x42, 0x01, 0xa2, 0x17, 0xfa, 0x04, 0xdf, 0x63, 0x1b, 0x67, 0x4e, 0x91, 0xed, 0x9b,
	0x27, 0x3e, 0x36, 0x7f, 0x7a, 0x3c, 0x91, 0x47, 0xad, 0x82, 0x9c, 0x6a, 0x58, 0xc2, 0x92, 0x7f,
	0xc9, 0xee, 0x2f, 0xb6, 0x22, 0x5a, 0x62, 0x49, 0x6b, 0x10, 0x7b, 0xc5, 0x4c, 0x26, 0x30, 0x90,
	0x8f, 0xe1, 0xe9, 0x82, 0x45, 0x6b, 0xea, 0x72, 0xe2, 0x62, 0xd8, 0x88, 0x7f, 0xce, 0xde, 0x1e,
	0x34, 0x20, 0x42, 0x63, 0xb1, 0x21, 0x48, 0xde, 0x99, 0xd1, 0x00, 0x58, 0x95, 0x3c, 0x56, 0x7a,
	0x2a, 0xcc, 0x6f, 0xa5, 0x29, 0xbc, 0xd6, 0x08, 0x72, 0x2e, 0xb6, 0xd5, 0xc7, 0x89, 0xca, 0x88,
	0xf2, 0xe0, 0xa8, 0x4f, 0x2a, 0xe4, 0x97, 0xa5, 0xc8, 0x6d, 0x33, 0x31, 0x3a, 0x7d, 0x11, 0xa3,
	0x61, 0x96, 0x89, 0x50, 0x44, 0x59, 0x0c, 0x99, 0x80, 0xbc, 0x11, 0xa9, 0x7b, 0x42, 0x22, 0x7b,
	0xa6, 0x33, 0x99, 0x94, 0x99, 0x30, 0xc7, 0xb2, 0x00, 0x5d, 0xed, 0xd5, 0xc5, 0x80, 0x05, 0xc8,
	0x9b, 0x38, 0x4b, 0xb4, 0xc6, 0x02, 0x2b, 0xf4, 0x45, 0xb5, 0x05, 0x10, 0x38, 0x57, 0x3d, 0x72,
	0x12, 0xba, 0xcf, 0x80, 0x84, 0xee, 0xa3, 0x58, 0xde, 0x47, 0x4e, 0x42, 0x87, 0x59, 0x98, 0x5b,
	0x32, 0x71, 0xa2, 0x0d, 0xac, 0x15, 0x5c, 0x6c, 0xfd, 0x63, 0xe7, 0x7b, 0xda, 0x28, 0xd4, 0xa7,
	0x8d, 0x60, 0xde, 0x9f, 0x38, 0xdf, 0xd3, 0x67, 0x60, 0x74, 0x36, 0xe8, 0x66, 0x9a, 0x1a, 0x59,
	0x14, 0xa3, 0x4f, 0xdd, 0x3c, 0xd1, 0x23, 0x60, 0x9e, 0xe8, 0x81, 0x58, 0xc0, 0x0f, 0xdd, 0x3c,
	0x11, 0x24, 0x61, 0xd9, 0x06, 0x13, 0x48, 0x6b, 0x2a, 0xfa, 0xcc, 0x2d, 0xdb, 0xba, 0x38, 0xf4,
	0xe1, 0x2e, 0x86, 0x05, 0xfc, 0x91, 0x5b, 0xb6, 0x85, 0x38, 0xbc, 0x86, 0x0e, 0xd0, 0x6a, 0x69,
	0xf8, 0x23, 0xd7, 0xef, 0x43, 0x1c, 0xf4, 0xfb, 0x10, 0x8e, 0x65, 0xfd, 0xb1, 0xeb, 0xf7, 0x31,
	0x1e, 0xe7, 0x3d, 0x3f, 0x18, 0x71, 0x1c, 0x8e, 0x7e, 0xec, 0xe7, 0x3d, 0x0a, 0xe2, 0xbc, 0x47,
	0x01, 0xcc, 0xfa, 0x4f, 0xfc, 0xbc, 0xd7, 0x25, 0xa0, 0x3e, 0xde, 0x9b, 0x7b, 0x8a, 0x8c, 0xdf,
	0x9f, 0xb8, 0x18, 0x73, 0x8c, 0xe7, 0x8f, 0xd9, 0x9d, 0x18, 0x87, 0x85, 0xfe, 0xa9, 0x8b, 0x31,
	0x0f, 0xd9, 0xf0, 0x94, 0xfd, 0x20, 0xd0, 0xd3, 0xfd, 0xfc, 0x62, 0x55, 0xe2, 0xfb, 0xfc, 0x81,
	0x34, 0xa7, 0xda, 0x4c, 0x65, 0x3a, 0xfa, 0xa9, 0x7b, 0x6f, 0xbb, 0xd2, 0x45, 0x3c, 0x63, 0x1f,
	0xad, 0x74, 0x01, 0x56, 0xff, 0xcf, 0xdc, 0x7b, 0xdb, 0x95, 0x2f, 0x44, 0x3d, 0xd9, 0x1a, 0x4d,
	0xa3, 0x9f, 0x79, 0x3d, 0xd9, 0x42, 0x03, 0x63, 0x18, 0x8a, 0xdd, 0xf4, 0x7a, 0xb2, 0xc7, 0x6c,
	0xfc, 0xcf, 0x0d, 0x76, 0xe9, 0x08, 0xa5, 0xc1, 0xf9, 0x1a, 0x23, 0xb0, 0xbf, 0xcb, 0xa9, 0xa6,
	0x7a, 0x81, 0x51, 0xa7, 0xf9, 0x06, 0x5b, 0xab, 0x7e, 0xd3, 0xfd, 0x5d, 0x14, 0xeb, 0xae, 0x51,
	0xd6, 0x96, 0x5a, 0xa3, 0x5c, 0x0d, 0xaf, 0x51, 0x60, 0xce, 0xd4, 0x89, 0xc8, 0x7c, 0x28, 0x62,
	0x37, 0xad, 0xd6, 0x13, 0x6d, 0x14, 0xe7, 0xcc, 0x16, 0x42, 0xd7, 0x13, 0x7d, 0xc6, 0x85, 0x67,
	0xb3, 0xcc, 0x05, 0x22, 0x71, 0xf1, 0xb3, 0x5e, 0x85, 0x67, 0x29, 0xea, 0xc2, 0xb3, 0x14, 0x21,
	0x6b, 0x8b, 0x00, 0xd3, 0xb6, 0x7f, 0xaa, 0x8b, 0x99, 0xb2, 0x22, 0xab, 0xc2, 0xa6, 0x7d, 0x06,
	0x7c, 0x49, 0x1f, 0xa5, 0x61, 0xd3, 0x30, 0xdb, 0xd1, 0xd5, 0x37, 0x97, 0xd0, 0xd5, 0xaf, 0x06,
	0x75, 0xf5, 0x43, 0xc6, 0x2d, 0x6e, 0x92, 0xda, 0x56, 0x85, 0x14, 0x05, 0xa8, 0x24, 0x2b, 0xfd,
	0xc2, 0x23, 0xc0, 0xe0, 0xbb, 0x8f, 0x1e, 0x4a, 0x96, 0x22, 0x11, 0x16, 0x54, 0x92, 0xc8, 0x85,
	0xd5, 0x53, 0x95, 0xa0, 0x16, 0x9f, 0x48, 0x37, 0xfa, 0xaa, 0xa8, 0xe3, 0x8e, 0xd1, 0x53, 0xbf,
	0x32, 0x59, 0x6c, 0xc8, 0x8f, 0xd9, 0x7b, 0x0b, 0x8d, 0xc8, 0x2a, 0x65, 0x39, 0xe3, 0xce, 0x1a,
	0xf3, 0xf6, 0x12, 0x6b, 0xcc, 0x37, 0x82, 0x6b, 0xcc, 0x77, 0xd9, 0x55, 0x3f, 0x4f, 0x97, 0x27,
	0x16, 0xb2, 0xf2, 0x61, 0xd3, 0x16, 0x08, 0xbe, 0xa5, 0x05, 0xd0, 0xb0, 0x69, 0x8f, 0x00, 0xeb,
	0x99, 0xb0, 0x13, 0x5c, 0xe4, 0x1d, 0xca, 0x99, 0x36, 0x30, 0xbe, 0xdd, 0xf2, 0xa5, 0x4f, 0xe0,
	0x1b, 0xd6, 0x2e, 0x48, 0x16, 0x33, 0x61, 0x12, 0xca, 0x98, 0x6a, 0x33, 0x43, 0x46, 0x25, 0x22,
	0xdb, 0xd2, 0x69, 0x15, 0x32, 0xed, 0x13, 0x50, 0x46, 0x0f, 0xa4, 0x6b, 0x9a, 0x20, 0x09, 0x23,
	0xdf, 0xea, 0x59, 0xab, 0x04, 0xb7, 0xa2, 0xe9, 0xc2, 0xfc, 0x11, 0xbb, 0xd1, 0x81, 0xc8, 0x6a,
	0x26, 0x44, 0xe1, 0xdc, 0x34, 0x51, 0xb3, 0x99, 0xca, 0xc7, 0x38, 0xa2, 0xdd, 0x52, 0xa6, 0x85,
	0xa1, 0x8e, 0x21, 0x69, 0xb2, 0x90, 0xe9, 0xe1, 0x90, 0x9f, 0x91, 0x89, 0x54, 0x67, 0x32, 0xc5,
	0xfc, 0xdc, 0x8a, 0xa5, 0x85, 0xf9, 0x70, 0x76, 0x9d, 0x26, 0xab, 0x90, 0x1e, 0x0e, 0x5a, 0xfb,
	0xab, 0x52, 0xe0, 0x6b, 0x77, 0x9d, 0x5b, 0xa3, 0xb3, 0xc6, 0x13, 0xfb, 0x30, 0x66, 0x84, 0x06,
	0xad, 0x1d, 0xa1, 0x68, 0x18, 0x73, 0xc0, 0x04, 0xf7, 0xcc, 0x14, 0x56, 0x4d, 0xc1, 0xb1, 0xe0,
	0xea, 0x03, 0xac, 0x64, 0x6e, 0xfd, 0xc2, 0x22, 0x4c, 0xe2, 0x9e, 0x99, 0x10, 0x41, 0x96, 0x16,
	0x71, 0x03, 0xf0, 0x23, 0x5f, 0xa1, 0xea, 0xb7, 0x73, 0xbf, 0x98, 0xa8, 0xd3, 0xd0, 0xb6, 0xd5,
	0x6f, 0xb2, 0x5c, 0x68, 0x61, 0xfc, 0x26, 0xbb, 0x58, 0xe6, 0xca, 0x16, 0x7e, 0x29, 0xe0, 0x12,
	0xe0, 0xe1, 0xf0, 0x07, 0x11, 0xf8, 0x0d, 0xe0, 0x5f, 0xcd, 0xe8, 0x44, 0x41, 0x8d, 0xaa, 0x68,
	0xf8, 0xa3, 0xfa, 0xd5, 0x4c, 0x9b, 0xf0, 0xaf, 0x66, 0xda, 0x20, 0x11, 0xf2, 0x61, 0xb2, 0xde,
	0xe3, 0x5c, 0x65, 0xef, 0x54, 0x7c, 0x0b, 0x83, 0x7e, 0xa1, 0xbb, 0x01, 0x76, 0xa7, 0xe0, 0x7b,
	0x38, 0xf8, 0xcb, 0x42, 0xcf, 0x76, 0x74, 0x96, 0xe9, 0xe7, 0x32, 0xf5, 0xca, 0x9d, 0x42, 0x30,
	0x6a, 0x48, 0x92, 0xa8, 0xf5, 0x2e, 0x0c, 0x1a, 0x54, 0x9d, 0xee, 0x69, 0xfb, 0xe4, 0xeb, 0x59,
	0x26, 0x54, 0xbe, 0x99, 0xcf, 0xb7, 0xe5, 0x99, 0x72, 0x0b, 0x3a, 0xa7, 0xd7, 0xa3, 0x3c, 0x68,
	0xd0, 0x18, 0x47, 0xf4, 0xfb, 0xa0, 0x4d, 0xf5, 0xca, 0xc8, 0xa4, 0xd5, 0x20, 0xfc, 0x51, 0xf3,
	0xca, 0xa8, 0x06, 0xab, 0x57, 0x46, 0x35, 0x40, 0x24, 0x7b, 0x9f, 0xf0, 0x31, 0x0a, 0x63, 0x77,
	0x73, 0x2b, 0xcd, 0x99, 0xc8, 0x6a, 0xad, 0x4e, 0x41, 0x1f, 0xa3, 0x68, 0x80, 0x96, 0x56, 0xef,
	0x12, 0x1b, 0xff, 0x71, 0x95, 0x5d, 0x39, 0x06, 0x05, 0x76, 0xbe, 0xc5, 0x2e, 0x24, 0x01, 0x37,
	0xd8, 0x5a, 0xa2, 0x4b, 0x53, 0xc8, 0xbd, 0x72, 0x7a, 0x22, 0x8d, 0x97, 0x81, 0x2d, 0x0c, 0xb7,
	0x7c, 0x93, 0x34, 0x91, 0x83, 0x3d, 0x1c, 0x27, 0xf3, 0x89, 0x34, 0x62, 0x26, 0x4b, 0xab, 0x92,
	0x67, 0x3a, 0xc5, 0x99, 0xca, 0x4b, 0xc3, 0x10, 0x85, 0xef, 0x5d, 0xfa, 0x30, 0x91, 0x8a, 0x31,
	0x1a, 0x3a, 0x82, 0xad, 0x9e, 0xec, 0x41, 0x26, 0x72, 0xf4, 0xe6, 0x4e, 0x35, 0xf6, 0x09, 0x98,
	0x02, 0x7a, 0x20, 0xd1, 0x8e, 0x61, 0x12, 0xdd, 0x58, 0x45, 0xec, 0xba, 0x89, 0x74, 0xdd, 0xbb,
	0xb1, 0x36, 0x8c, 0x77, 0xde, 0x86, 0x88, 0x82, 0x0c, 0x51, 0xf0, 0xfc, 0xb0, 0xbf, 0xe2, 0xf0,
	0x71, 0xca, 0xb1, 0x01, 0xea, 0xc1, 0x50, 0x0f, 0x1b, 0xa7, 0x13, 0xdb, 0x20, 0x4a, 0x78, 0xab,
	0x67, 0x98, 0xc5, 0x4d, 0x2f, 0xe1, 0x7d, 0x1a, 0xdd, 0xa4, 0xff, 0x4d, 0x84, 0x61, 0x0b, 0x03,
	0x87, 0x53, 0xbf, 0x13, 0x7a, 0x92, 0xc3, 0x68, 0x3c, 0x9e, 0xc8, 0x7a, 0xbc, 0x78, 0x7d, 0x38,
	0x64, 0xc2, 0x9f, 0xb2, 0xb7, 0x06, 0x68, 0xa2, 0x18, 0x17, 0x99, 0x41, 0x0b, 0x1a, 0x59, 0xcc,
	0x74, 0x5e, 0xc8, 0x63, 0xdd, 0xd4, 0xc1, 0x89, 0xc5, 0x10, 0x05, 0x7d, 0x27, 0x00, 0x13, 0x41,
	0x18, 0xa3, 0xdd, 0x1b, 0x67, 0x47, 0x6d, 0x19, 0x65, 0xa5, 0x51, 0x02, 0x23, 0xbb, 0x4e, 0x0c,
	0x06, 0x39, 0x98, 0x72, 0x43, 0x38, 0x11, 0x88, 0x51, 0x9e, 0x4f, 0xd8, 0x87, 0xee, 0xe5, 0xe3,
	0xa1, 0x4c, 0x4a, 0x63, 0x64, 0x9e, 0xc8, 0x7d, 0x73, 0x60, 0xf4, 0xd8, 0xc8, 0xa2, 0x50, 0x3a,
	0xdf, 0x3c, 0xb5, 0xd2, 0x1c, 0x4f, 0x54, 0xd1, 0xdc, 0xb7, 0x13, 0x93, 0xab, 0x5e, 0xc6, 0x67,
	0xec, 0x93, 0x15, 0x2f, 0x21, 0x82, 0xf4, 0x9b, 0x5c, 0xca, 0xff, 0x8a, 0xbd, 0x5f, 0xe6, 0xf2,
	0xeb, 0x99, 0x4c, 0xac, 0x4c, 0xf7, 0xcd, 0x17, 0x79, 0x59, 0x94, 0x22, 0x3b, 0xd6, 0x5f, 0xe3,
	0x17, 0x34, 0xdb, 0xa5, 0x81, 0x87, 0x5d, 0xdf, 0x96, 0xd3, 0xb2, 0x2b, 0x5c, 0xc1, 0x4f, 0xd9,
	0xc3, 0xe5, 0xad, 0x89, 0xfa, 0x5d, 0xf1, 0xaa, 0xee, 0x72, 0xf6, 0xde, 0x52, 0xcb, 0xd9, 0xb7,
	0xc3, 0xcb, 0x59, 0x3a, 0x6f, 0xc0, 0x84, 0xb2, 0x9b, 0xd6, 0xf2, 0xb7, 0x0d, 0xb7, 0xe6, 0x0d,
	0x07, 0xb5, 0xe4, 0x6f, 0x9f, 0xda, 0xf8, 0xa7, 0x75, 0x76, 0x79, 0xbf, 0xb4, 0x89, 0x9e, 0x9e,
	0xc7, 0x34, 0x7a, 0x0e, 0xed, 0x3e, 0xbb, 0x36, 0xc3, 0xbd, 0x89, 0x22, 0x7b, 0xf2, 0xb5, 0x98,
	0xd6, 0x91, 0x8d, 0x0e, 0x8a, 0xdb, 0xab, 0x5a, 0x08, 0x71, 0x6b, 0x01, 0xa6, 0xbd, 0x6d, 0xa8,
	0x28, 0xb0, 0x2b, 0x3b, 0xaf, 0xd6, 0xc3, 0x61, 0x72, 0xe9, 0x62, 0xc4, 0x9f, 0x05, 0x39, 0xdc,
	0xfa, 0xe0, 0xd6, 0xd2, 0x87, 0x7e, 0x0e, 0xd9, 0x37, 0x47, 0xb8, 0xad, 0xd6, 0xbb, 0xb4, 0x18,
	0x8d, 0x5b, 0x1f, 0xc2, 0x14, 0x71, 0x6f, 0x43, 0x26, 0x90, 0x03, 0x6a, 0xd5, 0x8a, 0xdc, 0x6a,
	0xbf, 0x38, 0x75, 0x0e, 0x6f, 0xc8, 0x04, 0x9c, 0xc0, 0x00, 0x4d, 0x1c, 0xe1, 0x22, 0x33, 0xfe,
	0x0b, 0x76, 0x6f, 0xaa, 0x72, 0x35, 0x15, 0x19, 0x7e, 0xe7, 0x56, 0x8a, 0xcc, 0x87, 0x18, 0x48,
	0xbb, 0xfb, 0x3d, 0xe0, 0x8b, 0xec, 0xf8, 0x21, 0x7b, 0x77, 0x91, 0x0d, 0xdd, 0x03, 0xbe, 0x8c,
	0x2d, 0xff, 0x29, 0xbb, 0x5d, 0xbd, 0x0a, 0xad, 0xee, 0xe2, 0xc9, 0x99, 0xc8, 0x4a, 0xd7, 0x54,
	0xce, 0x05, 0x0f, 0x58, 0xf0, 0x1d, 0x76, 0x37, 0xce, 0x12, 0x37, 0xbd, 0xc0, 0x2a, 0xea, 0xc0,
	0x6e, 0x7d, 0x43, 0x07, 0xf6, 0xda, 0x02, 0x07, 0x06, 0x62, 0xc2, 0xed, 0xc6, 0x75, 0x61, 0x74,
	0xff, 0x6d, 0x20, 0xc5, 0x70, 0xcd, 0x4d, 0xd2, 0xf4, 0xdb, 0xc0, 0x2e, 0x8e, 0x6f, 0xd3, 0xdc,
	0x8b, 0xca, 0xcd, 0x7c, 0x4e, 0x7c, 0xcc, 0xbe, 0x69, 0x9c, 0x8f, 0xf7, 0xc6, 0x8b, 0x0d, 0xf9,
	0x31, 0x7b, 0x6f, 0xa1, 0x11, 0xf1, 0xd3, 0xcb, 0x19, 0xc3, 0xcc, 0x78, 0xa6, 0xac, 0xc8, 0xfc,
	0x38, 0x74, 0x0e, 0x99, 0x42, 0x30, 0xcd, 0x93, 0x24, 0x71, 0xa4, 0x5d, 0x98, 0xdf, 0x62, 0x97,
	0x26, 0x52, 0x8d, 0x27, 0x95, 0x03, 0xf4, 0x29, 0x7e, 0x97, 0x31, 0xf7, 0x8b, 0x38, 0x2e, 0x82,
	0xc0, 0x75, 0xcf, 0xdd, 0x75, 0xce, 0x1f, 0xf9, 0x14, 0x5c, 0xf7, 0xbc, 0xb9, 0xce, 0x79, 0x21,
	0x82, 0x40, 0xdd, 0x5d, 0x2e, 0x5f, 0xe0, 0xca, 0xda, 0x39, 0x1f, 0x0a, 0x41, 0xdd, 0x49, 0x92,
	0x38, 0x9d, 0x2e, 0x0c, 0x79, 0x3d, 0x27, 0x79, 0xb9, 0x70, 0x0b, 0x85, 0x20, 0xaf, 0xe7, 0x9d,
	0xbc, 0x5c, 0xb0, 0xa5, 0x0b, 0x63, 0x7c, 0xcb, 0x05, 0x2c, 0x44, 0x9e, 0x48, 0xdf, 0xb2, 0xf7,
	0x7d, 0x7c, 0xab, 0x4b, 0x60, 0x7c, 0xab, 0x0b, 0x92, 0xd0, 0x4b, 0x98, 0x84, 0xb9, 0x54, 0x9f,
	0x49, 0x23, 0xb2, 0xec, 0xa8, 0x34, 0x67, 0xea, 0x4c, 0x64, 0xbb, 0xf9, 0x33, 0x9d, 0xdb, 0x49,
	0xf5, 0xa6, 0x37, 0x46, 0xe3, 0x4c, 0x18, 0xa6, 0x68, 0xfc, 0x65, 0xc0, 0x84, 0xcc, 0xc6, 0x3b,
	0x46, 0xca, 0x5e, 0xf9, 0x2e, 0x0a, 0x33, 0x64, 0x82, 0x5f, 0x29, 0xc6, 0x69, 0x12, 0x91, 0x59,
	0x64, 0xb6, 0xf1, 0x6f, 0x97, 0xd9, 0x1a, 0xee, 0xb9, 0xaa, 0xa6, 0xe9, 0x73, 0xb5, 0xd0, 0x51,
	0x0b, 0x9c, 0xbd, 0x04, 0x15, 0xf0, 0x1a, 0x01, 0x7f, 0xc3, 0x92, 0x2a, 0xad, 0x96, 0x4c, 0x4e,
	0x0f, 0xd4, 0x69, 0xbe, 0xc7, 0x36, 0x32, 0x61, 0x25, 0x6d, 0x54, 0xdc, 0x73, 0x60, 0xc4, 0x6c,
	0xbe, 0x2d, 0xcf, 0x64, 0xa6, 0x67, 0xb2, 0x7a, 0x11, 0xb2, 0x84, 0x25, 0xff, 0x92, 0xdd, 0x5f,
	0x6c, 0x45, 0xb4, 0xc3, 0x92, 0xd6, 0xee, 0xcd, 0xb2, 0x95, 0xb5, 0xda, 0xc5, 0x0f, 0x50, 0xbd,
	0x90, 0x08, 0x30, 0xfc, 0x33, 0x76, 0xab, 0x8f, 0x12, 0xf9, 0x10, 0x61, 0x41, 0xfa, 0x17, 0x65,
	0xe1, 0x34, 0xf6, 0x71, 0xb3, 0xc4, 0x4d, 0xcb, 0x44, 0xa6, 0x7b, 0x52, 0xcf, 0x32, 0x51, 0x4c,
	0x9b, 0x76, 0x71, 0x42, 0x62, 0x85, 0x2b, 0x40, 0xfa, 0x2f, 0x6f, 0x4d, 0x64, 0xc6, 0x8a, 0x57,
	0xc1, 0x98, 0xb3, 0x51, 0x43, 0xfc, 0x78, 0xd7, 0x8b, 0x8e, 0x45, 0x66, 0xfc, 0x80, 0xbd, 0xb3,
	0xc0, 0x84, 0x48, 0x8e, 0x65, 0x4c, 0x37, 0xfe, 0xf1, 0x1d, 0xf6, 0xf2, 0x71, 0x39, 0xd5, 0xa5,
	0x39, 0xd1, 0xc2, 0xa4, 0xe7, 0x83, 0xb8, 0x3b, 0x88, 0xeb, 0x8f, 0xea, 0x9b, 0x4d, 0x1f, 0xe5,
	0x54, 0x9b, 0xc7, 0xd0, 0x5a, 0x7e, 0x64, 0xc7, 0x0d, 0xf8, 0x36, 0x7b, 0x33, 0x4a, 0x92, 0x39,
	0x60, 0xd8, 0x08, 0xe4, 0x98, 0xdb, 0xe0, 0xeb, 0x5e, 0x39, 0x6d, 0xe6, 0x22, 0x9b, 0xff, 0xae,
	0x9e, 0x0a, 0x82, 0x1c, 0xc8, 0xb1, 0x10, 0x4e, 0x86, 0x7b, 0x94, 0xc7, 0x4f, 0x8c, 0x90, 0x73,
	0x3d, 0xa3, 0x53, 0xaa, 0x1b, 0xe8, 0x03, 0x16, 0x20, 0x43, 0xe3, 0x2c, 0x19, 0xf8, 0x0b, 0xac,
	0x30, 0x0c, 0x0f, 0xe9, 0x42, 0x16, 0xdb, 0xaa, 0x48, 0xca, 0xa2, 0xa8, 0xc7, 0x79, 0x9f, 0xc0,
	0x30, 0x7c, 0x17, 0x24, 0xa3, 0x36, 0x4c, 0x62, 0xc0, 0x57, 0x4f, 0x85, 0x55, 0xc9, 0x51, 0xf3,
	0x26, 0x94, 0xfb, 0xed, 0x71, 0x5d, 0x02, 0xb7, 0xc7, 0x75, 0x41, 0x32, 0xe4, 0xc2, 0x24, 0xb4,
	0x67, 0x0e, 0x42, 0x22, 0x7b, 0xf2, 0xf5, 0xcc, 0xcb, 0x41, 0x98, 0x66, 0x05, 0x6e, 0x90, 0xa9,
	0x64, 0x7d, 0xdc, 0x02, 0xda, 0x33, 0xce, 0x52, 0x59, 0x3f, 0x6c, 0x45, 0xe4, 0x43, 0xb0, 0x22,
	0xb7, 0x5a, 0xf2, 0x21, 0x58, 0x93, 0x46, 0x3e, 0x44, 0xab, 0xf2, 0x5a, 0x4b, 0x3e, 0x44, 0xeb,
	0xf2, 0x37, 0x17, 0xd8, 0x93, 0x89, 0x28, 0x36, 0x7f, 0x2e, 0xcd, 0x34, 0x53, 0xb9, 0xfc, 0x52,
	0x18, 0x25, 0xdc, 0xb6, 0xfd, 0xdd, 0x54, 0xe2, 0x26, 0x2f, 0x99, 0x3e, 0x06, 0x05, 0x7d, 0xaa,
	0x32, 0x0c, 0xe8, 0x09, 0xfb, 0x4c, 0xcc, 0xeb, 0x43, 0x0e, 0xe4, 0xb1, 0x76, 0x87, 0x0e, 0xf8,
	0xc5, 0xc2, 0x8b, 0xc9, 0x8c, 0xff, 0xfd, 0x05, 0xb6, 0xfb, 0x42, 0x72, 0x22, 0xeb, 0x93, 0x17,
	0x97, 0x21, 0xf6, 0x71, 0x7c, 0x8d, 0x2f, 0x4e, 0x32, 0x79, 0x2c, 0xcc, 0x58, 0xda, 0x1d, 0x5d,
	0xe6, 0x55, 0x68, 0x31, 0x4c, 0xc2, 0x1c, 0x16, 0x24, 0xe8, 0x47, 0xaf, 0x51, 0x03, 0x58, 0x4c,
	0x4d, 0xfb, 0x13, 0xd3, 0xa1, 0x4c, 0xf4, 0x74, 0x2a, 0xf3, 0xd4, 0xad, 0x4d, 0xdd, 0xf2, 0x65,
	0xb1, 0x21, 0x2c, 0xa6, 0x16, 0x1a, 0x91, 0xa5, 0xce, 0x72, 0xc6, 0xfc, 0x11, 0xbb, 0x31, 0xf6,
	0x0d, 0xbc, 0x9d, 0x8b, 0xa3, 0x6a, 0xdf, 0x89, 0x5b, 0x0d, 0x85, 0x28, 0x90, 0xf1, 0x01, 0x98,
	0xac, 0x93, 0x62, 0x34, 0x2c, 0x44, 0x71, 0x1b, 0x2f, 0x2d, 0xc8, 0x2d, 0x9f, 0x7a, 0x38, 0xce,
	0xdc, 0x1d, 0x8c, 0x2c, 0xa9, 0x82, 0x5c, 0x9d, 0xff, 0x21, 0xc9, 0x7f, 0x83, 0xe4, 0x7f, 0x18,
	0xc8, 0xff, 0xb0, 0x93, 0xff, 0x3b, 0x24, 0xff, 0x0e, 0x07, 0xd7, 0x54, 0xb7, 0x76, 0x94, 0x9f,
	0x35, 0x13, 0xab, 0x5b, 0x79, 0x05, 0x39, 0xf0, 0x26, 0x21, 0x9c, 0xac, 0xc5, 0xa2, 0x3c, 0x3c,
	0x9b, 0x6a, 0x5a, 0xa4, 0xc5, 0xb9, 0x65, 0x59, 0x88, 0x82, 0x67, 0x13, 0x80, 0xc9, 0xd2, 0x2c,
	0x46, 0xe3, 0xa6, 0x89, 0xfc, 0x8c, 0x78, 0x8b, 0x07, 0x7e, 0xd3, 0x04, 0x05, 0x71, 0xd3, 0x04,
	0x05, 0xc8, 0xf2, 0xab, 0x4f, 0xc0, 0xec, 0xed, 0x8e, 0xfa, 0x2a, 0x8d, 0xc8, 0xfc, 0xf0, 0x6d,
	0x0a, 0x70, 0x6b, 0xae, 0x01, 0x0b, 0x98, 0xbd, 0xe3, 0x2c, 0x59, 0x71, 0x2d, 0xb0, 0xc2, 0x8d,
	0x81, 0xad, 0x90, 0xd6, 0xfe, 0xa9, 0xb7, 0x2b, 0xfc, 0x8b, 0xf1, 0x28, 0x8f, 0x1b, 0x03, 0x23,
	0x1c, 0x79, 0x71, 0x3e, 0x68, 0x03, 0xed, 0x50, 0x9d, 0x91, 0xf6, 0xa5, 0xc8, 0x94, 0x1b, 0x7d,
	0x55, 0x84, 0xa3, 0xda, 0x68, 0x1b, 0xb7, 0x80, 0x76, 0x88, 0xb3, 0x74, 0xa3, 0xed, 0xb0, 0x15,
	0x8e, 0x0f, 0xd4, 0x0d, 0x0d, 0xef, 0xdf, 0xcd, 0xf7, 0xf0, 0x46, 0x39, 0x35, 0x18, 0x79, 0x33,
	0x1f, 0xe4, 0x20, 0x7f, 0x31, 0x96, 0xb9, 0xdd, 0x37, 0xdb, 0xa6, 0x1c, 0x63, 0x14, 0xd1, 0xbf,
	0x9c, 0xef, 0xe1, 0x90, 0x7f, 0x17, 0x23, 0x2f, 0xe9, 0x83, 0x1c, 0x3f, 0x61, 0x1f, 0x64, 0xb0,
	0x3e, 0xd8, 0x3f, 0x7d, 0x72, 0xe6, 0xce, 0xda, 0xda, 0xd1, 0xa6, 0xf1, 0x93, 0x6e, 0xfa, 0xdd,
	0x84, 0x2b, 0x9f, 0x09, 0x9b, 0x4c, 0xfc, 0x9b, 0xfc, 0x95, 0xae, 0xe1, 0xbf, 0x61, 0x8f, 0x56,
	0xb1, 0x27, 0x7b, 0x01, 0x56, 0xbe, 0x0e, 0xee, 0x27, 0x55, 0xcd, 0x52, 0xe8, 0x20, 0x13, 0xf9,
	0xd6, 0x44, 0xe4, 0x63, 0xf9, 0x58, 0x14, 0x32, 0xdd, 0xcf, 0x6b, 0xd7, 0x76, 0x28, 0x8b, 0x32,
	0xb3, 0x7e, 0x03, 0xc1, 0x4a, 0xd7, 0xc0, 0xfd, 0xac, 0x62, 0x4f, 0x36, 0x1a, 0xac, 0x7c, 0x1d,
	0x2c, 0x9b, 0x27, 0xfa, 0x79, 0x7d, 0xcd, 0x53, 0x51, 0x6c, 0x66, 0x56, 0x1a, 0x99, 0x76, 0xaf,
	0xf1, 0xbb, 0x12, 0x96, 0xb4, 0x86, 0xe5, 0xec, 0x72, 0x96, 0x64, 0x1f, 0xc3, 0x0a, 0x57, 0xf0,
	0x09, 0xfb, 0xd0, 0xbd, 0x04, 0x6d, 0xdd, 0xee, 0xb6, 0x4a, 0xf7, 0xb4, 0x0d, 0xdf, 0xb4, 0xdf,
	0x02, 0xb1, 0xea, 0x65, 0x7c, 0xc6, 0x3e, 0x59, 0xf1, 0x12, 0xb2, 0x8d, 0xe2, 0x9b, 0x5c, 0x0a,
	0xf3, 0x57, 0x7d, 0xce, 0x55, 0xeb, 0xca, 0xdd, 0xe9, 0x4c, 0x24, 0xd6, 0x6f, 0x8c, 0x1e, 0xb4,
	0xe1, 0xbf, 0x60, 0xf7, 0x86, 0x78, 0xb2, 0x41, 0x7a, 0xa1, 0x1d, 0xff, 0x0b, 0xf6, 0xc0, 0x2f,
	0x13, 0xf7, 0xcd, 0x0e, 0x1e, 0x11, 0xb6, 0x9b, 0xbb, 0x7d, 0x52, 0xfb, 0xa7, 0x1d, 0xa5, 0xe7,
	0xf7, 0x47, 0x2f, 0x6d, 0x0f, 0xe3, 0x69, 0x59, 0x5b, 0xb2, 0x2b, 0x7a, 0xa5, 0x6b, 0xf8, 0xef,
	0x2f, 0xb0, 0x67, 0xfe, 0x82, 0xa7, 0xa2, 0x00, 0x31, 0x7a, 0x88, 0x87, 0x6f, 0xc8, 0xf4, 0x58,
	0x6f, 0x3e, 0x85, 0x2e, 0xa6, 0xac, 0x30, 0x73, 0xa7, 0x3c, 0x71, 0xf6, 0x15, 0x53, 0xff, 0x60,
	0x8e, 0x27, 0xaa, 0xa8, 0x17, 0xaa, 0x4d, 0x57, 0x72, 0x1b, 0xaa, 0x5f, 0x6c, 0xa6, 0xfc, 0x9f,
	0x2f, 0xb0, 0x5f, 0xbe, 0xd0, 0x1c, 0xc9, 0x7e, 0xee, 0x17, 0x9f, 0x31, 0xee, 0xaa, 0x70, 0xaf,
	0x22, 0xdc, 0x8e, 0xc8, 0xd1, 0x63, 0xbf, 0xc5, 0x88, 0x82, 0xb8, 0xe2, 0xa4, 0x00, 0xd6, 0x69,
	0xcb, 0x6f, 0x31, 0xea, 0x12, 0x1b, 0x7f, 0xbd, 0xc6, 0xd6, 0xb6, 0x26, 0x72, 0xaa, 0xdd, 0x46,
	0x95, 0xf9, 0x79, 0x84, 0xe6, 0xdb, 0xde, 0x65, 0xd4, 0xda, 0x39, 0xb3, 0xb6, 0x70, 0xe7, 0xcc,
	0xd5, 0x45, 0x3b, 0x67, 0xae, 0x2d, 0xd8, 0x39, 0xf3, 0x4a, 0x60, 0xe7, 0x0c, 0x68, 0x4e, 0xfc,
	0xda, 0x04, 0x54, 0xae, 0x0f, 0xc2, 0xa2, 0xdb, 0x25, 0x87, 0x69, 0x0d, 0x58, 0xa0, 0xe6, 0x8c,
	0xb2, 0x24, 0x28, 0xb2, 0xc0, 0x8a, 0xdf, 0x64, 0x17, 0x8d, 0x2e, 0xeb, 0x1d, 0x44, 0x2e, 0x01,
	0x2d, 0x84, 0x3f, 0x48, 0xe4, 0xa3, 0x01, 0x30, 0xec, 0xad, 0x8b, 0x6a, 0xc7, 0x10, 0xfe, 0xc6,
	0xb0, 0x37, 0xac, 0x65, 0x9b, 0x58, 0x45, 0x9d, 0xc6, 0x0f, 0x88, 0x35, 0xbe, 0x68, 0xf8, 0xaa,
	0x94, 0x79, 0x52, 0x7d, 0xb0, 0xda, 0x06, 0xf1, 0x03, 0x62, 0x0a, 0x90, 0x58, 0x43, 0x9f, 0xa8,
	0xca, 0xfb, 0x22, 0x57, 0xd5, 0x16, 0x9f, 0x3a, 0x8d, 0xe7, 0x78, 0xf8, 0xdf, 0x64, 0x91, 0xde,
	0xc2, 0xdc, 0x59, 0x1f, 0xf3, 0xe2, 0x40, 0x9a, 0xad, 0x79, 0x92, 0x55, 0xef, 0x0a, 0x5b, 0x98,
	0x7b, 0x69, 0xdf, 0xa4, 0xc9, 0x62, 0xba, 0x87, 0xc3, 0x3d, 0xe6, 0xd8, 0xc3, 0xf6, 0x4f, 0x5d,
	0x86, 0x7e, 0x33, 0x77, 0x0b, 0x84, 0x7b, 0x6c, 0x01, 0x74, 0x33, 0x77, 0x8f, 0x08, 0xed, 0x1e,
	0xbb, 0xbb, 0xd2, 0xee, 0xb1, 0xb7, 0xe2, 0xbb, 0xc7, 0xc2, 0x87, 0x20, 0xdd, 0xfb, 0x06, 0x87,
	0x20, 0xbd, 0x3d, 0x78, 0x08, 0x12, 0x67, 0x2f, 0xe1, 0xde, 0x76, 0xb7, 0xbe, 0xc5, 0xdf, 0xf0,
	0xec, 0xea, 0x9d, 0xec, 0x6e, 0x1d, 0x5b, 0xa7, 0xe1, 0xb9, 0xe0, 0xd1, 0xca, 0x89, 0x76, 0xbb,
	0xbe, 0xfd, 0xe6, 0x6c, 0x8a, 0xc1, 0x73, 0xa1, 0x69, 0xba, 0x39, 0xbb, 0x8b, 0xf7, 0x37, 0x9a,
	0xde, 0x5f, 0x7a, 0xa3, 0xe9, 0xf7, 0x62, 0x1b, 0x4d, 0x03, 0xbb, 0x73, 0x1e, 0xac, 0xb4, 0x3b,
	0xe7, 0xfb, 0xf1, 0xdd, 0x39, 0xff, 0xc2, 0xd9, 0xda, 0xa1, 0x48, 0xd5, 0xb9, 0x37, 0xf8, 0xff,
	0xe4, 0x0d, 0x22, 0xfb, 0x5e, 0xd7, 0xbf, 0xd1, 0xbe, 0xd7, 0xeb, 0xc3, 0xfb, 0x5e, 0x6f, 0xb3,
	0xef, 0x9e, 0x88, 0x42, 0x82, 0x60, 0xf4, 0x93, 0x7e, 0x9d, 0x86, 0xba, 0x56, 0xbf, 0xc9, 0xd4,
	0xdf, 0xc2, 0xf0, 0xd3, 0x78, 0x59, 0x58, 0xbf, 0xd6, 0xf3, 0x9f, 0x14, 0x35, 0x08, 0x7e, 0x1a,
	0x5f, 0xa7, 0xe8, 0x27, 0x45, 0x6d, 0x14, 0x5a, 0xb6, 0x41, 0x8e, 0x6c, 0xb5, 0xf7, 0xa4, 0x0d,
	0xe2, 0x2e, 0x5d, 0x0a, 0x50, 0xaf, 0xd0, 0x23, 0x22, 0xb3, 0xda, 0xe8, 0x1b, 0xcc, 0x6a, 0xaf,
	0x0f, 0xce, 0x6a, 0xef, 0xb3, 0xf5, 0xd6, 0x5e, 0xf1, 0x43, 0x51, 0x05, 0x68, 0x7b, 0xb8, 0xff,
	0x64, 0xb5, 0x85, 0x11, 0x4f, 0x12, 0xe4, 0x30, 0xa2, 0xd6, 0xc1, 0x0f, 0xc5, 0x73, 0xef, 0x53,
	0x42, 0x14, 0x46, 0xd4, 0xfa, 0x30, 0xf1, 0x2f, 0x31, 0xba, 0x3f, 0x43, 0xde, 0x5d, 0x7a, 0x86,
	0x7c, 0x2b, 0x36, 0x43, 0xe2, 0xe7, 0x98, 0xbf, 0x11, 0x89, 0xcc, 0xed, 0x8e, 0x92, 0x59, 0x5a,
	0x9d, 0x2e, 0xdd, 0x41, 0xdd, 0xe7, 0x98, 0x14, 0x21, 0x1e, 0x25, 0xc0, 0xe0, 0xfb, 0xa2, 0x0a,
	0x35, 0x2e, 0xa0, 0x5d, 0x1f, 0x75, 0xd0, 0x23, 0x30, 0x96, 0xde, 0x05, 0xe9, 0x51, 0x07, 0x41,
	0x12, 0xc6, 0x47, 0x52, 0x1d, 0x5d, 0xe3, 0xbc, 0x4f, 0x9d, 0x76, 0x73, 0x0f, 0x39, 0xa4, 0xc6,
	0x79, 0x9d, 0x16, 0x06, 0x75, 0x3c, 0x31, 0x22, 0x99, 0xcc, 0xfd, 0x0c, 0xbe, 0x0d, 0x52, 0xc9,
	0x6f, 0x51, 0xe9, 0x11, 0x50, 0xc7, 0x1e, 0x48, 0xb7, 0xa8, 0x04, 0x49, 0xfc, 0x9c, 0x88, 0x38,
	0x09, 0x2c, 0xe2, 0x81, 0x3f, 0x1d, 0xab, 0x83, 0xe3, 0x56, 0xaf, 0x0e, 0x46, 0x9c, 0x50, 0x90,
	0xc3, 0xcf, 0x06, 0x95, 0xad, 0x66, 0xd8, 0xf7, 0xfd, 0x67, 0x83, 0x35, 0x82, 0x9f, 0x0d, 0xd6,
	0x29, 0x12, 0xe1, 0xec, 0xa0, 0x30, 0xb7, 0x5a, 0x99, 0x4c, 0x72, 0xf5, 0x55, 0x29, 0x7d, 0x08,
	0xb3, 0x01, 0xdc, 0x0c, 0xe0, 0x13, 0x24, 0x48, 0xd9, 0x06, 0xd1, 0xca, 0x39, 0xa3, 0x43, 0x39,
	0x06, 0xff, 0xf5, 0xd0, 0xcf, 0x13, 0x14, 0xac, 0x77, 0xf3, 0x57, 0x00, 0x09, 0x37, 0xf6, 0x89,
	0x90, 0x07, 0x7f, 0xb4, 0x92, 0x07, 0xff, 0x28, 0xea, 0xc1, 0x71, 0x3c, 0x89, 0xd4, 0x7f, 0xeb,
	0x02, 0xd2, 0xe7, 0x63, 0x3f, 0x9e, 0x28, 0x88, 0xe3, 0x89, 0x02, 0x24, 0xa8, 0xd8, 0x27, 0x5a,
	0x79, 0xe2, 0xc9, 0x26, 0x9f, 0x76, 0xf2, 0xc4, 0xc3, 0x4d, 0x68, 0x9e, 0xf5, 0xf9, 0x26, 0x3f,
	0xec, 0xe4, 0x49, 0x8f, 0x90, 0xb1, 0xda, 0x8a, 0x0c, 0x3b, 0xcf, 0x67, 0xfe, 0xd9, 0x54, 0x00,
	0xb6, 0x7a, 0x95, 0x20, 0xc1, 0xb6, 0x36, 0x08, 0x79, 0x9c, 0x68, 0x5d, 0x58, 0xac, 0x93, 0x0b,
	0x96, 0x35, 0x00, 0xe4, 0x51, 0x27, 0x48, 0xc8, 0xab, 0x0d, 0xd6, 0x79, 0x60, 0x3d, 0x7e, 0x4c,
	0xf2, 0xa8, 0xea, 0x51, 0x27, 0x48, 0x8c, 0xa9, 0x0d, 0x6e, 0xfc, 0xfb, 0x25, 0x76, 0x75, 0x77,
	0x3a, 0x2d, 0xf3, 0x73, 0xd9, 0x34, 0x70, 0xf0, 0x65, 0x23, 0x73, 0xd8, 0x42, 0x99, 0xf3, 0x72,
	0x48, 0xe6, 0x7c, 0xc0, 0xae, 0x2b, 0xda, 0xca, 0xd8, 0xbd, 0x9d, 0x64, 0xea, 0x13, 0x30, 0xb5,
	0xf5, 0x40, 0x22, 0xa1, 0xc2, 0x24, 0x0c, 0xb8, 0x36, 0x81, 0x11, 0x69, 0xaf, 0xaa, 0x42, 0x14,
	0xb8, 0xbe, 0x00, 0x4c, 0xb4, 0x56, 0x8c, 0xee, 0x95, 0xe5, 0x37, 0x3a, 0xad, 0x07, 0xca, 0xf2,
	0x3b, 0x9d, 0xba, 0x65, 0x91, 0xad, 0x4e, 0xd7, 0x03, 0x65, 0x91, 0xbd, 0x4e, 0x81, 0x29, 0x87,
	0xaf, 0x34, 0xe5, 0xdc, 0x88, 0x4f, 0x39, 0x5d, 0x49, 0x7c, 0x73, 0x49, 0x49, 0xfc, 0x6a, 0x58,
	0x12, 0x6f, 0xfc, 0xef, 0x65, 0x76, 0xf9, 0xa8, 0x34, 0x63, 0x69, 0xce, 0x07, 0xd2, 0xb7, 0x32,
	0x90, 0xe8, 0x7a, 0x61, 0x6d, 0xc1, 0x7a, 0xe1, 0x6a, 0x60, 0xbd, 0x40, 0x8f, 0x5e, 0xb8, 0xb6,
	0xe0, 0xe8, 0x85, 0x57, 0x02, 0x47, 0x2f, 0xe0, 0x49, 0x7d, 0xd5, 0x81, 0x01, 0xc7, 0x6a, 0x2a,
	0x0f, 0xb4, 0xaa, 0xbf, 0x4d, 0x0b, 0x51, 0xee, 0xa4, 0xbe, 0x1e, 0x4c, 0x3b, 0x7e, 0x84, 0xee,
	0x1f, 0x1f, 0xc7, 0x97, 0x3e, 0x3e, 0xee, 0x46, 0xec, 0xf8, 0x38, 0xce, 0x5e, 0x2a, 0x9a, 0x03,
	0xd4, 0xf0, 0x37, 0xb6, 0x49, 0xfb, 0xd0, 0xb4, 0x3a, 0x5d, 0x47, 0x21, 0x6e, 0x45, 0xa2, 0x10,
	0xaf, 0x75, 0xa2, 0x10, 0x3d, 0x4d, 0x3c, 0x5a, 0x5a, 0x13, 0xbf, 0xbe, 0x42, 0xd4, 0xe0, 0xf6,
	0x4a, 0x13, 0xc0, 0x1b, 0xcb, 0x4f, 0x00, 0x77, 0x96, 0x9c, 0x00, 0xde, 0x8c, 0x4c, 0x00, 0xff,
	0x70, 0x91, 0x5d, 0xdb, 0x92, 0x59, 0x66, 0x8d, 0xc8, 0x8b, 0x59, 0x26, 0xce, 0xbf, 0x7d, 0xfd,
	0x76, 0xe6, 0x81, 0xbb, 0x8c, 0x25, 0x32, 0xcb, 0x8e, 0x74, 0x69, 0x92, 0x6a, 0x26, 0x20, 0x08,
	0x1e, 0x25, 0x51, 0xa7, 0xc8, 0x6c, 0xd0, 0x41, 0xa1, 0x2e, 0xa9, 0xce, 0xb5, 0x21, 0xdf, 0xb0,
	0x36, 0x80, 0x8b, 0xbf, 0xfa, 0x04, 0x99, 0x12, 0xda, 0x60, 0xa8, 0x7f, 0xae, 0xaf, 0xd4, 0x3f,
	0xaf, 0x2f, 0xdf, 0x3f, 0xf9, 0x92, 0xfd, 0xf3, 0x46, 0xa4, 0x7f, 0xfe, 0xeb, 0x3a, 0xbb, 0x78,
	0x94, 0xa9, 0xf4, 0xfc, 0x0b, 0xb6, 0x17, 0x7e, 0x2a, 0xcf, 0x88, 0x5d, 0x2e, 0xa0, 0x65, 0xeb,
	0x13, 0x79, 0xaa, 0x24, 0x9e, 0x3f, 0xe0, 0x7e, 0x92, 0x9e, 0x48, 0x21, 0xcc, 0x1f, 0x92, 0xfb,
	0xee, 0xdf, 0xb8, 0xf9, 0x9e, 0xd8, 0xc2, 0x30, 0x74, 0x42, 0xd2, 0xa4, 0x3f, 0xf6, 0x70, 0xbe,
	0xcd, 0xde, 0xcc, 0xe6, 0xd3, 0xd9, 0x44, 0x27, 0x73, 0x2b, 0x77, 0xf3, 0x53, 0x05, 0x13, 0x12,
	0x6e, 0x17, 0x91, 0x26, 0x69, 0x3e, 0xa6, 0x1e, 0x36, 0xe2, 0x9f, 0xb3, 0xb7, 0x07, 0x0d, 0x48,
	0xe7, 0x5d, 0x6c, 0x88, 0x21, 0xa6, 0x72, 0xaa, 0xcd, 0x5e, 0x99, 0x64, 0x52, 0x55, 0x15, 0xf1,
	0x27, 0xf7, 0xf4, 0x19, 0x0c, 0x31, 0xf5, 0x50, 0x7a, 0x72, 0x4f, 0x98, 0xc5, 0xd3, 0x39, 0x75,
	0x1e, 0xbd, 0xf3, 0x9b, 0xfe, 0x74, 0xce, 0xb8, 0x09, 0x9e, 0xce, 0x19, 0xa7, 0x89, 0x9f, 0x5c,
	0x64, 0x86, 0x87, 0x47, 0xe3, 0xc6, 0x53, 0xf0, 0x09, 0x45, 0x55, 0x05, 0x7f, 0xfa, 0x4f, 0x9f,
	0xc1, 0xc3, 0xa3, 0x7b, 0x28, 0x3d, 0xfd, 0x27, 0xcc, 0xe2, 0x22, 0x1e, 0x4f, 0x07, 0xa1, 0xc5,
	0xf8, 0x03, 0xd3, 0x7b, 0x04, 0x7e, 0x92, 0xdf, 0x05, 0xe9, 0x81, 0xe9, 0x41, 0xd2, 0x85, 0xd6,
	0x8c, 0xee, 0xde, 0xcc, 0xed, 0x2a, 0xb4, 0xd6, 0xa3, 0x5c, 0x68, 0xad, 0x07, 0x13, 0x97, 0x1c,
	0xa3, 0xa1, 0xff, 0x4a, 0x5d, 0xa8, 0x5c, 0xcf, 0x26, 0x2a, 0x0b, 0x3d, 0x45, 0xe7, 0xa7, 0x87,
	0x8d, 0xa0, 0xff, 0x0e, 0x1a, 0x10, 0x4f, 0xbe, 0xd8, 0x10, 0xea, 0x94, 0xcb, 0xd2, 0x9a, 0x68,
	0x9d, 0x5c, 0xf8, 0x6f, 0xd8, 0x08, 0xea, 0x34, 0x68, 0x40, 0xc2, 0x83, 0x8b, 0x0d, 0xf9, 0x0e,
	0xbb, 0x3b, 0x36, 0x22, 0x2f, 0xb3, 0x68, 0x77, 0x77, 0xe1, 0xc3, 0x05, 0x56, 0x7c, 0x8f, 0x6d,
	0x0c, 0x5b, 0x90, 0xf0, 0xe2, 0x12, 0x96, 0xe0, 0x12, 0x73, 0x99, 0x18, 0x90, 0x9e, 0x55, 0x45,
	0xfc, 0x67, 0xd8, 0x1d, 0x18, 0x7a, 0x55, 0x07, 0xa2, 0x9f, 0x61, 0x07, 0x28, 0x18, 0x9d, 0x2a,
	0x3f, 0xcd, 0xc4, 0x74, 0x8a, 0x87, 0x28, 0x86, 0x6e, 0xda, 0xff, 0x37, 0xb9, 0x05, 0x66, 0xfc,
	0x80, 0xbd, 0xb3, 0xc0, 0x84, 0xfe, 0x37, 0xb9, 0x25, 0x4c, 0xfd, 0x49, 0xa1, 0x99, 0x3a, 0x95,
	0xc6, 0x47, 0xbf, 0xb3, 0xac, 0xf0, 0xae, 0xfb, 0x7e, 0xf5, 0x5f, 0x70, 0xc2, 0xbc, 0xfb, 0x2f,
	0x38, 0x61, 0x8e, 0xc4, 0x35, 0x07, 0x6d, 0xf0, 0x1c, 0x1b, 0xb7, 0x94, 0xf8, 0x5c, 0xfb, 0xaf,
	0x88, 0xfd, 0x0b, 0xb6, 0x0e, 0x8c, 0xa3, 0xb9, 0x0d, 0xd1, 0x17, 0x6c, 0x01, 0x6a, 0xe3, 0xf7,
	0x2f, 0xb1, 0x8b, 0xf8, 0x5f, 0x99, 0xce, 0xa5, 0xc3, 0xb7, 0xa1, 0x68, 0x47, 0xec, 0xb2, 0xcc,
	0x53, 0xb2, 0xb0, 0xad, 0x92, 0xd0, 0x56, 0xfe, 0x27, 0x95, 0x0f, 0x04, 0xe2, 0xb7, 0xd8, 0xa5,
	0x82, 0x7e, 0xb3, 0xee, 0x53, 0x18, 0x8d, 0xee, 0x7e, 0x91, 0x4e, 0x90, 0xfe, 0x6a, 0x6d, 0x7d,
	0xe9, 0xd5, 0xda, 0xf5, 0xc8, 0x6a, 0x6d, 0xe3, 0xef, 0x2e, 0xb1, 0xcb, 0x9f, 0x8b, 0x13, 0x2b,
	0x8b, 0xf3, 0xa5, 0xcf, 0xb7, 0xd2, 0x51, 0xfa, 0x27, 0x2b, 0xae, 0xad, 0x70, 0xb2, 0xe2, 0xd5,
	0xe8, 0xc9, 0x8a, 0xa4, 0x03, 0x5e, 0x1b, 0xec, 0x80, 0xaf, 0xf4, 0x3b, 0xe0, 0x1d, 0x76, 0x45,
	0x9e, 0xc1, 0x24, 0xd8, 0x1c, 0x1e, 0xdf, 0x00, 0xf8, 0xdf, 0x7e, 0xab, 0x44, 0xeb, 0xbf, 0xfd,
	0x52, 0x10, 0x4a, 0x69, 0xde, 0x4b, 0x56, 0xdf, 0xfd, 0x51, 0x08, 0x17, 0x5a, 0x4d, 0x92, 0x48,
	0xc1, 0x2e, 0x8c, 0x21, 0xfa, 0x3a, 0x38, 0x73, 0xd3, 0x87, 0xe8, 0xeb, 0x90, 0xcc, 0xbb, 0xec,
	0xaa, 0x6d, 0x05, 0x62, 0x5e, 0xf5, 0x21, 0xfa, 0x6e, 0xf8, 0xa5, 0x3d, 0x38, 0x6e, 0x2d, 0x3d,
	0x38, 0x5e, 0x8b, 0x0c, 0x8e, 0x93, 0x4b, 0xb8, 0xcd, 0xe2, 0x93, 0xff, 0x0b, 0x00, 0x00, 0xff,
	0xff, 0xc8, 0x94, 0x7b, 0x76, 0x5a, 0x7b, 0x00, 0x00,
}
