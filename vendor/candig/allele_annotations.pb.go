// Code generated by protoc-gen-go. DO NOT EDIT.
// source: candig/allele_annotations.proto

package candig

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// An AnalysisResult record holds the output of a prediction package such as
// SIFT on a specific allele.
type AnalysisResult struct {
	// The ID of the analysis record for this result
	AnalysisId string `protobuf:"bytes,1,opt,name=analysis_id,json=analysisId,proto3" json:"analysis_id,omitempty"`
	// The text-based result for this analysis
	Result string `protobuf:"bytes,2,opt,name=result,proto3" json:"result,omitempty"`
	// The numeric score for this analysis
	Score                int32    `protobuf:"varint,3,opt,name=score,proto3" json:"score,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AnalysisResult) Reset()         { *m = AnalysisResult{} }
func (m *AnalysisResult) String() string { return proto.CompactTextString(m) }
func (*AnalysisResult) ProtoMessage()    {}
func (*AnalysisResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_20274d9b6cf45d0c, []int{0}
}

func (m *AnalysisResult) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AnalysisResult.Unmarshal(m, b)
}
func (m *AnalysisResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AnalysisResult.Marshal(b, m, deterministic)
}
func (m *AnalysisResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AnalysisResult.Merge(m, src)
}
func (m *AnalysisResult) XXX_Size() int {
	return xxx_messageInfo_AnalysisResult.Size(m)
}
func (m *AnalysisResult) XXX_DiscardUnknown() {
	xxx_messageInfo_AnalysisResult.DiscardUnknown(m)
}

var xxx_messageInfo_AnalysisResult proto.InternalMessageInfo

func (m *AnalysisResult) GetAnalysisId() string {
	if m != nil {
		return m.AnalysisId
	}
	return ""
}

func (m *AnalysisResult) GetResult() string {
	if m != nil {
		return m.Result
	}
	return ""
}

func (m *AnalysisResult) GetScore() int32 {
	if m != nil {
		return m.Score
	}
	return 0
}

// An allele location record holds the location of an allele relative to a non -
// genomic coordinate system such as a CDS or protein and holds the reference
// and alternate sequence where appropriate
type AlleleLocation struct {
	// Relative start position of the allele in this coordinate system
	Start int32 `protobuf:"varint,1,opt,name=start,proto3" json:"start,omitempty"`
	// Relative end position of the allele in this coordinate system
	End int32 `protobuf:"varint,2,opt,name=end,proto3" json:"end,omitempty"`
	// Reference sequence in feature (this should be the codon at CDS level)
	ReferenceSequence string `protobuf:"bytes,3,opt,name=reference_sequence,json=referenceSequence,proto3" json:"reference_sequence,omitempty"`
	// Alternate sequence in feature (this should be the codon at CDS level)
	AlternateSequence    string   `protobuf:"bytes,4,opt,name=alternate_sequence,json=alternateSequence,proto3" json:"alternate_sequence,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AlleleLocation) Reset()         { *m = AlleleLocation{} }
func (m *AlleleLocation) String() string { return proto.CompactTextString(m) }
func (*AlleleLocation) ProtoMessage()    {}
func (*AlleleLocation) Descriptor() ([]byte, []int) {
	return fileDescriptor_20274d9b6cf45d0c, []int{1}
}

func (m *AlleleLocation) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AlleleLocation.Unmarshal(m, b)
}
func (m *AlleleLocation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AlleleLocation.Marshal(b, m, deterministic)
}
func (m *AlleleLocation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AlleleLocation.Merge(m, src)
}
func (m *AlleleLocation) XXX_Size() int {
	return xxx_messageInfo_AlleleLocation.Size(m)
}
func (m *AlleleLocation) XXX_DiscardUnknown() {
	xxx_messageInfo_AlleleLocation.DiscardUnknown(m)
}

var xxx_messageInfo_AlleleLocation proto.InternalMessageInfo

func (m *AlleleLocation) GetStart() int32 {
	if m != nil {
		return m.Start
	}
	return 0
}

func (m *AlleleLocation) GetEnd() int32 {
	if m != nil {
		return m.End
	}
	return 0
}

func (m *AlleleLocation) GetReferenceSequence() string {
	if m != nil {
		return m.ReferenceSequence
	}
	return ""
}

func (m *AlleleLocation) GetAlternateSequence() string {
	if m != nil {
		return m.AlternateSequence
	}
	return ""
}

// A VariantAnnotationSet record groups VariantAnnotation records. It is derived
// from a VariantSet and holds information describing the software and reference
// data used in the annotation.
type VariantAnnotationSet struct {
	// The ID of the variant annotation set record
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The ID of the variant set to which this annotation set belongs
	VariantSetId string `protobuf:"bytes,2,opt,name=variant_set_id,json=variantSetId,proto3" json:"variant_set_id,omitempty"`
	// The variant annotation set name.
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// Analysis details. It is essential to supply versions for all software and
	// reference data used.
	Analysis *Analysis `protobuf:"bytes,4,opt,name=analysis,proto3" json:"analysis,omitempty"`
	// A map of additional information about the Annotation Set.
	Attributes           *Attributes `protobuf:"bytes,5,opt,name=attributes,proto3" json:"attributes,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *VariantAnnotationSet) Reset()         { *m = VariantAnnotationSet{} }
func (m *VariantAnnotationSet) String() string { return proto.CompactTextString(m) }
func (*VariantAnnotationSet) ProtoMessage()    {}
func (*VariantAnnotationSet) Descriptor() ([]byte, []int) {
	return fileDescriptor_20274d9b6cf45d0c, []int{2}
}

func (m *VariantAnnotationSet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VariantAnnotationSet.Unmarshal(m, b)
}
func (m *VariantAnnotationSet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VariantAnnotationSet.Marshal(b, m, deterministic)
}
func (m *VariantAnnotationSet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VariantAnnotationSet.Merge(m, src)
}
func (m *VariantAnnotationSet) XXX_Size() int {
	return xxx_messageInfo_VariantAnnotationSet.Size(m)
}
func (m *VariantAnnotationSet) XXX_DiscardUnknown() {
	xxx_messageInfo_VariantAnnotationSet.DiscardUnknown(m)
}

var xxx_messageInfo_VariantAnnotationSet proto.InternalMessageInfo

func (m *VariantAnnotationSet) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *VariantAnnotationSet) GetVariantSetId() string {
	if m != nil {
		return m.VariantSetId
	}
	return ""
}

func (m *VariantAnnotationSet) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *VariantAnnotationSet) GetAnalysis() *Analysis {
	if m != nil {
		return m.Analysis
	}
	return nil
}

func (m *VariantAnnotationSet) GetAttributes() *Attributes {
	if m != nil {
		return m.Attributes
	}
	return nil
}

// A HGVSAnnotation record holds Human Genome Variation Society descriptions of
// the sequence change with respect to genomic, transcript and protein
// sequences. See: http:// www.hgvs.org/mutnomen/recs.html.
// Descriptions should be provided at genomic level
//  - Descriptions at transcript level should be provided when the allele
//    lies within a transcript
//  - Descriptions at protein level should be provided when the allele
//    lies within the translated sequence or stop codon.
type HGVSAnnotation struct {
	Genomic              string   `protobuf:"bytes,1,opt,name=genomic,proto3" json:"genomic,omitempty"`
	Transcript           string   `protobuf:"bytes,2,opt,name=transcript,proto3" json:"transcript,omitempty"`
	Protein              string   `protobuf:"bytes,3,opt,name=protein,proto3" json:"protein,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HGVSAnnotation) Reset()         { *m = HGVSAnnotation{} }
func (m *HGVSAnnotation) String() string { return proto.CompactTextString(m) }
func (*HGVSAnnotation) ProtoMessage()    {}
func (*HGVSAnnotation) Descriptor() ([]byte, []int) {
	return fileDescriptor_20274d9b6cf45d0c, []int{3}
}

func (m *HGVSAnnotation) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HGVSAnnotation.Unmarshal(m, b)
}
func (m *HGVSAnnotation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HGVSAnnotation.Marshal(b, m, deterministic)
}
func (m *HGVSAnnotation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HGVSAnnotation.Merge(m, src)
}
func (m *HGVSAnnotation) XXX_Size() int {
	return xxx_messageInfo_HGVSAnnotation.Size(m)
}
func (m *HGVSAnnotation) XXX_DiscardUnknown() {
	xxx_messageInfo_HGVSAnnotation.DiscardUnknown(m)
}

var xxx_messageInfo_HGVSAnnotation proto.InternalMessageInfo

func (m *HGVSAnnotation) GetGenomic() string {
	if m != nil {
		return m.Genomic
	}
	return ""
}

func (m *HGVSAnnotation) GetTranscript() string {
	if m != nil {
		return m.Transcript
	}
	return ""
}

func (m *HGVSAnnotation) GetProtein() string {
	if m != nil {
		return m.Protein
	}
	return ""
}

// A transcript effect record is a set of information describing the effect of
// an allele on a transcript
type TranscriptEffect struct {
	//  The ID of the transcript effect record
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The id of the transcript feature the annotation is relative to.
	// TODO: derive unique id from digest of data [location, allele, transcript?]
	FeatureId string `protobuf:"bytes,2,opt,name=feature_id,json=featureId,proto3" json:"feature_id,omitempty"`
	// Alternate allele - a variant may have more than one alternate allele,
	// each of which will have distinct annotation.
	AlternateBases string `protobuf:"bytes,3,opt,name=alternate_bases,json=alternateBases,proto3" json:"alternate_bases,omitempty"`
	// Effect of variant on this feature.
	Effects []*OntologyTerm `protobuf:"bytes,4,rep,name=effects,proto3" json:"effects,omitempty"`
	// Human Genome Variation Society variant descriptions.
	HgvsAnnotation *HGVSAnnotation `protobuf:"bytes,5,opt,name=hgvs_annotation,json=hgvsAnnotation,proto3" json:"hgvs_annotation,omitempty"`
	// Change relative to cDNA.
	CdnaLocation *AlleleLocation `protobuf:"bytes,6,opt,name=cdna_location,json=cdnaLocation,proto3" json:"cdna_location,omitempty"`
	// Change relative to coding sequence.
	CdsLocation *AlleleLocation `protobuf:"bytes,7,opt,name=cds_location,json=cdsLocation,proto3" json:"cds_location,omitempty"`
	// Change relative to protein.
	ProteinLocation *AlleleLocation `protobuf:"bytes,8,opt,name=protein_location,json=proteinLocation,proto3" json:"protein_location,omitempty"`
	// Output from prediction packages such as SIFT.
	AnalysisResults []*AnalysisResult `protobuf:"bytes,9,rep,name=analysis_results,json=analysisResults,proto3" json:"analysis_results,omitempty"`
	// A map of additional information about the Transcript Effect.
	Attributes           *Attributes `protobuf:"bytes,11,opt,name=attributes,proto3" json:"attributes,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *TranscriptEffect) Reset()         { *m = TranscriptEffect{} }
func (m *TranscriptEffect) String() string { return proto.CompactTextString(m) }
func (*TranscriptEffect) ProtoMessage()    {}
func (*TranscriptEffect) Descriptor() ([]byte, []int) {
	return fileDescriptor_20274d9b6cf45d0c, []int{4}
}

func (m *TranscriptEffect) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TranscriptEffect.Unmarshal(m, b)
}
func (m *TranscriptEffect) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TranscriptEffect.Marshal(b, m, deterministic)
}
func (m *TranscriptEffect) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TranscriptEffect.Merge(m, src)
}
func (m *TranscriptEffect) XXX_Size() int {
	return xxx_messageInfo_TranscriptEffect.Size(m)
}
func (m *TranscriptEffect) XXX_DiscardUnknown() {
	xxx_messageInfo_TranscriptEffect.DiscardUnknown(m)
}

var xxx_messageInfo_TranscriptEffect proto.InternalMessageInfo

func (m *TranscriptEffect) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *TranscriptEffect) GetFeatureId() string {
	if m != nil {
		return m.FeatureId
	}
	return ""
}

func (m *TranscriptEffect) GetAlternateBases() string {
	if m != nil {
		return m.AlternateBases
	}
	return ""
}

func (m *TranscriptEffect) GetEffects() []*OntologyTerm {
	if m != nil {
		return m.Effects
	}
	return nil
}

func (m *TranscriptEffect) GetHgvsAnnotation() *HGVSAnnotation {
	if m != nil {
		return m.HgvsAnnotation
	}
	return nil
}

func (m *TranscriptEffect) GetCdnaLocation() *AlleleLocation {
	if m != nil {
		return m.CdnaLocation
	}
	return nil
}

func (m *TranscriptEffect) GetCdsLocation() *AlleleLocation {
	if m != nil {
		return m.CdsLocation
	}
	return nil
}

func (m *TranscriptEffect) GetProteinLocation() *AlleleLocation {
	if m != nil {
		return m.ProteinLocation
	}
	return nil
}

func (m *TranscriptEffect) GetAnalysisResults() []*AnalysisResult {
	if m != nil {
		return m.AnalysisResults
	}
	return nil
}

func (m *TranscriptEffect) GetAttributes() *Attributes {
	if m != nil {
		return m.Attributes
	}
	return nil
}

// A `VariantAnnotation` record represents the result of comparing a variant to
// a set of reference data.
type VariantAnnotation struct {
	// The ID of this VariantAnnotation.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The variant ID.
	VariantId string `protobuf:"bytes,2,opt,name=variant_id,json=variantId,proto3" json:"variant_id,omitempty"`
	// The ID of the variant annotation set this record belongs to.
	VariantAnnotationSetId string `protobuf:"bytes,3,opt,name=variant_annotation_set_id,json=variantAnnotationSetId,proto3" json:"variant_annotation_set_id,omitempty"`
	// The time at which this record was created, in ISO 8601 format.
	Created string `protobuf:"bytes,4,opt,name=created,proto3" json:"created,omitempty"`
	// The transcript effect annotation for the alleles of this variant. Each
	// one represents the effect of a single allele on a single transcript.
	TranscriptEffects []*TranscriptEffect `protobuf:"bytes,5,rep,name=transcript_effects,json=transcriptEffects,proto3" json:"transcript_effects,omitempty"`
	// A map of additional information about the Annotation.
	Attributes           *Attributes `protobuf:"bytes,7,opt,name=attributes,proto3" json:"attributes,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *VariantAnnotation) Reset()         { *m = VariantAnnotation{} }
func (m *VariantAnnotation) String() string { return proto.CompactTextString(m) }
func (*VariantAnnotation) ProtoMessage()    {}
func (*VariantAnnotation) Descriptor() ([]byte, []int) {
	return fileDescriptor_20274d9b6cf45d0c, []int{5}
}

func (m *VariantAnnotation) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VariantAnnotation.Unmarshal(m, b)
}
func (m *VariantAnnotation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VariantAnnotation.Marshal(b, m, deterministic)
}
func (m *VariantAnnotation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VariantAnnotation.Merge(m, src)
}
func (m *VariantAnnotation) XXX_Size() int {
	return xxx_messageInfo_VariantAnnotation.Size(m)
}
func (m *VariantAnnotation) XXX_DiscardUnknown() {
	xxx_messageInfo_VariantAnnotation.DiscardUnknown(m)
}

var xxx_messageInfo_VariantAnnotation proto.InternalMessageInfo

func (m *VariantAnnotation) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *VariantAnnotation) GetVariantId() string {
	if m != nil {
		return m.VariantId
	}
	return ""
}

func (m *VariantAnnotation) GetVariantAnnotationSetId() string {
	if m != nil {
		return m.VariantAnnotationSetId
	}
	return ""
}

func (m *VariantAnnotation) GetCreated() string {
	if m != nil {
		return m.Created
	}
	return ""
}

func (m *VariantAnnotation) GetTranscriptEffects() []*TranscriptEffect {
	if m != nil {
		return m.TranscriptEffects
	}
	return nil
}

func (m *VariantAnnotation) GetAttributes() *Attributes {
	if m != nil {
		return m.Attributes
	}
	return nil
}

func init() {
	proto.RegisterType((*AnalysisResult)(nil), "candig.AnalysisResult")
	proto.RegisterType((*AlleleLocation)(nil), "candig.AlleleLocation")
	proto.RegisterType((*VariantAnnotationSet)(nil), "candig.VariantAnnotationSet")
	proto.RegisterType((*HGVSAnnotation)(nil), "candig.HGVSAnnotation")
	proto.RegisterType((*TranscriptEffect)(nil), "candig.TranscriptEffect")
	proto.RegisterType((*VariantAnnotation)(nil), "candig.VariantAnnotation")
}

func init() { proto.RegisterFile("candig/allele_annotations.proto", fileDescriptor_20274d9b6cf45d0c) }

var fileDescriptor_20274d9b6cf45d0c = []byte{
	// 604 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x94, 0xc1, 0x6a, 0x1b, 0x31,
	0x10, 0x86, 0xb1, 0x13, 0xdb, 0xf1, 0x38, 0x5d, 0x3b, 0x6a, 0x30, 0xdb, 0x42, 0x9b, 0x60, 0x0a,
	0xcd, 0xa1, 0x75, 0x21, 0x3d, 0x85, 0x1e, 0x8a, 0x0b, 0x25, 0x35, 0x14, 0x0a, 0xeb, 0x90, 0xeb,
	0x22, 0x4b, 0x63, 0x77, 0x61, 0xad, 0x4d, 0x25, 0xd9, 0x90, 0x87, 0xe8, 0xad, 0xf4, 0x81, 0xfa,
	0x64, 0x45, 0x5a, 0x49, 0xbb, 0xb6, 0x43, 0xc8, 0x6d, 0x67, 0xe6, 0x1b, 0x59, 0xf3, 0xeb, 0x1f,
	0xc3, 0x19, 0xa3, 0x82, 0x67, 0xcb, 0x0f, 0x34, 0xcf, 0x31, 0xc7, 0x94, 0x0a, 0x51, 0x68, 0xaa,
	0xb3, 0x42, 0xa8, 0xf1, 0x9d, 0x2c, 0x74, 0x41, 0xda, 0x25, 0xf0, 0xf2, 0xb9, 0x03, 0x59, 0xb1,
	0x5a, 0x15, 0xa2, 0x2c, 0x8e, 0x52, 0x88, 0x26, 0x82, 0xe6, 0xf7, 0x2a, 0x53, 0x09, 0xaa, 0x75,
	0xae, 0xc9, 0x19, 0xf4, 0xa8, 0xcb, 0xa4, 0x19, 0x8f, 0x1b, 0xe7, 0x8d, 0x8b, 0x6e, 0x02, 0x3e,
	0x35, 0xe5, 0x64, 0x08, 0x6d, 0x69, 0xd1, 0xb8, 0x69, 0x6b, 0x2e, 0x22, 0xa7, 0xd0, 0x52, 0xac,
	0x90, 0x18, 0x1f, 0x9c, 0x37, 0x2e, 0x5a, 0x49, 0x19, 0x8c, 0xfe, 0x36, 0x20, 0x9a, 0xd8, 0xab,
	0x7d, 0x2f, 0x98, 0xbd, 0x97, 0x05, 0x35, 0x95, 0xda, 0x9e, 0x6d, 0x40, 0x13, 0x90, 0x01, 0x1c,
	0xa0, 0xe0, 0xf6, 0xcc, 0x56, 0x62, 0x3e, 0xc9, 0x7b, 0x20, 0x12, 0x17, 0x28, 0x51, 0x30, 0x4c,
	0x15, 0xfe, 0x5a, 0x9b, 0x0f, 0x7b, 0x7a, 0x37, 0x39, 0x09, 0x95, 0x99, 0x2b, 0x18, 0x9c, 0xe6,
	0x1a, 0xa5, 0xa0, 0xba, 0x86, 0x1f, 0x96, 0x78, 0xa8, 0x78, 0x7c, 0xf4, 0xaf, 0x01, 0xa7, 0xb7,
	0x54, 0x66, 0x54, 0xe8, 0x49, 0xd0, 0x6c, 0x86, 0x9a, 0x44, 0xd0, 0x0c, 0x73, 0x37, 0x33, 0x4e,
	0xde, 0x40, 0xb4, 0x29, 0xb9, 0x54, 0xa1, 0x36, 0x9a, 0x94, 0x73, 0x1f, 0xbb, 0xec, 0x0c, 0xf5,
	0x94, 0x13, 0x02, 0x87, 0x82, 0xae, 0xfc, 0xf5, 0xec, 0x37, 0x79, 0x07, 0x47, 0x5e, 0x37, 0x7b,
	0x8f, 0xde, 0xe5, 0x60, 0x5c, 0x3e, 0xc2, 0x38, 0x88, 0x1e, 0x08, 0x72, 0x09, 0x40, 0xb5, 0x96,
	0xd9, 0x7c, 0xad, 0x51, 0xc5, 0x2d, 0xcb, 0x93, 0xc0, 0x87, 0x4a, 0x52, 0xa3, 0x46, 0x1c, 0xa2,
	0x6f, 0xd7, 0xb7, 0xb3, 0x6a, 0x00, 0x12, 0x43, 0x67, 0x89, 0xa2, 0x58, 0x65, 0xcc, 0x8d, 0xe0,
	0x43, 0xf2, 0x1a, 0x40, 0x4b, 0x2a, 0x14, 0x93, 0xd9, 0x9d, 0x7f, 0xbb, 0x5a, 0xc6, 0x74, 0x1a,
	0x4f, 0x60, 0x26, 0xdc, 0x10, 0x3e, 0x1c, 0xfd, 0x3e, 0x84, 0xc1, 0x4d, 0x00, 0xbf, 0x2e, 0x16,
	0xc8, 0xf6, 0x65, 0x7a, 0x05, 0xb0, 0x40, 0xaa, 0xd7, 0x12, 0x2b, 0x89, 0xba, 0x2e, 0x33, 0xe5,
	0xe4, 0x2d, 0xf4, 0xab, 0xd7, 0x99, 0x53, 0x85, 0xca, 0xfd, 0x4a, 0x14, 0xd2, 0x5f, 0x4c, 0x96,
	0x8c, 0xa1, 0x83, 0xf6, 0x17, 0x8c, 0x66, 0x07, 0x17, 0xbd, 0xcb, 0x53, 0xaf, 0xc1, 0x0f, 0xa1,
	0x8b, 0xbc, 0x58, 0xde, 0xdf, 0xa0, 0x5c, 0x25, 0x1e, 0x22, 0x9f, 0xa1, 0xff, 0x73, 0xb9, 0x51,
	0x35, 0xe3, 0x3b, 0xed, 0x86, 0xbe, 0x6f, 0x5b, 0xa1, 0x24, 0x32, 0x78, 0x4d, 0xb1, 0x4f, 0xf0,
	0x8c, 0x71, 0x41, 0xd3, 0xdc, 0xf9, 0x33, 0x6e, 0x6f, 0xb7, 0x6f, 0xbb, 0x37, 0x39, 0x36, 0x70,
	0xf0, 0xf2, 0x15, 0x1c, 0x33, 0xae, 0xaa, 0xde, 0xce, 0xa3, 0xbd, 0x3d, 0xc6, 0x55, 0x68, 0x9d,
	0xc0, 0xc0, 0x09, 0x5c, 0xb5, 0x1f, 0x3d, 0xda, 0xde, 0x77, 0x7c, 0xfd, 0x88, 0xb0, 0xab, 0xe5,
	0x16, 0xaa, 0xb8, 0x6b, 0x45, 0x1b, 0xee, 0x19, 0xcd, 0x96, 0x93, 0x3e, 0xdd, 0x8a, 0x77, 0x5d,
	0xd7, 0x7b, 0x92, 0xeb, 0xfe, 0x34, 0xe1, 0x64, 0x6f, 0x75, 0x1e, 0x32, 0x84, 0xdf, 0x9b, 0xca,
	0x10, 0x2e, 0x33, 0xe5, 0xe4, 0x0a, 0x5e, 0xf8, 0x72, 0xf5, 0x74, 0x7e, 0xc3, 0x4a, 0x6b, 0x0c,
	0x37, 0x0f, 0xec, 0xe7, 0x94, 0x1b, 0xa7, 0x32, 0x89, 0x54, 0x23, 0x77, 0xeb, 0xed, 0x43, 0x72,
	0x0d, 0xa4, 0x72, 0x74, 0xea, 0x7d, 0xd4, 0xb2, 0x92, 0xc4, 0x7e, 0xaa, 0x5d, 0x2b, 0x27, 0x27,
	0x7a, 0x27, 0xb3, 0x2b, 0x4b, 0xe7, 0x29, 0xb2, 0xcc, 0xdb, 0xf6, 0x2f, 0xf5, 0xe3, 0xff, 0x00,
	0x00, 0x00, 0xff, 0xff, 0x23, 0x54, 0x0e, 0x5a, 0x92, 0x05, 0x00, 0x00,
}
