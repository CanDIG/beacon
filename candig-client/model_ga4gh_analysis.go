/*
 * CanDIG Services
 *
 * Below is a list of APIs that CanDIG currently supports.<br/><br/>For /search and /count endpoints, refer to [this documentation](https://www.distributedgenomics.ca/static/search_count_services_usage.pdf) for instructions and sample queries.<br/>For all metadata and variant services endpoints, refer to [this documentation](https://www.distributedgenomics.ca/static/metadata_variants_services_sample_queries.pdf) for sample queries.
 *
 * API version: 1.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package client
import (
	"encoding/json"
)

// An analysis contains an interpretation of one or several experiments. (e.g. SNVs, copy number variations, methylation status) together with information about the methodology used.
type Ga4ghAnalysis struct {
	// Formats of id | name | description | accessions are described in the documentation on general attributes and formats.
	Id *string `json:"id,omitempty"`

	Name *string `json:"name,omitempty"`

	Description *string `json:"description,omitempty"`

	// The time at which this record was created, in ISO 8601 format.
	Created *string `json:"created,omitempty"`

	// The time at which this record was last updated, in ISO 8601 format.
	Updated *string `json:"updated,omitempty"`

	// The type of analysis.
	Type *string `json:"type,omitempty"`

	// The software run to generate this analysis.
	Software *[]string `json:"software,omitempty"`

	// ### ===================================================================== ### # PROFYLE MODIFICATION BEGIN ### ===================================================================== ### The ID of the dataset this Analysis belongs to.
	DatasetId *string `json:"dataset_id,omitempty"`

	ExperimentId *string `json:"experiment_id,omitempty"`

	OtherAnalysisDescriptor *string `json:"other_analysis_descriptor,omitempty"`

	OtherAnalysisCompletitionDate *string `json:"other_analysis_completition_date,omitempty"`

}

// GetId returns the Id field if non-nil, zero value otherwise.
func (o *Ga4ghAnalysis) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *Ga4ghAnalysis) GetIdOk() (string, bool) {
	if o == nil || o.Id == nil {
		var ret string
		return ret, false
	}
	return *o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Ga4ghAnalysis) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *Ga4ghAnalysis) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field if non-nil, zero value otherwise.
func (o *Ga4ghAnalysis) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *Ga4ghAnalysis) GetNameOk() (string, bool) {
	if o == nil || o.Name == nil {
		var ret string
		return ret, false
	}
	return *o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Ga4ghAnalysis) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Ga4ghAnalysis) SetName(v string) {
	o.Name = &v
}

// GetDescription returns the Description field if non-nil, zero value otherwise.
func (o *Ga4ghAnalysis) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *Ga4ghAnalysis) GetDescriptionOk() (string, bool) {
	if o == nil || o.Description == nil {
		var ret string
		return ret, false
	}
	return *o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *Ga4ghAnalysis) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *Ga4ghAnalysis) SetDescription(v string) {
	o.Description = &v
}

// GetCreated returns the Created field if non-nil, zero value otherwise.
func (o *Ga4ghAnalysis) GetCreated() string {
	if o == nil || o.Created == nil {
		var ret string
		return ret
	}
	return *o.Created
}

// GetCreatedOk returns a tuple with the Created field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *Ga4ghAnalysis) GetCreatedOk() (string, bool) {
	if o == nil || o.Created == nil {
		var ret string
		return ret, false
	}
	return *o.Created, true
}

// HasCreated returns a boolean if a field has been set.
func (o *Ga4ghAnalysis) HasCreated() bool {
	if o != nil && o.Created != nil {
		return true
	}

	return false
}

// SetCreated gets a reference to the given string and assigns it to the Created field.
func (o *Ga4ghAnalysis) SetCreated(v string) {
	o.Created = &v
}

// GetUpdated returns the Updated field if non-nil, zero value otherwise.
func (o *Ga4ghAnalysis) GetUpdated() string {
	if o == nil || o.Updated == nil {
		var ret string
		return ret
	}
	return *o.Updated
}

// GetUpdatedOk returns a tuple with the Updated field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *Ga4ghAnalysis) GetUpdatedOk() (string, bool) {
	if o == nil || o.Updated == nil {
		var ret string
		return ret, false
	}
	return *o.Updated, true
}

// HasUpdated returns a boolean if a field has been set.
func (o *Ga4ghAnalysis) HasUpdated() bool {
	if o != nil && o.Updated != nil {
		return true
	}

	return false
}

// SetUpdated gets a reference to the given string and assigns it to the Updated field.
func (o *Ga4ghAnalysis) SetUpdated(v string) {
	o.Updated = &v
}

// GetType returns the Type field if non-nil, zero value otherwise.
func (o *Ga4ghAnalysis) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *Ga4ghAnalysis) GetTypeOk() (string, bool) {
	if o == nil || o.Type == nil {
		var ret string
		return ret, false
	}
	return *o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *Ga4ghAnalysis) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *Ga4ghAnalysis) SetType(v string) {
	o.Type = &v
}

// GetSoftware returns the Software field if non-nil, zero value otherwise.
func (o *Ga4ghAnalysis) GetSoftware() []string {
	if o == nil || o.Software == nil {
		var ret []string
		return ret
	}
	return *o.Software
}

// GetSoftwareOk returns a tuple with the Software field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *Ga4ghAnalysis) GetSoftwareOk() ([]string, bool) {
	if o == nil || o.Software == nil {
		var ret []string
		return ret, false
	}
	return *o.Software, true
}

// HasSoftware returns a boolean if a field has been set.
func (o *Ga4ghAnalysis) HasSoftware() bool {
	if o != nil && o.Software != nil {
		return true
	}

	return false
}

// SetSoftware gets a reference to the given []string and assigns it to the Software field.
func (o *Ga4ghAnalysis) SetSoftware(v []string) {
	o.Software = &v
}

// GetDatasetId returns the DatasetId field if non-nil, zero value otherwise.
func (o *Ga4ghAnalysis) GetDatasetId() string {
	if o == nil || o.DatasetId == nil {
		var ret string
		return ret
	}
	return *o.DatasetId
}

// GetDatasetIdOk returns a tuple with the DatasetId field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *Ga4ghAnalysis) GetDatasetIdOk() (string, bool) {
	if o == nil || o.DatasetId == nil {
		var ret string
		return ret, false
	}
	return *o.DatasetId, true
}

// HasDatasetId returns a boolean if a field has been set.
func (o *Ga4ghAnalysis) HasDatasetId() bool {
	if o != nil && o.DatasetId != nil {
		return true
	}

	return false
}

// SetDatasetId gets a reference to the given string and assigns it to the DatasetId field.
func (o *Ga4ghAnalysis) SetDatasetId(v string) {
	o.DatasetId = &v
}

// GetExperimentId returns the ExperimentId field if non-nil, zero value otherwise.
func (o *Ga4ghAnalysis) GetExperimentId() string {
	if o == nil || o.ExperimentId == nil {
		var ret string
		return ret
	}
	return *o.ExperimentId
}

// GetExperimentIdOk returns a tuple with the ExperimentId field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *Ga4ghAnalysis) GetExperimentIdOk() (string, bool) {
	if o == nil || o.ExperimentId == nil {
		var ret string
		return ret, false
	}
	return *o.ExperimentId, true
}

// HasExperimentId returns a boolean if a field has been set.
func (o *Ga4ghAnalysis) HasExperimentId() bool {
	if o != nil && o.ExperimentId != nil {
		return true
	}

	return false
}

// SetExperimentId gets a reference to the given string and assigns it to the ExperimentId field.
func (o *Ga4ghAnalysis) SetExperimentId(v string) {
	o.ExperimentId = &v
}

// GetOtherAnalysisDescriptor returns the OtherAnalysisDescriptor field if non-nil, zero value otherwise.
func (o *Ga4ghAnalysis) GetOtherAnalysisDescriptor() string {
	if o == nil || o.OtherAnalysisDescriptor == nil {
		var ret string
		return ret
	}
	return *o.OtherAnalysisDescriptor
}

// GetOtherAnalysisDescriptorOk returns a tuple with the OtherAnalysisDescriptor field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *Ga4ghAnalysis) GetOtherAnalysisDescriptorOk() (string, bool) {
	if o == nil || o.OtherAnalysisDescriptor == nil {
		var ret string
		return ret, false
	}
	return *o.OtherAnalysisDescriptor, true
}

// HasOtherAnalysisDescriptor returns a boolean if a field has been set.
func (o *Ga4ghAnalysis) HasOtherAnalysisDescriptor() bool {
	if o != nil && o.OtherAnalysisDescriptor != nil {
		return true
	}

	return false
}

// SetOtherAnalysisDescriptor gets a reference to the given string and assigns it to the OtherAnalysisDescriptor field.
func (o *Ga4ghAnalysis) SetOtherAnalysisDescriptor(v string) {
	o.OtherAnalysisDescriptor = &v
}

// GetOtherAnalysisCompletitionDate returns the OtherAnalysisCompletitionDate field if non-nil, zero value otherwise.
func (o *Ga4ghAnalysis) GetOtherAnalysisCompletitionDate() string {
	if o == nil || o.OtherAnalysisCompletitionDate == nil {
		var ret string
		return ret
	}
	return *o.OtherAnalysisCompletitionDate
}

// GetOtherAnalysisCompletitionDateOk returns a tuple with the OtherAnalysisCompletitionDate field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *Ga4ghAnalysis) GetOtherAnalysisCompletitionDateOk() (string, bool) {
	if o == nil || o.OtherAnalysisCompletitionDate == nil {
		var ret string
		return ret, false
	}
	return *o.OtherAnalysisCompletitionDate, true
}

// HasOtherAnalysisCompletitionDate returns a boolean if a field has been set.
func (o *Ga4ghAnalysis) HasOtherAnalysisCompletitionDate() bool {
	if o != nil && o.OtherAnalysisCompletitionDate != nil {
		return true
	}

	return false
}

// SetOtherAnalysisCompletitionDate gets a reference to the given string and assigns it to the OtherAnalysisCompletitionDate field.
func (o *Ga4ghAnalysis) SetOtherAnalysisCompletitionDate(v string) {
	o.OtherAnalysisCompletitionDate = &v
}


func (o Ga4ghAnalysis) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if o.Created != nil {
		toSerialize["created"] = o.Created
	}
	if o.Updated != nil {
		toSerialize["updated"] = o.Updated
	}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	if o.Software != nil {
		toSerialize["software"] = o.Software
	}
	if o.DatasetId != nil {
		toSerialize["dataset_id"] = o.DatasetId
	}
	if o.ExperimentId != nil {
		toSerialize["experiment_id"] = o.ExperimentId
	}
	if o.OtherAnalysisDescriptor != nil {
		toSerialize["other_analysis_descriptor"] = o.OtherAnalysisDescriptor
	}
	if o.OtherAnalysisCompletitionDate != nil {
		toSerialize["other_analysis_completition_date"] = o.OtherAnalysisCompletitionDate
	}
	return json.Marshal(toSerialize)
}


