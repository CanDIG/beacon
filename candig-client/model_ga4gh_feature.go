/*
 * CanDIG Services
 *
 * Below is a list of APIs that CanDIG currently supports.<br/><br/>For /search and /count endpoints, refer to [this documentation](https://www.distributedgenomics.ca/static/search_count_services_usage.pdf) for instructions and sample queries.<br/>For all metadata and variant services endpoints, refer to [this documentation](https://www.distributedgenomics.ca/static/metadata_variants_services_sample_queries.pdf) for sample queries.
 *
 * API version: 1.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package client
import (
	"encoding/json"
)

// Node in the annotation graph that annotates a contiguous region of a sequence.
type Ga4ghFeature struct {
	// Id of this annotation node.
	Id *string `json:"id,omitempty"`

	// An optional name to provide for the feature.
	Name *string `json:"name,omitempty"`

	// The gene symbol the feature occurs on. This field may be replaced with a more generic representation in a future version.
	GeneSymbol *string `json:"gene_symbol,omitempty"`

	// Parent Id of this node. Set to empty string if node has no parent.
	ParentId *string `json:"parent_id,omitempty"`

	// Ordered array of Child Ids of this node. Since not all child nodes are ordered by genomic coordinates, this can't always be reconstructed from parent_id's of the children alone.
	ChildIds *[]string `json:"child_ids,omitempty"`

	// Identifier for the containing feature set.
	FeatureSetId *string `json:"feature_set_id,omitempty"`

	// The reference on which this feature occurs (e.g. `chr20` or `X`).
	ReferenceName *string `json:"reference_name,omitempty"`

	// The start position at which this feature occurs (0-based). This corresponds to the first base of the string of reference bases. Genomic positions are non-negative integers less than reference length. Features spanning the join of circular genomes are represented as two features one on each side of the join (position 0).
	Start *string `json:"start,omitempty"`

	// The end position (exclusive), resulting in [start, end) closed-open interval. This is typically calculated by `start + reference_bases.length`.
	End *string `json:"end,omitempty"`

	Strand *Ga4ghStrand `json:"strand,omitempty"`

	FeatureType *Ga4ghOntologyTerm `json:"feature_type,omitempty"`

}

// GetId returns the Id field if non-nil, zero value otherwise.
func (o *Ga4ghFeature) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *Ga4ghFeature) GetIdOk() (string, bool) {
	if o == nil || o.Id == nil {
		var ret string
		return ret, false
	}
	return *o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Ga4ghFeature) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *Ga4ghFeature) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field if non-nil, zero value otherwise.
func (o *Ga4ghFeature) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *Ga4ghFeature) GetNameOk() (string, bool) {
	if o == nil || o.Name == nil {
		var ret string
		return ret, false
	}
	return *o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Ga4ghFeature) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Ga4ghFeature) SetName(v string) {
	o.Name = &v
}

// GetGeneSymbol returns the GeneSymbol field if non-nil, zero value otherwise.
func (o *Ga4ghFeature) GetGeneSymbol() string {
	if o == nil || o.GeneSymbol == nil {
		var ret string
		return ret
	}
	return *o.GeneSymbol
}

// GetGeneSymbolOk returns a tuple with the GeneSymbol field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *Ga4ghFeature) GetGeneSymbolOk() (string, bool) {
	if o == nil || o.GeneSymbol == nil {
		var ret string
		return ret, false
	}
	return *o.GeneSymbol, true
}

// HasGeneSymbol returns a boolean if a field has been set.
func (o *Ga4ghFeature) HasGeneSymbol() bool {
	if o != nil && o.GeneSymbol != nil {
		return true
	}

	return false
}

// SetGeneSymbol gets a reference to the given string and assigns it to the GeneSymbol field.
func (o *Ga4ghFeature) SetGeneSymbol(v string) {
	o.GeneSymbol = &v
}

// GetParentId returns the ParentId field if non-nil, zero value otherwise.
func (o *Ga4ghFeature) GetParentId() string {
	if o == nil || o.ParentId == nil {
		var ret string
		return ret
	}
	return *o.ParentId
}

// GetParentIdOk returns a tuple with the ParentId field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *Ga4ghFeature) GetParentIdOk() (string, bool) {
	if o == nil || o.ParentId == nil {
		var ret string
		return ret, false
	}
	return *o.ParentId, true
}

// HasParentId returns a boolean if a field has been set.
func (o *Ga4ghFeature) HasParentId() bool {
	if o != nil && o.ParentId != nil {
		return true
	}

	return false
}

// SetParentId gets a reference to the given string and assigns it to the ParentId field.
func (o *Ga4ghFeature) SetParentId(v string) {
	o.ParentId = &v
}

// GetChildIds returns the ChildIds field if non-nil, zero value otherwise.
func (o *Ga4ghFeature) GetChildIds() []string {
	if o == nil || o.ChildIds == nil {
		var ret []string
		return ret
	}
	return *o.ChildIds
}

// GetChildIdsOk returns a tuple with the ChildIds field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *Ga4ghFeature) GetChildIdsOk() ([]string, bool) {
	if o == nil || o.ChildIds == nil {
		var ret []string
		return ret, false
	}
	return *o.ChildIds, true
}

// HasChildIds returns a boolean if a field has been set.
func (o *Ga4ghFeature) HasChildIds() bool {
	if o != nil && o.ChildIds != nil {
		return true
	}

	return false
}

// SetChildIds gets a reference to the given []string and assigns it to the ChildIds field.
func (o *Ga4ghFeature) SetChildIds(v []string) {
	o.ChildIds = &v
}

// GetFeatureSetId returns the FeatureSetId field if non-nil, zero value otherwise.
func (o *Ga4ghFeature) GetFeatureSetId() string {
	if o == nil || o.FeatureSetId == nil {
		var ret string
		return ret
	}
	return *o.FeatureSetId
}

// GetFeatureSetIdOk returns a tuple with the FeatureSetId field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *Ga4ghFeature) GetFeatureSetIdOk() (string, bool) {
	if o == nil || o.FeatureSetId == nil {
		var ret string
		return ret, false
	}
	return *o.FeatureSetId, true
}

// HasFeatureSetId returns a boolean if a field has been set.
func (o *Ga4ghFeature) HasFeatureSetId() bool {
	if o != nil && o.FeatureSetId != nil {
		return true
	}

	return false
}

// SetFeatureSetId gets a reference to the given string and assigns it to the FeatureSetId field.
func (o *Ga4ghFeature) SetFeatureSetId(v string) {
	o.FeatureSetId = &v
}

// GetReferenceName returns the ReferenceName field if non-nil, zero value otherwise.
func (o *Ga4ghFeature) GetReferenceName() string {
	if o == nil || o.ReferenceName == nil {
		var ret string
		return ret
	}
	return *o.ReferenceName
}

// GetReferenceNameOk returns a tuple with the ReferenceName field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *Ga4ghFeature) GetReferenceNameOk() (string, bool) {
	if o == nil || o.ReferenceName == nil {
		var ret string
		return ret, false
	}
	return *o.ReferenceName, true
}

// HasReferenceName returns a boolean if a field has been set.
func (o *Ga4ghFeature) HasReferenceName() bool {
	if o != nil && o.ReferenceName != nil {
		return true
	}

	return false
}

// SetReferenceName gets a reference to the given string and assigns it to the ReferenceName field.
func (o *Ga4ghFeature) SetReferenceName(v string) {
	o.ReferenceName = &v
}

// GetStart returns the Start field if non-nil, zero value otherwise.
func (o *Ga4ghFeature) GetStart() string {
	if o == nil || o.Start == nil {
		var ret string
		return ret
	}
	return *o.Start
}

// GetStartOk returns a tuple with the Start field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *Ga4ghFeature) GetStartOk() (string, bool) {
	if o == nil || o.Start == nil {
		var ret string
		return ret, false
	}
	return *o.Start, true
}

// HasStart returns a boolean if a field has been set.
func (o *Ga4ghFeature) HasStart() bool {
	if o != nil && o.Start != nil {
		return true
	}

	return false
}

// SetStart gets a reference to the given string and assigns it to the Start field.
func (o *Ga4ghFeature) SetStart(v string) {
	o.Start = &v
}

// GetEnd returns the End field if non-nil, zero value otherwise.
func (o *Ga4ghFeature) GetEnd() string {
	if o == nil || o.End == nil {
		var ret string
		return ret
	}
	return *o.End
}

// GetEndOk returns a tuple with the End field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *Ga4ghFeature) GetEndOk() (string, bool) {
	if o == nil || o.End == nil {
		var ret string
		return ret, false
	}
	return *o.End, true
}

// HasEnd returns a boolean if a field has been set.
func (o *Ga4ghFeature) HasEnd() bool {
	if o != nil && o.End != nil {
		return true
	}

	return false
}

// SetEnd gets a reference to the given string and assigns it to the End field.
func (o *Ga4ghFeature) SetEnd(v string) {
	o.End = &v
}

// GetStrand returns the Strand field if non-nil, zero value otherwise.
func (o *Ga4ghFeature) GetStrand() Ga4ghStrand {
	if o == nil || o.Strand == nil {
		var ret Ga4ghStrand
		return ret
	}
	return *o.Strand
}

// GetStrandOk returns a tuple with the Strand field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *Ga4ghFeature) GetStrandOk() (Ga4ghStrand, bool) {
	if o == nil || o.Strand == nil {
		var ret Ga4ghStrand
		return ret, false
	}
	return *o.Strand, true
}

// HasStrand returns a boolean if a field has been set.
func (o *Ga4ghFeature) HasStrand() bool {
	if o != nil && o.Strand != nil {
		return true
	}

	return false
}

// SetStrand gets a reference to the given Ga4ghStrand and assigns it to the Strand field.
func (o *Ga4ghFeature) SetStrand(v Ga4ghStrand) {
	o.Strand = &v
}

// GetFeatureType returns the FeatureType field if non-nil, zero value otherwise.
func (o *Ga4ghFeature) GetFeatureType() Ga4ghOntologyTerm {
	if o == nil || o.FeatureType == nil {
		var ret Ga4ghOntologyTerm
		return ret
	}
	return *o.FeatureType
}

// GetFeatureTypeOk returns a tuple with the FeatureType field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *Ga4ghFeature) GetFeatureTypeOk() (Ga4ghOntologyTerm, bool) {
	if o == nil || o.FeatureType == nil {
		var ret Ga4ghOntologyTerm
		return ret, false
	}
	return *o.FeatureType, true
}

// HasFeatureType returns a boolean if a field has been set.
func (o *Ga4ghFeature) HasFeatureType() bool {
	if o != nil && o.FeatureType != nil {
		return true
	}

	return false
}

// SetFeatureType gets a reference to the given Ga4ghOntologyTerm and assigns it to the FeatureType field.
func (o *Ga4ghFeature) SetFeatureType(v Ga4ghOntologyTerm) {
	o.FeatureType = &v
}


func (o Ga4ghFeature) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.GeneSymbol != nil {
		toSerialize["gene_symbol"] = o.GeneSymbol
	}
	if o.ParentId != nil {
		toSerialize["parent_id"] = o.ParentId
	}
	if o.ChildIds != nil {
		toSerialize["child_ids"] = o.ChildIds
	}
	if o.FeatureSetId != nil {
		toSerialize["feature_set_id"] = o.FeatureSetId
	}
	if o.ReferenceName != nil {
		toSerialize["reference_name"] = o.ReferenceName
	}
	if o.Start != nil {
		toSerialize["start"] = o.Start
	}
	if o.End != nil {
		toSerialize["end"] = o.End
	}
	if o.Strand != nil {
		toSerialize["strand"] = o.Strand
	}
	if o.FeatureType != nil {
		toSerialize["feature_type"] = o.FeatureType
	}
	return json.Marshal(toSerialize)
}


