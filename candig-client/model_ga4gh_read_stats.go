/*
 * CanDIG Services
 *
 * Below is a list of APIs that CanDIG currently supports.<br/><br/>For /search and /count endpoints, refer to [this documentation](https://www.distributedgenomics.ca/static/search_count_services_usage.pdf) for instructions and sample queries.<br/>For all metadata and variant services endpoints, refer to [this documentation](https://www.distributedgenomics.ca/static/metadata_variants_services_sample_queries.pdf) for sample queries.
 *
 * API version: 1.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package client
import (
	"encoding/json"
)

// ReadStats can be used to provide summary statistics about read data.
type Ga4ghReadStats struct {
	// The number of aligned reads.
	AlignedReadCount *string `json:"aligned_read_count,omitempty"`

	// The number of unaligned reads.
	UnalignedReadCount *string `json:"unaligned_read_count,omitempty"`

	// The total number of bases. This is equivalent to the sum of `alignedSequence.length` for all reads.
	BaseCount *string `json:"base_count,omitempty"`

}

// GetAlignedReadCount returns the AlignedReadCount field if non-nil, zero value otherwise.
func (o *Ga4ghReadStats) GetAlignedReadCount() string {
	if o == nil || o.AlignedReadCount == nil {
		var ret string
		return ret
	}
	return *o.AlignedReadCount
}

// GetAlignedReadCountOk returns a tuple with the AlignedReadCount field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *Ga4ghReadStats) GetAlignedReadCountOk() (string, bool) {
	if o == nil || o.AlignedReadCount == nil {
		var ret string
		return ret, false
	}
	return *o.AlignedReadCount, true
}

// HasAlignedReadCount returns a boolean if a field has been set.
func (o *Ga4ghReadStats) HasAlignedReadCount() bool {
	if o != nil && o.AlignedReadCount != nil {
		return true
	}

	return false
}

// SetAlignedReadCount gets a reference to the given string and assigns it to the AlignedReadCount field.
func (o *Ga4ghReadStats) SetAlignedReadCount(v string) {
	o.AlignedReadCount = &v
}

// GetUnalignedReadCount returns the UnalignedReadCount field if non-nil, zero value otherwise.
func (o *Ga4ghReadStats) GetUnalignedReadCount() string {
	if o == nil || o.UnalignedReadCount == nil {
		var ret string
		return ret
	}
	return *o.UnalignedReadCount
}

// GetUnalignedReadCountOk returns a tuple with the UnalignedReadCount field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *Ga4ghReadStats) GetUnalignedReadCountOk() (string, bool) {
	if o == nil || o.UnalignedReadCount == nil {
		var ret string
		return ret, false
	}
	return *o.UnalignedReadCount, true
}

// HasUnalignedReadCount returns a boolean if a field has been set.
func (o *Ga4ghReadStats) HasUnalignedReadCount() bool {
	if o != nil && o.UnalignedReadCount != nil {
		return true
	}

	return false
}

// SetUnalignedReadCount gets a reference to the given string and assigns it to the UnalignedReadCount field.
func (o *Ga4ghReadStats) SetUnalignedReadCount(v string) {
	o.UnalignedReadCount = &v
}

// GetBaseCount returns the BaseCount field if non-nil, zero value otherwise.
func (o *Ga4ghReadStats) GetBaseCount() string {
	if o == nil || o.BaseCount == nil {
		var ret string
		return ret
	}
	return *o.BaseCount
}

// GetBaseCountOk returns a tuple with the BaseCount field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *Ga4ghReadStats) GetBaseCountOk() (string, bool) {
	if o == nil || o.BaseCount == nil {
		var ret string
		return ret, false
	}
	return *o.BaseCount, true
}

// HasBaseCount returns a boolean if a field has been set.
func (o *Ga4ghReadStats) HasBaseCount() bool {
	if o != nil && o.BaseCount != nil {
		return true
	}

	return false
}

// SetBaseCount gets a reference to the given string and assigns it to the BaseCount field.
func (o *Ga4ghReadStats) SetBaseCount(v string) {
	o.BaseCount = &v
}


func (o Ga4ghReadStats) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AlignedReadCount != nil {
		toSerialize["aligned_read_count"] = o.AlignedReadCount
	}
	if o.UnalignedReadCount != nil {
		toSerialize["unaligned_read_count"] = o.UnalignedReadCount
	}
	if o.BaseCount != nil {
		toSerialize["base_count"] = o.BaseCount
	}
	return json.Marshal(toSerialize)
}


