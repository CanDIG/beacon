/*
 * CanDIG Services
 *
 * Below is a list of APIs that CanDIG currently supports.<br/><br/>For /search and /count endpoints, refer to [this documentation](https://www.distributedgenomics.ca/static/search_count_services_usage.pdf) for instructions and sample queries.<br/>For all metadata and variant services endpoints, refer to [this documentation](https://www.distributedgenomics.ca/static/metadata_variants_services_sample_queries.pdf) for sample queries.
 *
 * API version: 1.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package client
import (
	"encoding/json"
)

// `Struct` represents a structured data value, consisting of fields which map to dynamically typed values. In some languages, `Struct` might be supported by a native representation. For example, in scripting languages like JS a struct is represented as an object. The details of that representation are described together with the proto support for the language.  The JSON representation for `Struct` is JSON object.
type ProtobufStruct struct {
	// Unordered map of dynamically typed values.
	Fields *map[string]ProtobufValue `json:"fields,omitempty"`

}

// GetFields returns the Fields field if non-nil, zero value otherwise.
func (o *ProtobufStruct) GetFields() map[string]ProtobufValue {
	if o == nil || o.Fields == nil {
		var ret map[string]ProtobufValue
		return ret
	}
	return *o.Fields
}

// GetFieldsOk returns a tuple with the Fields field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *ProtobufStruct) GetFieldsOk() (map[string]ProtobufValue, bool) {
	if o == nil || o.Fields == nil {
		var ret map[string]ProtobufValue
		return ret, false
	}
	return *o.Fields, true
}

// HasFields returns a boolean if a field has been set.
func (o *ProtobufStruct) HasFields() bool {
	if o != nil && o.Fields != nil {
		return true
	}

	return false
}

// SetFields gets a reference to the given map[string]ProtobufValue and assigns it to the Fields field.
func (o *ProtobufStruct) SetFields(v map[string]ProtobufValue) {
	o.Fields = &v
}


func (o ProtobufStruct) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Fields != nil {
		toSerialize["fields"] = o.Fields
	}
	return json.Marshal(toSerialize)
}


