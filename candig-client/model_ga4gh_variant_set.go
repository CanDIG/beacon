/*
 * CanDIG Services
 *
 * Below is a list of APIs that CanDIG currently supports.<br/><br/>For /search and /count endpoints, refer to [this documentation](https://www.distributedgenomics.ca/static/search_count_services_usage.pdf) for instructions and sample queries.<br/>For all metadata and variant services endpoints, refer to [this documentation](https://www.distributedgenomics.ca/static/metadata_variants_services_sample_queries.pdf) for sample queries.
 *
 * API version: 1.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package client
import (
	"encoding/json"
)

// A VariantSet is a collection of variants and variant calls intended to be analyzed together.
type Ga4ghVariantSet struct {
	// The variant set ID.
	Id *string `json:"id,omitempty"`

	// The variant set name.
	Name *string `json:"name,omitempty"`

	// The ID of the dataset this variant set belongs to.
	DatasetId *string `json:"dataset_id,omitempty"`

	// The ID of the reference set that describes the sequences used by the variants in this set.
	ReferenceSetId *string `json:"reference_set_id,omitempty"`

	PatientId *string `json:"patient_id,omitempty"`

	SampleId *string `json:"sample_id,omitempty"`

	// Optional metadata associated with this variant set. This array can be used to store information about the variant set, such as information found in VCF header fields, that isn't already available in first class fields such as \"name\".
	Metadata *[]Ga4ghVariantSetMetadata `json:"metadata,omitempty"`

}

// GetId returns the Id field if non-nil, zero value otherwise.
func (o *Ga4ghVariantSet) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *Ga4ghVariantSet) GetIdOk() (string, bool) {
	if o == nil || o.Id == nil {
		var ret string
		return ret, false
	}
	return *o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Ga4ghVariantSet) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *Ga4ghVariantSet) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field if non-nil, zero value otherwise.
func (o *Ga4ghVariantSet) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *Ga4ghVariantSet) GetNameOk() (string, bool) {
	if o == nil || o.Name == nil {
		var ret string
		return ret, false
	}
	return *o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Ga4ghVariantSet) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Ga4ghVariantSet) SetName(v string) {
	o.Name = &v
}

// GetDatasetId returns the DatasetId field if non-nil, zero value otherwise.
func (o *Ga4ghVariantSet) GetDatasetId() string {
	if o == nil || o.DatasetId == nil {
		var ret string
		return ret
	}
	return *o.DatasetId
}

// GetDatasetIdOk returns a tuple with the DatasetId field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *Ga4ghVariantSet) GetDatasetIdOk() (string, bool) {
	if o == nil || o.DatasetId == nil {
		var ret string
		return ret, false
	}
	return *o.DatasetId, true
}

// HasDatasetId returns a boolean if a field has been set.
func (o *Ga4ghVariantSet) HasDatasetId() bool {
	if o != nil && o.DatasetId != nil {
		return true
	}

	return false
}

// SetDatasetId gets a reference to the given string and assigns it to the DatasetId field.
func (o *Ga4ghVariantSet) SetDatasetId(v string) {
	o.DatasetId = &v
}

// GetReferenceSetId returns the ReferenceSetId field if non-nil, zero value otherwise.
func (o *Ga4ghVariantSet) GetReferenceSetId() string {
	if o == nil || o.ReferenceSetId == nil {
		var ret string
		return ret
	}
	return *o.ReferenceSetId
}

// GetReferenceSetIdOk returns a tuple with the ReferenceSetId field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *Ga4ghVariantSet) GetReferenceSetIdOk() (string, bool) {
	if o == nil || o.ReferenceSetId == nil {
		var ret string
		return ret, false
	}
	return *o.ReferenceSetId, true
}

// HasReferenceSetId returns a boolean if a field has been set.
func (o *Ga4ghVariantSet) HasReferenceSetId() bool {
	if o != nil && o.ReferenceSetId != nil {
		return true
	}

	return false
}

// SetReferenceSetId gets a reference to the given string and assigns it to the ReferenceSetId field.
func (o *Ga4ghVariantSet) SetReferenceSetId(v string) {
	o.ReferenceSetId = &v
}

// GetPatientId returns the PatientId field if non-nil, zero value otherwise.
func (o *Ga4ghVariantSet) GetPatientId() string {
	if o == nil || o.PatientId == nil {
		var ret string
		return ret
	}
	return *o.PatientId
}

// GetPatientIdOk returns a tuple with the PatientId field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *Ga4ghVariantSet) GetPatientIdOk() (string, bool) {
	if o == nil || o.PatientId == nil {
		var ret string
		return ret, false
	}
	return *o.PatientId, true
}

// HasPatientId returns a boolean if a field has been set.
func (o *Ga4ghVariantSet) HasPatientId() bool {
	if o != nil && o.PatientId != nil {
		return true
	}

	return false
}

// SetPatientId gets a reference to the given string and assigns it to the PatientId field.
func (o *Ga4ghVariantSet) SetPatientId(v string) {
	o.PatientId = &v
}

// GetSampleId returns the SampleId field if non-nil, zero value otherwise.
func (o *Ga4ghVariantSet) GetSampleId() string {
	if o == nil || o.SampleId == nil {
		var ret string
		return ret
	}
	return *o.SampleId
}

// GetSampleIdOk returns a tuple with the SampleId field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *Ga4ghVariantSet) GetSampleIdOk() (string, bool) {
	if o == nil || o.SampleId == nil {
		var ret string
		return ret, false
	}
	return *o.SampleId, true
}

// HasSampleId returns a boolean if a field has been set.
func (o *Ga4ghVariantSet) HasSampleId() bool {
	if o != nil && o.SampleId != nil {
		return true
	}

	return false
}

// SetSampleId gets a reference to the given string and assigns it to the SampleId field.
func (o *Ga4ghVariantSet) SetSampleId(v string) {
	o.SampleId = &v
}

// GetMetadata returns the Metadata field if non-nil, zero value otherwise.
func (o *Ga4ghVariantSet) GetMetadata() []Ga4ghVariantSetMetadata {
	if o == nil || o.Metadata == nil {
		var ret []Ga4ghVariantSetMetadata
		return ret
	}
	return *o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *Ga4ghVariantSet) GetMetadataOk() ([]Ga4ghVariantSetMetadata, bool) {
	if o == nil || o.Metadata == nil {
		var ret []Ga4ghVariantSetMetadata
		return ret, false
	}
	return *o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *Ga4ghVariantSet) HasMetadata() bool {
	if o != nil && o.Metadata != nil {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given []Ga4ghVariantSetMetadata and assigns it to the Metadata field.
func (o *Ga4ghVariantSet) SetMetadata(v []Ga4ghVariantSetMetadata) {
	o.Metadata = &v
}


func (o Ga4ghVariantSet) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.DatasetId != nil {
		toSerialize["dataset_id"] = o.DatasetId
	}
	if o.ReferenceSetId != nil {
		toSerialize["reference_set_id"] = o.ReferenceSetId
	}
	if o.PatientId != nil {
		toSerialize["patient_id"] = o.PatientId
	}
	if o.SampleId != nil {
		toSerialize["sample_id"] = o.SampleId
	}
	if o.Metadata != nil {
		toSerialize["metadata"] = o.Metadata
	}
	return json.Marshal(toSerialize)
}


