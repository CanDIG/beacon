/*
 * CanDIG Services
 *
 * Below is a list of APIs that CanDIG currently supports.<br/><br/>For /search and /count endpoints, refer to [this documentation](https://www.distributedgenomics.ca/static/search_count_services_usage.pdf) for instructions and sample queries.<br/>For all metadata and variant services endpoints, refer to [this documentation](https://www.distributedgenomics.ca/static/metadata_variants_services_sample_queries.pdf) for sample queries.
 *
 * API version: 1.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package client
import (
	"encoding/json"
)

// A `Call` represents the determination of genotype with respect to a particular `Variant`.  It may include associated information such as quality and phasing. For example, a call might assign a probability of 0.32 to the occurrence of a SNP named rs1234 in a call set with the name NA12345.
type Ga4ghCall struct {
	// The name of the call set this variant call belongs to. If this field is not present, the ordering of the call sets from a `SearchCallSetsRequest` over this `VariantSet` is guaranteed to match the ordering of the calls on this `Variant`. The number of results will also be the same.
	CallSetName *string `json:"call_set_name,omitempty"`

	// The ID of the call set this variant call belongs to.  If this field is not present, the ordering of the call sets from a `SearchCallSetsRequest` over this `VariantSet` is guaranteed to match the ordering of the calls on this `Variant`. The number of results will also be the same.
	CallSetId *string `json:"call_set_id,omitempty"`

	Genotype *ProtobufListValue `json:"genotype,omitempty"`

	// If this field is populated, this variant call's genotype ordering implies the phase of the bases and is consistent with any other variant calls on the same contig which have the same phaseset string.
	Phaseset *string `json:"phaseset,omitempty"`

	// The genotype likelihoods for this variant call. Each array entry represents how likely a specific genotype is for this call as log10(P(data | genotype)), analogous to the GL tag in the VCF spec. The value ordering is defined by the GL tag in the VCF spec.
	GenotypeLikelihood *[]float64 `json:"genotype_likelihood,omitempty"`

	Attributes *Ga4ghAttributes `json:"attributes,omitempty"`

}

// GetCallSetName returns the CallSetName field if non-nil, zero value otherwise.
func (o *Ga4ghCall) GetCallSetName() string {
	if o == nil || o.CallSetName == nil {
		var ret string
		return ret
	}
	return *o.CallSetName
}

// GetCallSetNameOk returns a tuple with the CallSetName field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *Ga4ghCall) GetCallSetNameOk() (string, bool) {
	if o == nil || o.CallSetName == nil {
		var ret string
		return ret, false
	}
	return *o.CallSetName, true
}

// HasCallSetName returns a boolean if a field has been set.
func (o *Ga4ghCall) HasCallSetName() bool {
	if o != nil && o.CallSetName != nil {
		return true
	}

	return false
}

// SetCallSetName gets a reference to the given string and assigns it to the CallSetName field.
func (o *Ga4ghCall) SetCallSetName(v string) {
	o.CallSetName = &v
}

// GetCallSetId returns the CallSetId field if non-nil, zero value otherwise.
func (o *Ga4ghCall) GetCallSetId() string {
	if o == nil || o.CallSetId == nil {
		var ret string
		return ret
	}
	return *o.CallSetId
}

// GetCallSetIdOk returns a tuple with the CallSetId field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *Ga4ghCall) GetCallSetIdOk() (string, bool) {
	if o == nil || o.CallSetId == nil {
		var ret string
		return ret, false
	}
	return *o.CallSetId, true
}

// HasCallSetId returns a boolean if a field has been set.
func (o *Ga4ghCall) HasCallSetId() bool {
	if o != nil && o.CallSetId != nil {
		return true
	}

	return false
}

// SetCallSetId gets a reference to the given string and assigns it to the CallSetId field.
func (o *Ga4ghCall) SetCallSetId(v string) {
	o.CallSetId = &v
}

// GetGenotype returns the Genotype field if non-nil, zero value otherwise.
func (o *Ga4ghCall) GetGenotype() ProtobufListValue {
	if o == nil || o.Genotype == nil {
		var ret ProtobufListValue
		return ret
	}
	return *o.Genotype
}

// GetGenotypeOk returns a tuple with the Genotype field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *Ga4ghCall) GetGenotypeOk() (ProtobufListValue, bool) {
	if o == nil || o.Genotype == nil {
		var ret ProtobufListValue
		return ret, false
	}
	return *o.Genotype, true
}

// HasGenotype returns a boolean if a field has been set.
func (o *Ga4ghCall) HasGenotype() bool {
	if o != nil && o.Genotype != nil {
		return true
	}

	return false
}

// SetGenotype gets a reference to the given ProtobufListValue and assigns it to the Genotype field.
func (o *Ga4ghCall) SetGenotype(v ProtobufListValue) {
	o.Genotype = &v
}

// GetPhaseset returns the Phaseset field if non-nil, zero value otherwise.
func (o *Ga4ghCall) GetPhaseset() string {
	if o == nil || o.Phaseset == nil {
		var ret string
		return ret
	}
	return *o.Phaseset
}

// GetPhasesetOk returns a tuple with the Phaseset field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *Ga4ghCall) GetPhasesetOk() (string, bool) {
	if o == nil || o.Phaseset == nil {
		var ret string
		return ret, false
	}
	return *o.Phaseset, true
}

// HasPhaseset returns a boolean if a field has been set.
func (o *Ga4ghCall) HasPhaseset() bool {
	if o != nil && o.Phaseset != nil {
		return true
	}

	return false
}

// SetPhaseset gets a reference to the given string and assigns it to the Phaseset field.
func (o *Ga4ghCall) SetPhaseset(v string) {
	o.Phaseset = &v
}

// GetGenotypeLikelihood returns the GenotypeLikelihood field if non-nil, zero value otherwise.
func (o *Ga4ghCall) GetGenotypeLikelihood() []float64 {
	if o == nil || o.GenotypeLikelihood == nil {
		var ret []float64
		return ret
	}
	return *o.GenotypeLikelihood
}

// GetGenotypeLikelihoodOk returns a tuple with the GenotypeLikelihood field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *Ga4ghCall) GetGenotypeLikelihoodOk() ([]float64, bool) {
	if o == nil || o.GenotypeLikelihood == nil {
		var ret []float64
		return ret, false
	}
	return *o.GenotypeLikelihood, true
}

// HasGenotypeLikelihood returns a boolean if a field has been set.
func (o *Ga4ghCall) HasGenotypeLikelihood() bool {
	if o != nil && o.GenotypeLikelihood != nil {
		return true
	}

	return false
}

// SetGenotypeLikelihood gets a reference to the given []float64 and assigns it to the GenotypeLikelihood field.
func (o *Ga4ghCall) SetGenotypeLikelihood(v []float64) {
	o.GenotypeLikelihood = &v
}

// GetAttributes returns the Attributes field if non-nil, zero value otherwise.
func (o *Ga4ghCall) GetAttributes() Ga4ghAttributes {
	if o == nil || o.Attributes == nil {
		var ret Ga4ghAttributes
		return ret
	}
	return *o.Attributes
}

// GetAttributesOk returns a tuple with the Attributes field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *Ga4ghCall) GetAttributesOk() (Ga4ghAttributes, bool) {
	if o == nil || o.Attributes == nil {
		var ret Ga4ghAttributes
		return ret, false
	}
	return *o.Attributes, true
}

// HasAttributes returns a boolean if a field has been set.
func (o *Ga4ghCall) HasAttributes() bool {
	if o != nil && o.Attributes != nil {
		return true
	}

	return false
}

// SetAttributes gets a reference to the given Ga4ghAttributes and assigns it to the Attributes field.
func (o *Ga4ghCall) SetAttributes(v Ga4ghAttributes) {
	o.Attributes = &v
}


func (o Ga4ghCall) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.CallSetName != nil {
		toSerialize["call_set_name"] = o.CallSetName
	}
	if o.CallSetId != nil {
		toSerialize["call_set_id"] = o.CallSetId
	}
	if o.Genotype != nil {
		toSerialize["genotype"] = o.Genotype
	}
	if o.Phaseset != nil {
		toSerialize["phaseset"] = o.Phaseset
	}
	if o.GenotypeLikelihood != nil {
		toSerialize["genotype_likelihood"] = o.GenotypeLikelihood
	}
	if o.Attributes != nil {
		toSerialize["attributes"] = o.Attributes
	}
	return json.Marshal(toSerialize)
}


