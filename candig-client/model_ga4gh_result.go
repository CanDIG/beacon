/*
 * CanDIG Services
 *
 * Below is a list of APIs that CanDIG currently supports.<br/><br/>For /search and /count endpoints, refer to [this documentation](https://www.distributedgenomics.ca/static/search_count_services_usage.pdf) for instructions and sample queries.<br/>For all metadata and variant services endpoints, refer to [this documentation](https://www.distributedgenomics.ca/static/metadata_variants_services_sample_queries.pdf) for sample queries.
 *
 * API version: 1.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package client

import (
	"encoding/json"
)

// Ga4ghResult struct for Ga4ghResult
type Ga4ghResult struct {
	Table *string `json:"table,omitempty"`

	Fields *[]string `json:"fields,omitempty"`

	Start *string `json:"start,omitempty"`

	End *string `json:"end,omitempty"`

	// Reference genome. Used if the user is requesting variants endpoint.
	ReferenceName *string `json:"referenceName,omitempty"`

	// Gene name. Used if the user is requesting variantsByGene endpoint.
	Gene *string `json:"gene,omitempty"`

	// List of fields to aggregate by and return counts. Overrides response format if included.
	Count *[]string `json:"count,omitempty"`
}

// GetTable returns the Table field if non-nil, zero value otherwise.
func (o *Ga4ghResult) GetTable() string {
	if o == nil || o.Table == nil {
		var ret string
		return ret
	}
	return *o.Table
}

// GetTableOk returns a tuple with the Table field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *Ga4ghResult) GetTableOk() (string, bool) {
	if o == nil || o.Table == nil {
		var ret string
		return ret, false
	}
	return *o.Table, true
}

// HasTable returns a boolean if a field has been set.
func (o *Ga4ghResult) HasTable() bool {
	if o != nil && o.Table != nil {
		return true
	}

	return false
}

// SetTable gets a reference to the given string and assigns it to the Table field.
func (o *Ga4ghResult) SetTable(v string) {
	o.Table = &v
}

// GetFields returns the Fields field if non-nil, zero value otherwise.
func (o *Ga4ghResult) GetFields() []string {
	if o == nil || o.Fields == nil {
		var ret []string
		return ret
	}
	return *o.Fields
}

// GetFieldsOk returns a tuple with the Fields field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *Ga4ghResult) GetFieldsOk() ([]string, bool) {
	if o == nil || o.Fields == nil {
		var ret []string
		return ret, false
	}
	return *o.Fields, true
}

// HasFields returns a boolean if a field has been set.
func (o *Ga4ghResult) HasFields() bool {
	if o != nil && o.Fields != nil {
		return true
	}

	return false
}

// SetFields gets a reference to the given []string and assigns it to the Fields field.
func (o *Ga4ghResult) SetFields(v []string) {
	o.Fields = &v
}

// GetStart returns the Start field if non-nil, zero value otherwise.
func (o *Ga4ghResult) GetStart() string {
	if o == nil || o.Start == nil {
		var ret string
		return ret
	}
	return *o.Start
}

// GetStartOk returns a tuple with the Start field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *Ga4ghResult) GetStartOk() (string, bool) {
	if o == nil || o.Start == nil {
		var ret string
		return ret, false
	}
	return *o.Start, true
}

// HasStart returns a boolean if a field has been set.
func (o *Ga4ghResult) HasStart() bool {
	if o != nil && o.Start != nil {
		return true
	}

	return false
}

// SetStart gets a reference to the given string and assigns it to the Start field.
func (o *Ga4ghResult) SetStart(v string) {
	o.Start = &v
}

// GetEnd returns the End field if non-nil, zero value otherwise.
func (o *Ga4ghResult) GetEnd() string {
	if o == nil || o.End == nil {
		var ret string
		return ret
	}
	return *o.End
}

// GetEndOk returns a tuple with the End field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *Ga4ghResult) GetEndOk() (string, bool) {
	if o == nil || o.End == nil {
		var ret string
		return ret, false
	}
	return *o.End, true
}

// HasEnd returns a boolean if a field has been set.
func (o *Ga4ghResult) HasEnd() bool {
	if o != nil && o.End != nil {
		return true
	}

	return false
}

// SetEnd gets a reference to the given string and assigns it to the End field.
func (o *Ga4ghResult) SetEnd(v string) {
	o.End = &v
}

// GetReferenceName returns the ReferenceName field if non-nil, zero value otherwise.
func (o *Ga4ghResult) GetReferenceName() string {
	if o == nil || o.ReferenceName == nil {
		var ret string
		return ret
	}
	return *o.ReferenceName
}

// GetReferenceNameOk returns a tuple with the ReferenceName field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *Ga4ghResult) GetReferenceNameOk() (string, bool) {
	if o == nil || o.ReferenceName == nil {
		var ret string
		return ret, false
	}
	return *o.ReferenceName, true
}

// HasReferenceName returns a boolean if a field has been set.
func (o *Ga4ghResult) HasReferenceName() bool {
	if o != nil && o.ReferenceName != nil {
		return true
	}

	return false
}

// SetReferenceName gets a reference to the given string and assigns it to the ReferenceName field.
func (o *Ga4ghResult) SetReferenceName(v string) {
	o.ReferenceName = &v
}

// GetGene returns the Gene field if non-nil, zero value otherwise.
func (o *Ga4ghResult) GetGene() string {
	if o == nil || o.Gene == nil {
		var ret string
		return ret
	}
	return *o.Gene
}

// GetGeneOk returns a tuple with the Gene field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *Ga4ghResult) GetGeneOk() (string, bool) {
	if o == nil || o.Gene == nil {
		var ret string
		return ret, false
	}
	return *o.Gene, true
}

// HasGene returns a boolean if a field has been set.
func (o *Ga4ghResult) HasGene() bool {
	if o != nil && o.Gene != nil {
		return true
	}

	return false
}

// SetGene gets a reference to the given string and assigns it to the Gene field.
func (o *Ga4ghResult) SetGene(v string) {
	o.Gene = &v
}

// GetCount returns the Count field if non-nil, zero value otherwise.
func (o *Ga4ghResult) GetCount() []string {
	if o == nil || o.Count == nil {
		var ret []string
		return ret
	}
	return *o.Count
}

// GetCountOk returns a tuple with the Count field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *Ga4ghResult) GetCountOk() ([]string, bool) {
	if o == nil || o.Count == nil {
		var ret []string
		return ret, false
	}
	return *o.Count, true
}

// HasCount returns a boolean if a field has been set.
func (o *Ga4ghResult) HasCount() bool {
	if o != nil && o.Count != nil {
		return true
	}

	return false
}

// SetCount gets a reference to the given []string and assigns it to the Count field.
func (o *Ga4ghResult) SetCount(v []string) {
	o.Count = &v
}

// MarshalJSON returns the JSON representation of the model.
func (o Ga4ghResult) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Table != nil {
		toSerialize["table"] = o.Table
	}
	if o.Fields != nil {
		toSerialize["fields"] = o.Fields
	}
	if o.Start != nil {
		toSerialize["start"] = o.Start
	}
	if o.End != nil {
		toSerialize["end"] = o.End
	}
	if o.ReferenceName != nil {
		toSerialize["referenceName"] = o.ReferenceName
	}
	if o.Gene != nil {
		toSerialize["gene"] = o.Gene
	}
	if o.Count != nil {
		toSerialize["count"] = o.Count
	}
	return json.Marshal(toSerialize)
}
