/*
 * CanDIG Services
 *
 * Below is a list of APIs that CanDIG currently supports.<br/><br/>For /search and /count endpoints, refer to [this documentation](https://www.distributedgenomics.ca/static/search_count_services_usage.pdf) for instructions and sample queries.<br/>For all metadata and variant services endpoints, refer to [this documentation](https://www.distributedgenomics.ca/static/metadata_variants_services_sample_queries.pdf) for sample queries.
 *
 * API version: 1.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package client

import (
	"encoding/json"
)

// Ga4ghExpressionAnalysis struct for Ga4ghExpressionAnalysis
type Ga4ghExpressionAnalysis struct {
	// This is unique in the context of the server instance.
	Id *string `json:"id,omitempty"`

	// The ID of the dataset this object belongs to.
	DatasetId *string `json:"datasetId,omitempty"`

	// This is a label or symbolic identifier for this object.
	Name *string `json:"name,omitempty"`

	// This attribute contains human readable text.
	Description *string `json:"description,omitempty"`

	// The :ref:`ISO 8601<metadata_date_time>` time at which this record was created.
	Created *string `json:"created,omitempty"`

	// The :ref:`ISO 8601<metadata_date_time>` time at which this record was updated.
	Updated *string `json:"updated,omitempty"`

	SampleId *string `json:"sampleId,omitempty"`

	ReadLength *string `json:"readLength,omitempty"`

	Reference *string `json:"reference,omitempty"`

	AlignmentTool *string `json:"alignmentTool,omitempty"`

	BamHandling *string `json:"bamHandling,omitempty"`

	ExpressionEstimation *string `json:"expressionEstimation,omitempty"`

	ExpressionAnalysisId *string `json:"expressionAnalysisId,omitempty"`

	SequencingId *string `json:"sequencingId,omitempty"`

	Site *string `json:"site,omitempty"`
}

// GetId returns the Id field if non-nil, zero value otherwise.
func (o *Ga4ghExpressionAnalysis) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *Ga4ghExpressionAnalysis) GetIdOk() (string, bool) {
	if o == nil || o.Id == nil {
		var ret string
		return ret, false
	}
	return *o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Ga4ghExpressionAnalysis) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *Ga4ghExpressionAnalysis) SetId(v string) {
	o.Id = &v
}

// GetDatasetId returns the DatasetId field if non-nil, zero value otherwise.
func (o *Ga4ghExpressionAnalysis) GetDatasetId() string {
	if o == nil || o.DatasetId == nil {
		var ret string
		return ret
	}
	return *o.DatasetId
}

// GetDatasetIdOk returns a tuple with the DatasetId field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *Ga4ghExpressionAnalysis) GetDatasetIdOk() (string, bool) {
	if o == nil || o.DatasetId == nil {
		var ret string
		return ret, false
	}
	return *o.DatasetId, true
}

// HasDatasetId returns a boolean if a field has been set.
func (o *Ga4ghExpressionAnalysis) HasDatasetId() bool {
	if o != nil && o.DatasetId != nil {
		return true
	}

	return false
}

// SetDatasetId gets a reference to the given string and assigns it to the DatasetId field.
func (o *Ga4ghExpressionAnalysis) SetDatasetId(v string) {
	o.DatasetId = &v
}

// GetName returns the Name field if non-nil, zero value otherwise.
func (o *Ga4ghExpressionAnalysis) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *Ga4ghExpressionAnalysis) GetNameOk() (string, bool) {
	if o == nil || o.Name == nil {
		var ret string
		return ret, false
	}
	return *o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Ga4ghExpressionAnalysis) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Ga4ghExpressionAnalysis) SetName(v string) {
	o.Name = &v
}

// GetDescription returns the Description field if non-nil, zero value otherwise.
func (o *Ga4ghExpressionAnalysis) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *Ga4ghExpressionAnalysis) GetDescriptionOk() (string, bool) {
	if o == nil || o.Description == nil {
		var ret string
		return ret, false
	}
	return *o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *Ga4ghExpressionAnalysis) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *Ga4ghExpressionAnalysis) SetDescription(v string) {
	o.Description = &v
}

// GetCreated returns the Created field if non-nil, zero value otherwise.
func (o *Ga4ghExpressionAnalysis) GetCreated() string {
	if o == nil || o.Created == nil {
		var ret string
		return ret
	}
	return *o.Created
}

// GetCreatedOk returns a tuple with the Created field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *Ga4ghExpressionAnalysis) GetCreatedOk() (string, bool) {
	if o == nil || o.Created == nil {
		var ret string
		return ret, false
	}
	return *o.Created, true
}

// HasCreated returns a boolean if a field has been set.
func (o *Ga4ghExpressionAnalysis) HasCreated() bool {
	if o != nil && o.Created != nil {
		return true
	}

	return false
}

// SetCreated gets a reference to the given string and assigns it to the Created field.
func (o *Ga4ghExpressionAnalysis) SetCreated(v string) {
	o.Created = &v
}

// GetUpdated returns the Updated field if non-nil, zero value otherwise.
func (o *Ga4ghExpressionAnalysis) GetUpdated() string {
	if o == nil || o.Updated == nil {
		var ret string
		return ret
	}
	return *o.Updated
}

// GetUpdatedOk returns a tuple with the Updated field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *Ga4ghExpressionAnalysis) GetUpdatedOk() (string, bool) {
	if o == nil || o.Updated == nil {
		var ret string
		return ret, false
	}
	return *o.Updated, true
}

// HasUpdated returns a boolean if a field has been set.
func (o *Ga4ghExpressionAnalysis) HasUpdated() bool {
	if o != nil && o.Updated != nil {
		return true
	}

	return false
}

// SetUpdated gets a reference to the given string and assigns it to the Updated field.
func (o *Ga4ghExpressionAnalysis) SetUpdated(v string) {
	o.Updated = &v
}

// GetSampleId returns the SampleId field if non-nil, zero value otherwise.
func (o *Ga4ghExpressionAnalysis) GetSampleId() string {
	if o == nil || o.SampleId == nil {
		var ret string
		return ret
	}
	return *o.SampleId
}

// GetSampleIdOk returns a tuple with the SampleId field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *Ga4ghExpressionAnalysis) GetSampleIdOk() (string, bool) {
	if o == nil || o.SampleId == nil {
		var ret string
		return ret, false
	}
	return *o.SampleId, true
}

// HasSampleId returns a boolean if a field has been set.
func (o *Ga4ghExpressionAnalysis) HasSampleId() bool {
	if o != nil && o.SampleId != nil {
		return true
	}

	return false
}

// SetSampleId gets a reference to the given string and assigns it to the SampleId field.
func (o *Ga4ghExpressionAnalysis) SetSampleId(v string) {
	o.SampleId = &v
}

// GetReadLength returns the ReadLength field if non-nil, zero value otherwise.
func (o *Ga4ghExpressionAnalysis) GetReadLength() string {
	if o == nil || o.ReadLength == nil {
		var ret string
		return ret
	}
	return *o.ReadLength
}

// GetReadLengthOk returns a tuple with the ReadLength field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *Ga4ghExpressionAnalysis) GetReadLengthOk() (string, bool) {
	if o == nil || o.ReadLength == nil {
		var ret string
		return ret, false
	}
	return *o.ReadLength, true
}

// HasReadLength returns a boolean if a field has been set.
func (o *Ga4ghExpressionAnalysis) HasReadLength() bool {
	if o != nil && o.ReadLength != nil {
		return true
	}

	return false
}

// SetReadLength gets a reference to the given string and assigns it to the ReadLength field.
func (o *Ga4ghExpressionAnalysis) SetReadLength(v string) {
	o.ReadLength = &v
}

// GetReference returns the Reference field if non-nil, zero value otherwise.
func (o *Ga4ghExpressionAnalysis) GetReference() string {
	if o == nil || o.Reference == nil {
		var ret string
		return ret
	}
	return *o.Reference
}

// GetReferenceOk returns a tuple with the Reference field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *Ga4ghExpressionAnalysis) GetReferenceOk() (string, bool) {
	if o == nil || o.Reference == nil {
		var ret string
		return ret, false
	}
	return *o.Reference, true
}

// HasReference returns a boolean if a field has been set.
func (o *Ga4ghExpressionAnalysis) HasReference() bool {
	if o != nil && o.Reference != nil {
		return true
	}

	return false
}

// SetReference gets a reference to the given string and assigns it to the Reference field.
func (o *Ga4ghExpressionAnalysis) SetReference(v string) {
	o.Reference = &v
}

// GetAlignmentTool returns the AlignmentTool field if non-nil, zero value otherwise.
func (o *Ga4ghExpressionAnalysis) GetAlignmentTool() string {
	if o == nil || o.AlignmentTool == nil {
		var ret string
		return ret
	}
	return *o.AlignmentTool
}

// GetAlignmentToolOk returns a tuple with the AlignmentTool field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *Ga4ghExpressionAnalysis) GetAlignmentToolOk() (string, bool) {
	if o == nil || o.AlignmentTool == nil {
		var ret string
		return ret, false
	}
	return *o.AlignmentTool, true
}

// HasAlignmentTool returns a boolean if a field has been set.
func (o *Ga4ghExpressionAnalysis) HasAlignmentTool() bool {
	if o != nil && o.AlignmentTool != nil {
		return true
	}

	return false
}

// SetAlignmentTool gets a reference to the given string and assigns it to the AlignmentTool field.
func (o *Ga4ghExpressionAnalysis) SetAlignmentTool(v string) {
	o.AlignmentTool = &v
}

// GetBamHandling returns the BamHandling field if non-nil, zero value otherwise.
func (o *Ga4ghExpressionAnalysis) GetBamHandling() string {
	if o == nil || o.BamHandling == nil {
		var ret string
		return ret
	}
	return *o.BamHandling
}

// GetBamHandlingOk returns a tuple with the BamHandling field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *Ga4ghExpressionAnalysis) GetBamHandlingOk() (string, bool) {
	if o == nil || o.BamHandling == nil {
		var ret string
		return ret, false
	}
	return *o.BamHandling, true
}

// HasBamHandling returns a boolean if a field has been set.
func (o *Ga4ghExpressionAnalysis) HasBamHandling() bool {
	if o != nil && o.BamHandling != nil {
		return true
	}

	return false
}

// SetBamHandling gets a reference to the given string and assigns it to the BamHandling field.
func (o *Ga4ghExpressionAnalysis) SetBamHandling(v string) {
	o.BamHandling = &v
}

// GetExpressionEstimation returns the ExpressionEstimation field if non-nil, zero value otherwise.
func (o *Ga4ghExpressionAnalysis) GetExpressionEstimation() string {
	if o == nil || o.ExpressionEstimation == nil {
		var ret string
		return ret
	}
	return *o.ExpressionEstimation
}

// GetExpressionEstimationOk returns a tuple with the ExpressionEstimation field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *Ga4ghExpressionAnalysis) GetExpressionEstimationOk() (string, bool) {
	if o == nil || o.ExpressionEstimation == nil {
		var ret string
		return ret, false
	}
	return *o.ExpressionEstimation, true
}

// HasExpressionEstimation returns a boolean if a field has been set.
func (o *Ga4ghExpressionAnalysis) HasExpressionEstimation() bool {
	if o != nil && o.ExpressionEstimation != nil {
		return true
	}

	return false
}

// SetExpressionEstimation gets a reference to the given string and assigns it to the ExpressionEstimation field.
func (o *Ga4ghExpressionAnalysis) SetExpressionEstimation(v string) {
	o.ExpressionEstimation = &v
}

// GetExpressionAnalysisId returns the ExpressionAnalysisId field if non-nil, zero value otherwise.
func (o *Ga4ghExpressionAnalysis) GetExpressionAnalysisId() string {
	if o == nil || o.ExpressionAnalysisId == nil {
		var ret string
		return ret
	}
	return *o.ExpressionAnalysisId
}

// GetExpressionAnalysisIdOk returns a tuple with the ExpressionAnalysisId field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *Ga4ghExpressionAnalysis) GetExpressionAnalysisIdOk() (string, bool) {
	if o == nil || o.ExpressionAnalysisId == nil {
		var ret string
		return ret, false
	}
	return *o.ExpressionAnalysisId, true
}

// HasExpressionAnalysisId returns a boolean if a field has been set.
func (o *Ga4ghExpressionAnalysis) HasExpressionAnalysisId() bool {
	if o != nil && o.ExpressionAnalysisId != nil {
		return true
	}

	return false
}

// SetExpressionAnalysisId gets a reference to the given string and assigns it to the ExpressionAnalysisId field.
func (o *Ga4ghExpressionAnalysis) SetExpressionAnalysisId(v string) {
	o.ExpressionAnalysisId = &v
}

// GetSequencingId returns the SequencingId field if non-nil, zero value otherwise.
func (o *Ga4ghExpressionAnalysis) GetSequencingId() string {
	if o == nil || o.SequencingId == nil {
		var ret string
		return ret
	}
	return *o.SequencingId
}

// GetSequencingIdOk returns a tuple with the SequencingId field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *Ga4ghExpressionAnalysis) GetSequencingIdOk() (string, bool) {
	if o == nil || o.SequencingId == nil {
		var ret string
		return ret, false
	}
	return *o.SequencingId, true
}

// HasSequencingId returns a boolean if a field has been set.
func (o *Ga4ghExpressionAnalysis) HasSequencingId() bool {
	if o != nil && o.SequencingId != nil {
		return true
	}

	return false
}

// SetSequencingId gets a reference to the given string and assigns it to the SequencingId field.
func (o *Ga4ghExpressionAnalysis) SetSequencingId(v string) {
	o.SequencingId = &v
}

// GetSite returns the Site field if non-nil, zero value otherwise.
func (o *Ga4ghExpressionAnalysis) GetSite() string {
	if o == nil || o.Site == nil {
		var ret string
		return ret
	}
	return *o.Site
}

// GetSiteOk returns a tuple with the Site field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *Ga4ghExpressionAnalysis) GetSiteOk() (string, bool) {
	if o == nil || o.Site == nil {
		var ret string
		return ret, false
	}
	return *o.Site, true
}

// HasSite returns a boolean if a field has been set.
func (o *Ga4ghExpressionAnalysis) HasSite() bool {
	if o != nil && o.Site != nil {
		return true
	}

	return false
}

// SetSite gets a reference to the given string and assigns it to the Site field.
func (o *Ga4ghExpressionAnalysis) SetSite(v string) {
	o.Site = &v
}

// MarshalJSON returns the JSON representation of the model.
func (o Ga4ghExpressionAnalysis) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.DatasetId != nil {
		toSerialize["datasetId"] = o.DatasetId
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if o.Created != nil {
		toSerialize["created"] = o.Created
	}
	if o.Updated != nil {
		toSerialize["updated"] = o.Updated
	}
	if o.SampleId != nil {
		toSerialize["sampleId"] = o.SampleId
	}
	if o.ReadLength != nil {
		toSerialize["readLength"] = o.ReadLength
	}
	if o.Reference != nil {
		toSerialize["reference"] = o.Reference
	}
	if o.AlignmentTool != nil {
		toSerialize["alignmentTool"] = o.AlignmentTool
	}
	if o.BamHandling != nil {
		toSerialize["bamHandling"] = o.BamHandling
	}
	if o.ExpressionEstimation != nil {
		toSerialize["expressionEstimation"] = o.ExpressionEstimation
	}
	if o.ExpressionAnalysisId != nil {
		toSerialize["expressionAnalysisId"] = o.ExpressionAnalysisId
	}
	if o.SequencingId != nil {
		toSerialize["sequencingId"] = o.SequencingId
	}
	if o.Site != nil {
		toSerialize["site"] = o.Site
	}
	return json.Marshal(toSerialize)
}
