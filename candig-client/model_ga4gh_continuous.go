/*
 * CanDIG Services
 *
 * Below is a list of APIs that CanDIG currently supports.<br/><br/>For /search and /count endpoints, refer to [this documentation](https://www.distributedgenomics.ca/static/search_count_services_usage.pdf) for instructions and sample queries.<br/>For all metadata and variant services endpoints, refer to [this documentation](https://www.distributedgenomics.ca/static/metadata_variants_services_sample_queries.pdf) for sample queries.
 *
 * API version: 1.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package client

import (
	"encoding/json"
)

// Ga4ghContinuous This message defines a format for exchanging continuous valued signal data, such as those produced experimentally (e.g. ChIP-Seq data) or through  calculations (e.g. conservation scores). It can be used, for example, to share data from Wiggle, BigWig, and BedGraph sources.
type Ga4ghContinuous struct {
	// The start position at which this signal occurs (0-based). This corresponds to the first base of the string of reference bases. Genomic positions are non-negative integers less than the reference length.
	Start *string `json:"start,omitempty"`

	// The contiguous data values. Unsampled bases are given as NaN.
	Values *[]float64 `json:"values,omitempty"`

	// Identifier for the containing continous set.
	ContinuousSetId *string `json:"continuous_set_id,omitempty"`

	// The reference on which this signal is defined (e.g. `chr20` or `X`).
	ReferenceName *string `json:"reference_name,omitempty"`
}

// GetStart returns the Start field if non-nil, zero value otherwise.
func (o *Ga4ghContinuous) GetStart() string {
	if o == nil || o.Start == nil {
		var ret string
		return ret
	}
	return *o.Start
}

// GetStartOk returns a tuple with the Start field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *Ga4ghContinuous) GetStartOk() (string, bool) {
	if o == nil || o.Start == nil {
		var ret string
		return ret, false
	}
	return *o.Start, true
}

// HasStart returns a boolean if a field has been set.
func (o *Ga4ghContinuous) HasStart() bool {
	if o != nil && o.Start != nil {
		return true
	}

	return false
}

// SetStart gets a reference to the given string and assigns it to the Start field.
func (o *Ga4ghContinuous) SetStart(v string) {
	o.Start = &v
}

// GetValues returns the Values field if non-nil, zero value otherwise.
func (o *Ga4ghContinuous) GetValues() []float64 {
	if o == nil || o.Values == nil {
		var ret []float64
		return ret
	}
	return *o.Values
}

// GetValuesOk returns a tuple with the Values field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *Ga4ghContinuous) GetValuesOk() ([]float64, bool) {
	if o == nil || o.Values == nil {
		var ret []float64
		return ret, false
	}
	return *o.Values, true
}

// HasValues returns a boolean if a field has been set.
func (o *Ga4ghContinuous) HasValues() bool {
	if o != nil && o.Values != nil {
		return true
	}

	return false
}

// SetValues gets a reference to the given []float64 and assigns it to the Values field.
func (o *Ga4ghContinuous) SetValues(v []float64) {
	o.Values = &v
}

// GetContinuousSetId returns the ContinuousSetId field if non-nil, zero value otherwise.
func (o *Ga4ghContinuous) GetContinuousSetId() string {
	if o == nil || o.ContinuousSetId == nil {
		var ret string
		return ret
	}
	return *o.ContinuousSetId
}

// GetContinuousSetIdOk returns a tuple with the ContinuousSetId field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *Ga4ghContinuous) GetContinuousSetIdOk() (string, bool) {
	if o == nil || o.ContinuousSetId == nil {
		var ret string
		return ret, false
	}
	return *o.ContinuousSetId, true
}

// HasContinuousSetId returns a boolean if a field has been set.
func (o *Ga4ghContinuous) HasContinuousSetId() bool {
	if o != nil && o.ContinuousSetId != nil {
		return true
	}

	return false
}

// SetContinuousSetId gets a reference to the given string and assigns it to the ContinuousSetId field.
func (o *Ga4ghContinuous) SetContinuousSetId(v string) {
	o.ContinuousSetId = &v
}

// GetReferenceName returns the ReferenceName field if non-nil, zero value otherwise.
func (o *Ga4ghContinuous) GetReferenceName() string {
	if o == nil || o.ReferenceName == nil {
		var ret string
		return ret
	}
	return *o.ReferenceName
}

// GetReferenceNameOk returns a tuple with the ReferenceName field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *Ga4ghContinuous) GetReferenceNameOk() (string, bool) {
	if o == nil || o.ReferenceName == nil {
		var ret string
		return ret, false
	}
	return *o.ReferenceName, true
}

// HasReferenceName returns a boolean if a field has been set.
func (o *Ga4ghContinuous) HasReferenceName() bool {
	if o != nil && o.ReferenceName != nil {
		return true
	}

	return false
}

// SetReferenceName gets a reference to the given string and assigns it to the ReferenceName field.
func (o *Ga4ghContinuous) SetReferenceName(v string) {
	o.ReferenceName = &v
}

// MarshalJSON returns the JSON representation of the model.
func (o Ga4ghContinuous) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Start != nil {
		toSerialize["start"] = o.Start
	}
	if o.Values != nil {
		toSerialize["values"] = o.Values
	}
	if o.ContinuousSetId != nil {
		toSerialize["continuous_set_id"] = o.ContinuousSetId
	}
	if o.ReferenceName != nil {
		toSerialize["reference_name"] = o.ReferenceName
	}
	return json.Marshal(toSerialize)
}
