/*
 * CanDIG Services
 *
 * Below is a list of APIs that CanDIG currently supports.<br/><br/>For /search and /count endpoints, refer to [this documentation](https://www.distributedgenomics.ca/static/search_count_services_usage.pdf) for instructions and sample queries.<br/>For all metadata and variant services endpoints, refer to [this documentation](https://www.distributedgenomics.ca/static/metadata_variants_services_sample_queries.pdf) for sample queries.
 *
 * API version: 1.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package client

import (
	"encoding/json"
)

// Ga4ghVariant A `Variant` represents a change in DNA sequence relative to some reference. For example, a variant could represent a SNP or an insertion. Variants belong to a `VariantSet`. This is equivalent to a row in VCF.
type Ga4ghVariant struct {
	// The variant ID.
	Id *string `json:"id,omitempty"`

	// The ID of the `VariantSet` this variant belongs to. This transitively defines the `ReferenceSet` against which the `Variant` is to be interpreted.
	VariantSetId *string `json:"variant_set_id,omitempty"`

	// Names for the variant, for example a RefSNP ID.
	Names *[]string `json:"names,omitempty"`

	// The date this variant was created in milliseconds from the epoch.
	Created *string `json:"created,omitempty"`

	// The time at which this variant was last updated in milliseconds from the epoch.
	Updated *string `json:"updated,omitempty"`

	ReferenceName *string `json:"reference_name,omitempty"`

	// The start position at which this variant occurs (0-based). This corresponds to the first base of the string of reference bases. Genomic positions are non-negative integers less than reference length. Variants spanning the join of circular genomes are represented as two variants one on each side of the join (position 0).
	Start *string `json:"start,omitempty"`

	// The end position (exclusive), resulting in [start, end) closed-open interval. This is typically calculated by `start + referenceBases.length`.
	End *string `json:"end,omitempty"`

	// The reference bases for this variant. They start at the given start position.
	ReferenceBases *string `json:"reference_bases,omitempty"`

	// The bases that appear instead of the reference bases. Multiple alternate alleles are possible.
	AlternateBases *[]string `json:"alternate_bases,omitempty"`

	Attributes *Ga4ghAttributes `json:"attributes,omitempty"`

	// The variant calls for this particular variant. Each one represents the determination of genotype with respect to this variant. `Call`s in this array are implicitly associated with this `Variant`.
	Calls *[]Ga4ghCall `json:"calls,omitempty"`

	VariantType *string `json:"variant_type,omitempty"`

	Svlen *string `json:"svlen,omitempty"`

	Cipos *[]int32 `json:"cipos,omitempty"`

	Ciend *[]int32 `json:"ciend,omitempty"`

	// True if filters were applied for this variant. VCF column 7 \"FILTER\" any value other than the missing value.
	FiltersApplied *bool `json:"filters_applied,omitempty"`

	// True if all filters for this variant passed. VCF column 7 \"FILTER\" value PASS.
	FiltersPassed *bool `json:"filters_passed,omitempty"`

	// Zero or more filters that failed for this variant. VCF column 7 \"FILTER\" shared across all alleles in the same VCF record.
	FiltersFailed *[]string `json:"filters_failed,omitempty"`

	// Patient_Id, this field is not populated in the database, but generated on-the-fly when variants are being returned.
	PatientId *string `json:"patientId,omitempty"`
}

// GetId returns the Id field if non-nil, zero value otherwise.
func (o *Ga4ghVariant) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *Ga4ghVariant) GetIdOk() (string, bool) {
	if o == nil || o.Id == nil {
		var ret string
		return ret, false
	}
	return *o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Ga4ghVariant) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *Ga4ghVariant) SetId(v string) {
	o.Id = &v
}

// GetVariantSetId returns the VariantSetId field if non-nil, zero value otherwise.
func (o *Ga4ghVariant) GetVariantSetId() string {
	if o == nil || o.VariantSetId == nil {
		var ret string
		return ret
	}
	return *o.VariantSetId
}

// GetVariantSetIdOk returns a tuple with the VariantSetId field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *Ga4ghVariant) GetVariantSetIdOk() (string, bool) {
	if o == nil || o.VariantSetId == nil {
		var ret string
		return ret, false
	}
	return *o.VariantSetId, true
}

// HasVariantSetId returns a boolean if a field has been set.
func (o *Ga4ghVariant) HasVariantSetId() bool {
	if o != nil && o.VariantSetId != nil {
		return true
	}

	return false
}

// SetVariantSetId gets a reference to the given string and assigns it to the VariantSetId field.
func (o *Ga4ghVariant) SetVariantSetId(v string) {
	o.VariantSetId = &v
}

// GetNames returns the Names field if non-nil, zero value otherwise.
func (o *Ga4ghVariant) GetNames() []string {
	if o == nil || o.Names == nil {
		var ret []string
		return ret
	}
	return *o.Names
}

// GetNamesOk returns a tuple with the Names field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *Ga4ghVariant) GetNamesOk() ([]string, bool) {
	if o == nil || o.Names == nil {
		var ret []string
		return ret, false
	}
	return *o.Names, true
}

// HasNames returns a boolean if a field has been set.
func (o *Ga4ghVariant) HasNames() bool {
	if o != nil && o.Names != nil {
		return true
	}

	return false
}

// SetNames gets a reference to the given []string and assigns it to the Names field.
func (o *Ga4ghVariant) SetNames(v []string) {
	o.Names = &v
}

// GetCreated returns the Created field if non-nil, zero value otherwise.
func (o *Ga4ghVariant) GetCreated() string {
	if o == nil || o.Created == nil {
		var ret string
		return ret
	}
	return *o.Created
}

// GetCreatedOk returns a tuple with the Created field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *Ga4ghVariant) GetCreatedOk() (string, bool) {
	if o == nil || o.Created == nil {
		var ret string
		return ret, false
	}
	return *o.Created, true
}

// HasCreated returns a boolean if a field has been set.
func (o *Ga4ghVariant) HasCreated() bool {
	if o != nil && o.Created != nil {
		return true
	}

	return false
}

// SetCreated gets a reference to the given string and assigns it to the Created field.
func (o *Ga4ghVariant) SetCreated(v string) {
	o.Created = &v
}

// GetUpdated returns the Updated field if non-nil, zero value otherwise.
func (o *Ga4ghVariant) GetUpdated() string {
	if o == nil || o.Updated == nil {
		var ret string
		return ret
	}
	return *o.Updated
}

// GetUpdatedOk returns a tuple with the Updated field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *Ga4ghVariant) GetUpdatedOk() (string, bool) {
	if o == nil || o.Updated == nil {
		var ret string
		return ret, false
	}
	return *o.Updated, true
}

// HasUpdated returns a boolean if a field has been set.
func (o *Ga4ghVariant) HasUpdated() bool {
	if o != nil && o.Updated != nil {
		return true
	}

	return false
}

// SetUpdated gets a reference to the given string and assigns it to the Updated field.
func (o *Ga4ghVariant) SetUpdated(v string) {
	o.Updated = &v
}

// GetReferenceName returns the ReferenceName field if non-nil, zero value otherwise.
func (o *Ga4ghVariant) GetReferenceName() string {
	if o == nil || o.ReferenceName == nil {
		var ret string
		return ret
	}
	return *o.ReferenceName
}

// GetReferenceNameOk returns a tuple with the ReferenceName field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *Ga4ghVariant) GetReferenceNameOk() (string, bool) {
	if o == nil || o.ReferenceName == nil {
		var ret string
		return ret, false
	}
	return *o.ReferenceName, true
}

// HasReferenceName returns a boolean if a field has been set.
func (o *Ga4ghVariant) HasReferenceName() bool {
	if o != nil && o.ReferenceName != nil {
		return true
	}

	return false
}

// SetReferenceName gets a reference to the given string and assigns it to the ReferenceName field.
func (o *Ga4ghVariant) SetReferenceName(v string) {
	o.ReferenceName = &v
}

// GetStart returns the Start field if non-nil, zero value otherwise.
func (o *Ga4ghVariant) GetStart() string {
	if o == nil || o.Start == nil {
		var ret string
		return ret
	}
	return *o.Start
}

// GetStartOk returns a tuple with the Start field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *Ga4ghVariant) GetStartOk() (string, bool) {
	if o == nil || o.Start == nil {
		var ret string
		return ret, false
	}
	return *o.Start, true
}

// HasStart returns a boolean if a field has been set.
func (o *Ga4ghVariant) HasStart() bool {
	if o != nil && o.Start != nil {
		return true
	}

	return false
}

// SetStart gets a reference to the given string and assigns it to the Start field.
func (o *Ga4ghVariant) SetStart(v string) {
	o.Start = &v
}

// GetEnd returns the End field if non-nil, zero value otherwise.
func (o *Ga4ghVariant) GetEnd() string {
	if o == nil || o.End == nil {
		var ret string
		return ret
	}
	return *o.End
}

// GetEndOk returns a tuple with the End field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *Ga4ghVariant) GetEndOk() (string, bool) {
	if o == nil || o.End == nil {
		var ret string
		return ret, false
	}
	return *o.End, true
}

// HasEnd returns a boolean if a field has been set.
func (o *Ga4ghVariant) HasEnd() bool {
	if o != nil && o.End != nil {
		return true
	}

	return false
}

// SetEnd gets a reference to the given string and assigns it to the End field.
func (o *Ga4ghVariant) SetEnd(v string) {
	o.End = &v
}

// GetReferenceBases returns the ReferenceBases field if non-nil, zero value otherwise.
func (o *Ga4ghVariant) GetReferenceBases() string {
	if o == nil || o.ReferenceBases == nil {
		var ret string
		return ret
	}
	return *o.ReferenceBases
}

// GetReferenceBasesOk returns a tuple with the ReferenceBases field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *Ga4ghVariant) GetReferenceBasesOk() (string, bool) {
	if o == nil || o.ReferenceBases == nil {
		var ret string
		return ret, false
	}
	return *o.ReferenceBases, true
}

// HasReferenceBases returns a boolean if a field has been set.
func (o *Ga4ghVariant) HasReferenceBases() bool {
	if o != nil && o.ReferenceBases != nil {
		return true
	}

	return false
}

// SetReferenceBases gets a reference to the given string and assigns it to the ReferenceBases field.
func (o *Ga4ghVariant) SetReferenceBases(v string) {
	o.ReferenceBases = &v
}

// GetAlternateBases returns the AlternateBases field if non-nil, zero value otherwise.
func (o *Ga4ghVariant) GetAlternateBases() []string {
	if o == nil || o.AlternateBases == nil {
		var ret []string
		return ret
	}
	return *o.AlternateBases
}

// GetAlternateBasesOk returns a tuple with the AlternateBases field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *Ga4ghVariant) GetAlternateBasesOk() ([]string, bool) {
	if o == nil || o.AlternateBases == nil {
		var ret []string
		return ret, false
	}
	return *o.AlternateBases, true
}

// HasAlternateBases returns a boolean if a field has been set.
func (o *Ga4ghVariant) HasAlternateBases() bool {
	if o != nil && o.AlternateBases != nil {
		return true
	}

	return false
}

// SetAlternateBases gets a reference to the given []string and assigns it to the AlternateBases field.
func (o *Ga4ghVariant) SetAlternateBases(v []string) {
	o.AlternateBases = &v
}

// GetAttributes returns the Attributes field if non-nil, zero value otherwise.
func (o *Ga4ghVariant) GetAttributes() Ga4ghAttributes {
	if o == nil || o.Attributes == nil {
		var ret Ga4ghAttributes
		return ret
	}
	return *o.Attributes
}

// GetAttributesOk returns a tuple with the Attributes field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *Ga4ghVariant) GetAttributesOk() (Ga4ghAttributes, bool) {
	if o == nil || o.Attributes == nil {
		var ret Ga4ghAttributes
		return ret, false
	}
	return *o.Attributes, true
}

// HasAttributes returns a boolean if a field has been set.
func (o *Ga4ghVariant) HasAttributes() bool {
	if o != nil && o.Attributes != nil {
		return true
	}

	return false
}

// SetAttributes gets a reference to the given Ga4ghAttributes and assigns it to the Attributes field.
func (o *Ga4ghVariant) SetAttributes(v Ga4ghAttributes) {
	o.Attributes = &v
}

// GetCalls returns the Calls field if non-nil, zero value otherwise.
func (o *Ga4ghVariant) GetCalls() []Ga4ghCall {
	if o == nil || o.Calls == nil {
		var ret []Ga4ghCall
		return ret
	}
	return *o.Calls
}

// GetCallsOk returns a tuple with the Calls field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *Ga4ghVariant) GetCallsOk() ([]Ga4ghCall, bool) {
	if o == nil || o.Calls == nil {
		var ret []Ga4ghCall
		return ret, false
	}
	return *o.Calls, true
}

// HasCalls returns a boolean if a field has been set.
func (o *Ga4ghVariant) HasCalls() bool {
	if o != nil && o.Calls != nil {
		return true
	}

	return false
}

// SetCalls gets a reference to the given []Ga4ghCall and assigns it to the Calls field.
func (o *Ga4ghVariant) SetCalls(v []Ga4ghCall) {
	o.Calls = &v
}

// GetVariantType returns the VariantType field if non-nil, zero value otherwise.
func (o *Ga4ghVariant) GetVariantType() string {
	if o == nil || o.VariantType == nil {
		var ret string
		return ret
	}
	return *o.VariantType
}

// GetVariantTypeOk returns a tuple with the VariantType field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *Ga4ghVariant) GetVariantTypeOk() (string, bool) {
	if o == nil || o.VariantType == nil {
		var ret string
		return ret, false
	}
	return *o.VariantType, true
}

// HasVariantType returns a boolean if a field has been set.
func (o *Ga4ghVariant) HasVariantType() bool {
	if o != nil && o.VariantType != nil {
		return true
	}

	return false
}

// SetVariantType gets a reference to the given string and assigns it to the VariantType field.
func (o *Ga4ghVariant) SetVariantType(v string) {
	o.VariantType = &v
}

// GetSvlen returns the Svlen field if non-nil, zero value otherwise.
func (o *Ga4ghVariant) GetSvlen() string {
	if o == nil || o.Svlen == nil {
		var ret string
		return ret
	}
	return *o.Svlen
}

// GetSvlenOk returns a tuple with the Svlen field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *Ga4ghVariant) GetSvlenOk() (string, bool) {
	if o == nil || o.Svlen == nil {
		var ret string
		return ret, false
	}
	return *o.Svlen, true
}

// HasSvlen returns a boolean if a field has been set.
func (o *Ga4ghVariant) HasSvlen() bool {
	if o != nil && o.Svlen != nil {
		return true
	}

	return false
}

// SetSvlen gets a reference to the given string and assigns it to the Svlen field.
func (o *Ga4ghVariant) SetSvlen(v string) {
	o.Svlen = &v
}

// GetCipos returns the Cipos field if non-nil, zero value otherwise.
func (o *Ga4ghVariant) GetCipos() []int32 {
	if o == nil || o.Cipos == nil {
		var ret []int32
		return ret
	}
	return *o.Cipos
}

// GetCiposOk returns a tuple with the Cipos field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *Ga4ghVariant) GetCiposOk() ([]int32, bool) {
	if o == nil || o.Cipos == nil {
		var ret []int32
		return ret, false
	}
	return *o.Cipos, true
}

// HasCipos returns a boolean if a field has been set.
func (o *Ga4ghVariant) HasCipos() bool {
	if o != nil && o.Cipos != nil {
		return true
	}

	return false
}

// SetCipos gets a reference to the given []int32 and assigns it to the Cipos field.
func (o *Ga4ghVariant) SetCipos(v []int32) {
	o.Cipos = &v
}

// GetCiend returns the Ciend field if non-nil, zero value otherwise.
func (o *Ga4ghVariant) GetCiend() []int32 {
	if o == nil || o.Ciend == nil {
		var ret []int32
		return ret
	}
	return *o.Ciend
}

// GetCiendOk returns a tuple with the Ciend field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *Ga4ghVariant) GetCiendOk() ([]int32, bool) {
	if o == nil || o.Ciend == nil {
		var ret []int32
		return ret, false
	}
	return *o.Ciend, true
}

// HasCiend returns a boolean if a field has been set.
func (o *Ga4ghVariant) HasCiend() bool {
	if o != nil && o.Ciend != nil {
		return true
	}

	return false
}

// SetCiend gets a reference to the given []int32 and assigns it to the Ciend field.
func (o *Ga4ghVariant) SetCiend(v []int32) {
	o.Ciend = &v
}

// GetFiltersApplied returns the FiltersApplied field if non-nil, zero value otherwise.
func (o *Ga4ghVariant) GetFiltersApplied() bool {
	if o == nil || o.FiltersApplied == nil {
		var ret bool
		return ret
	}
	return *o.FiltersApplied
}

// GetFiltersAppliedOk returns a tuple with the FiltersApplied field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *Ga4ghVariant) GetFiltersAppliedOk() (bool, bool) {
	if o == nil || o.FiltersApplied == nil {
		var ret bool
		return ret, false
	}
	return *o.FiltersApplied, true
}

// HasFiltersApplied returns a boolean if a field has been set.
func (o *Ga4ghVariant) HasFiltersApplied() bool {
	if o != nil && o.FiltersApplied != nil {
		return true
	}

	return false
}

// SetFiltersApplied gets a reference to the given bool and assigns it to the FiltersApplied field.
func (o *Ga4ghVariant) SetFiltersApplied(v bool) {
	o.FiltersApplied = &v
}

// GetFiltersPassed returns the FiltersPassed field if non-nil, zero value otherwise.
func (o *Ga4ghVariant) GetFiltersPassed() bool {
	if o == nil || o.FiltersPassed == nil {
		var ret bool
		return ret
	}
	return *o.FiltersPassed
}

// GetFiltersPassedOk returns a tuple with the FiltersPassed field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *Ga4ghVariant) GetFiltersPassedOk() (bool, bool) {
	if o == nil || o.FiltersPassed == nil {
		var ret bool
		return ret, false
	}
	return *o.FiltersPassed, true
}

// HasFiltersPassed returns a boolean if a field has been set.
func (o *Ga4ghVariant) HasFiltersPassed() bool {
	if o != nil && o.FiltersPassed != nil {
		return true
	}

	return false
}

// SetFiltersPassed gets a reference to the given bool and assigns it to the FiltersPassed field.
func (o *Ga4ghVariant) SetFiltersPassed(v bool) {
	o.FiltersPassed = &v
}

// GetFiltersFailed returns the FiltersFailed field if non-nil, zero value otherwise.
func (o *Ga4ghVariant) GetFiltersFailed() []string {
	if o == nil || o.FiltersFailed == nil {
		var ret []string
		return ret
	}
	return *o.FiltersFailed
}

// GetFiltersFailedOk returns a tuple with the FiltersFailed field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *Ga4ghVariant) GetFiltersFailedOk() ([]string, bool) {
	if o == nil || o.FiltersFailed == nil {
		var ret []string
		return ret, false
	}
	return *o.FiltersFailed, true
}

// HasFiltersFailed returns a boolean if a field has been set.
func (o *Ga4ghVariant) HasFiltersFailed() bool {
	if o != nil && o.FiltersFailed != nil {
		return true
	}

	return false
}

// SetFiltersFailed gets a reference to the given []string and assigns it to the FiltersFailed field.
func (o *Ga4ghVariant) SetFiltersFailed(v []string) {
	o.FiltersFailed = &v
}

// GetPatientId returns the PatientId field if non-nil, zero value otherwise.
func (o *Ga4ghVariant) GetPatientId() string {
	if o == nil || o.PatientId == nil {
		var ret string
		return ret
	}
	return *o.PatientId
}

// GetPatientIdOk returns a tuple with the PatientId field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *Ga4ghVariant) GetPatientIdOk() (string, bool) {
	if o == nil || o.PatientId == nil {
		var ret string
		return ret, false
	}
	return *o.PatientId, true
}

// HasPatientId returns a boolean if a field has been set.
func (o *Ga4ghVariant) HasPatientId() bool {
	if o != nil && o.PatientId != nil {
		return true
	}

	return false
}

// SetPatientId gets a reference to the given string and assigns it to the PatientId field.
func (o *Ga4ghVariant) SetPatientId(v string) {
	o.PatientId = &v
}

// MarshalJSON returns the JSON representation of the model.
func (o Ga4ghVariant) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.VariantSetId != nil {
		toSerialize["variant_set_id"] = o.VariantSetId
	}
	if o.Names != nil {
		toSerialize["names"] = o.Names
	}
	if o.Created != nil {
		toSerialize["created"] = o.Created
	}
	if o.Updated != nil {
		toSerialize["updated"] = o.Updated
	}
	if o.ReferenceName != nil {
		toSerialize["reference_name"] = o.ReferenceName
	}
	if o.Start != nil {
		toSerialize["start"] = o.Start
	}
	if o.End != nil {
		toSerialize["end"] = o.End
	}
	if o.ReferenceBases != nil {
		toSerialize["reference_bases"] = o.ReferenceBases
	}
	if o.AlternateBases != nil {
		toSerialize["alternate_bases"] = o.AlternateBases
	}
	if o.Attributes != nil {
		toSerialize["attributes"] = o.Attributes
	}
	if o.Calls != nil {
		toSerialize["calls"] = o.Calls
	}
	if o.VariantType != nil {
		toSerialize["variant_type"] = o.VariantType
	}
	if o.Svlen != nil {
		toSerialize["svlen"] = o.Svlen
	}
	if o.Cipos != nil {
		toSerialize["cipos"] = o.Cipos
	}
	if o.Ciend != nil {
		toSerialize["ciend"] = o.Ciend
	}
	if o.FiltersApplied != nil {
		toSerialize["filters_applied"] = o.FiltersApplied
	}
	if o.FiltersPassed != nil {
		toSerialize["filters_passed"] = o.FiltersPassed
	}
	if o.FiltersFailed != nil {
		toSerialize["filters_failed"] = o.FiltersFailed
	}
	if o.PatientId != nil {
		toSerialize["patientId"] = o.PatientId
	}
	return json.Marshal(toSerialize)
}
