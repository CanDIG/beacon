/*
 * CanDIG Services
 *
 * Below is a list of APIs that CanDIG currently supports.<br/><br/>For /search and /count endpoints, refer to [this documentation](https://www.distributedgenomics.ca/static/search_count_services_usage.pdf) for instructions and sample queries.<br/>For all metadata and variant services endpoints, refer to [this documentation](https://www.distributedgenomics.ca/static/metadata_variants_services_sample_queries.pdf) for sample queries.
 *
 * API version: 1.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package client

import (
	"encoding/json"
)

// Ga4ghExpressionLevel The actual numerical quantification for each feature.
type Ga4ghExpressionLevel struct {
	Id *string `json:"id,omitempty"`

	Name *string `json:"name,omitempty"`

	RnaQuantificationId *string `json:"rna_quantification_id,omitempty"`

	// The number of reads mapped to this feature.
	RawReadCount *float32 `json:"raw_read_count,omitempty"`

	// Numerical expression value.
	Expression *float32 `json:"expression,omitempty"`

	// True if the expression value is a normalized value.
	IsNormalized *bool `json:"is_normalized,omitempty"`

	Units *Ga4ghExpressionUnit `json:"units,omitempty"`

	// Weighted score for the expression value.
	Score *float32 `json:"score,omitempty"`

	// Lower bound of the confidence interval on the expression value.
	ConfIntervalLow *float32 `json:"conf_interval_low,omitempty"`

	// Upper bound of the confidence interval on the expression value.
	ConfIntervalHigh *float32 `json:"conf_interval_high,omitempty"`
}

// GetId returns the Id field if non-nil, zero value otherwise.
func (o *Ga4ghExpressionLevel) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *Ga4ghExpressionLevel) GetIdOk() (string, bool) {
	if o == nil || o.Id == nil {
		var ret string
		return ret, false
	}
	return *o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Ga4ghExpressionLevel) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *Ga4ghExpressionLevel) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field if non-nil, zero value otherwise.
func (o *Ga4ghExpressionLevel) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *Ga4ghExpressionLevel) GetNameOk() (string, bool) {
	if o == nil || o.Name == nil {
		var ret string
		return ret, false
	}
	return *o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Ga4ghExpressionLevel) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Ga4ghExpressionLevel) SetName(v string) {
	o.Name = &v
}

// GetRnaQuantificationId returns the RnaQuantificationId field if non-nil, zero value otherwise.
func (o *Ga4ghExpressionLevel) GetRnaQuantificationId() string {
	if o == nil || o.RnaQuantificationId == nil {
		var ret string
		return ret
	}
	return *o.RnaQuantificationId
}

// GetRnaQuantificationIdOk returns a tuple with the RnaQuantificationId field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *Ga4ghExpressionLevel) GetRnaQuantificationIdOk() (string, bool) {
	if o == nil || o.RnaQuantificationId == nil {
		var ret string
		return ret, false
	}
	return *o.RnaQuantificationId, true
}

// HasRnaQuantificationId returns a boolean if a field has been set.
func (o *Ga4ghExpressionLevel) HasRnaQuantificationId() bool {
	if o != nil && o.RnaQuantificationId != nil {
		return true
	}

	return false
}

// SetRnaQuantificationId gets a reference to the given string and assigns it to the RnaQuantificationId field.
func (o *Ga4ghExpressionLevel) SetRnaQuantificationId(v string) {
	o.RnaQuantificationId = &v
}

// GetRawReadCount returns the RawReadCount field if non-nil, zero value otherwise.
func (o *Ga4ghExpressionLevel) GetRawReadCount() float32 {
	if o == nil || o.RawReadCount == nil {
		var ret float32
		return ret
	}
	return *o.RawReadCount
}

// GetRawReadCountOk returns a tuple with the RawReadCount field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *Ga4ghExpressionLevel) GetRawReadCountOk() (float32, bool) {
	if o == nil || o.RawReadCount == nil {
		var ret float32
		return ret, false
	}
	return *o.RawReadCount, true
}

// HasRawReadCount returns a boolean if a field has been set.
func (o *Ga4ghExpressionLevel) HasRawReadCount() bool {
	if o != nil && o.RawReadCount != nil {
		return true
	}

	return false
}

// SetRawReadCount gets a reference to the given float32 and assigns it to the RawReadCount field.
func (o *Ga4ghExpressionLevel) SetRawReadCount(v float32) {
	o.RawReadCount = &v
}

// GetExpression returns the Expression field if non-nil, zero value otherwise.
func (o *Ga4ghExpressionLevel) GetExpression() float32 {
	if o == nil || o.Expression == nil {
		var ret float32
		return ret
	}
	return *o.Expression
}

// GetExpressionOk returns a tuple with the Expression field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *Ga4ghExpressionLevel) GetExpressionOk() (float32, bool) {
	if o == nil || o.Expression == nil {
		var ret float32
		return ret, false
	}
	return *o.Expression, true
}

// HasExpression returns a boolean if a field has been set.
func (o *Ga4ghExpressionLevel) HasExpression() bool {
	if o != nil && o.Expression != nil {
		return true
	}

	return false
}

// SetExpression gets a reference to the given float32 and assigns it to the Expression field.
func (o *Ga4ghExpressionLevel) SetExpression(v float32) {
	o.Expression = &v
}

// GetIsNormalized returns the IsNormalized field if non-nil, zero value otherwise.
func (o *Ga4ghExpressionLevel) GetIsNormalized() bool {
	if o == nil || o.IsNormalized == nil {
		var ret bool
		return ret
	}
	return *o.IsNormalized
}

// GetIsNormalizedOk returns a tuple with the IsNormalized field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *Ga4ghExpressionLevel) GetIsNormalizedOk() (bool, bool) {
	if o == nil || o.IsNormalized == nil {
		var ret bool
		return ret, false
	}
	return *o.IsNormalized, true
}

// HasIsNormalized returns a boolean if a field has been set.
func (o *Ga4ghExpressionLevel) HasIsNormalized() bool {
	if o != nil && o.IsNormalized != nil {
		return true
	}

	return false
}

// SetIsNormalized gets a reference to the given bool and assigns it to the IsNormalized field.
func (o *Ga4ghExpressionLevel) SetIsNormalized(v bool) {
	o.IsNormalized = &v
}

// GetUnits returns the Units field if non-nil, zero value otherwise.
func (o *Ga4ghExpressionLevel) GetUnits() Ga4ghExpressionUnit {
	if o == nil || o.Units == nil {
		var ret Ga4ghExpressionUnit
		return ret
	}
	return *o.Units
}

// GetUnitsOk returns a tuple with the Units field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *Ga4ghExpressionLevel) GetUnitsOk() (Ga4ghExpressionUnit, bool) {
	if o == nil || o.Units == nil {
		var ret Ga4ghExpressionUnit
		return ret, false
	}
	return *o.Units, true
}

// HasUnits returns a boolean if a field has been set.
func (o *Ga4ghExpressionLevel) HasUnits() bool {
	if o != nil && o.Units != nil {
		return true
	}

	return false
}

// SetUnits gets a reference to the given Ga4ghExpressionUnit and assigns it to the Units field.
func (o *Ga4ghExpressionLevel) SetUnits(v Ga4ghExpressionUnit) {
	o.Units = &v
}

// GetScore returns the Score field if non-nil, zero value otherwise.
func (o *Ga4ghExpressionLevel) GetScore() float32 {
	if o == nil || o.Score == nil {
		var ret float32
		return ret
	}
	return *o.Score
}

// GetScoreOk returns a tuple with the Score field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *Ga4ghExpressionLevel) GetScoreOk() (float32, bool) {
	if o == nil || o.Score == nil {
		var ret float32
		return ret, false
	}
	return *o.Score, true
}

// HasScore returns a boolean if a field has been set.
func (o *Ga4ghExpressionLevel) HasScore() bool {
	if o != nil && o.Score != nil {
		return true
	}

	return false
}

// SetScore gets a reference to the given float32 and assigns it to the Score field.
func (o *Ga4ghExpressionLevel) SetScore(v float32) {
	o.Score = &v
}

// GetConfIntervalLow returns the ConfIntervalLow field if non-nil, zero value otherwise.
func (o *Ga4ghExpressionLevel) GetConfIntervalLow() float32 {
	if o == nil || o.ConfIntervalLow == nil {
		var ret float32
		return ret
	}
	return *o.ConfIntervalLow
}

// GetConfIntervalLowOk returns a tuple with the ConfIntervalLow field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *Ga4ghExpressionLevel) GetConfIntervalLowOk() (float32, bool) {
	if o == nil || o.ConfIntervalLow == nil {
		var ret float32
		return ret, false
	}
	return *o.ConfIntervalLow, true
}

// HasConfIntervalLow returns a boolean if a field has been set.
func (o *Ga4ghExpressionLevel) HasConfIntervalLow() bool {
	if o != nil && o.ConfIntervalLow != nil {
		return true
	}

	return false
}

// SetConfIntervalLow gets a reference to the given float32 and assigns it to the ConfIntervalLow field.
func (o *Ga4ghExpressionLevel) SetConfIntervalLow(v float32) {
	o.ConfIntervalLow = &v
}

// GetConfIntervalHigh returns the ConfIntervalHigh field if non-nil, zero value otherwise.
func (o *Ga4ghExpressionLevel) GetConfIntervalHigh() float32 {
	if o == nil || o.ConfIntervalHigh == nil {
		var ret float32
		return ret
	}
	return *o.ConfIntervalHigh
}

// GetConfIntervalHighOk returns a tuple with the ConfIntervalHigh field if it's non-nil, zero value otherwise
// and a boolean to check if the value has been set.
func (o *Ga4ghExpressionLevel) GetConfIntervalHighOk() (float32, bool) {
	if o == nil || o.ConfIntervalHigh == nil {
		var ret float32
		return ret, false
	}
	return *o.ConfIntervalHigh, true
}

// HasConfIntervalHigh returns a boolean if a field has been set.
func (o *Ga4ghExpressionLevel) HasConfIntervalHigh() bool {
	if o != nil && o.ConfIntervalHigh != nil {
		return true
	}

	return false
}

// SetConfIntervalHigh gets a reference to the given float32 and assigns it to the ConfIntervalHigh field.
func (o *Ga4ghExpressionLevel) SetConfIntervalHigh(v float32) {
	o.ConfIntervalHigh = &v
}

// MarshalJSON returns the JSON representation of the model.
func (o Ga4ghExpressionLevel) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.RnaQuantificationId != nil {
		toSerialize["rna_quantification_id"] = o.RnaQuantificationId
	}
	if o.RawReadCount != nil {
		toSerialize["raw_read_count"] = o.RawReadCount
	}
	if o.Expression != nil {
		toSerialize["expression"] = o.Expression
	}
	if o.IsNormalized != nil {
		toSerialize["is_normalized"] = o.IsNormalized
	}
	if o.Units != nil {
		toSerialize["units"] = o.Units
	}
	if o.Score != nil {
		toSerialize["score"] = o.Score
	}
	if o.ConfIntervalLow != nil {
		toSerialize["conf_interval_low"] = o.ConfIntervalLow
	}
	if o.ConfIntervalHigh != nil {
		toSerialize["conf_interval_high"] = o.ConfIntervalHigh
	}
	return json.Marshal(toSerialize)
}
