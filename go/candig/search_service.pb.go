// Code generated by protoc-gen-go. DO NOT EDIT.
// source: candig/search_service.proto

package candig

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "google/api"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Contains statements exclusively on a single table
type Component struct {
	// A unique identifier of the current component
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Types that are valid to be assigned to Endpoint:
	//	*Component_Patients
	//	*Component_Enrollments
	//	*Component_Consents
	//	*Component_Diagnoses
	//	*Component_Samples
	//	*Component_Treatments
	//	*Component_Outcomes
	//	*Component_Complications
	//	*Component_Tumourboards
	//	*Component_Variants
	//	*Component_VariantsByGene
	//	*Component_Slides
	//	*Component_Studies
	//	*Component_Labtests
	//	*Component_Chemotherapies
	//	*Component_Radiotherapies
	//	*Component_Immunotherapies
	//	*Component_Surgeries
	//	*Component_Celltransplants
	Endpoint             isComponent_Endpoint `protobuf_oneof:"endpoint"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *Component) Reset()         { *m = Component{} }
func (m *Component) String() string { return proto.CompactTextString(m) }
func (*Component) ProtoMessage()    {}
func (*Component) Descriptor() ([]byte, []int) {
	return fileDescriptor_37599afbb488e989, []int{0}
}

func (m *Component) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Component.Unmarshal(m, b)
}
func (m *Component) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Component.Marshal(b, m, deterministic)
}
func (m *Component) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Component.Merge(m, src)
}
func (m *Component) XXX_Size() int {
	return xxx_messageInfo_Component.Size(m)
}
func (m *Component) XXX_DiscardUnknown() {
	xxx_messageInfo_Component.DiscardUnknown(m)
}

var xxx_messageInfo_Component proto.InternalMessageInfo

func (m *Component) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type isComponent_Endpoint interface {
	isComponent_Endpoint()
}

type Component_Patients struct {
	Patients *SearchPatientsRequest `protobuf:"bytes,2,opt,name=patients,proto3,oneof"`
}

type Component_Enrollments struct {
	Enrollments *SearchEnrollmentsRequest `protobuf:"bytes,3,opt,name=enrollments,proto3,oneof"`
}

type Component_Consents struct {
	Consents *SearchConsentsRequest `protobuf:"bytes,4,opt,name=consents,proto3,oneof"`
}

type Component_Diagnoses struct {
	Diagnoses *SearchDiagnosesRequest `protobuf:"bytes,5,opt,name=diagnoses,proto3,oneof"`
}

type Component_Samples struct {
	Samples *SearchSamplesRequest `protobuf:"bytes,6,opt,name=samples,proto3,oneof"`
}

type Component_Treatments struct {
	Treatments *SearchTreatmentsRequest `protobuf:"bytes,7,opt,name=treatments,proto3,oneof"`
}

type Component_Outcomes struct {
	Outcomes *SearchOutcomesRequest `protobuf:"bytes,8,opt,name=outcomes,proto3,oneof"`
}

type Component_Complications struct {
	Complications *SearchComplicationsRequest `protobuf:"bytes,9,opt,name=complications,proto3,oneof"`
}

type Component_Tumourboards struct {
	Tumourboards *SearchTumourboardsRequest `protobuf:"bytes,10,opt,name=tumourboards,proto3,oneof"`
}

type Component_Variants struct {
	Variants *SearchVariantsRequest `protobuf:"bytes,11,opt,name=variants,proto3,oneof"`
}

type Component_VariantsByGene struct {
	VariantsByGene *SearchVariantsByGeneNameRequest `protobuf:"bytes,12,opt,name=variantsByGene,proto3,oneof"`
}

type Component_Slides struct {
	Slides *SearchSlidesRequest `protobuf:"bytes,13,opt,name=slides,proto3,oneof"`
}

type Component_Studies struct {
	Studies *SearchStudiesRequest `protobuf:"bytes,14,opt,name=studies,proto3,oneof"`
}

type Component_Labtests struct {
	Labtests *SearchLabtestsRequest `protobuf:"bytes,15,opt,name=labtests,proto3,oneof"`
}

type Component_Chemotherapies struct {
	Chemotherapies *SearchChemotherapiesRequest `protobuf:"bytes,16,opt,name=chemotherapies,proto3,oneof"`
}

type Component_Radiotherapies struct {
	Radiotherapies *SearchRadiotherapiesRequest `protobuf:"bytes,17,opt,name=radiotherapies,proto3,oneof"`
}

type Component_Immunotherapies struct {
	Immunotherapies *SearchImmunotherapiesRequest `protobuf:"bytes,18,opt,name=immunotherapies,proto3,oneof"`
}

type Component_Surgeries struct {
	Surgeries *SearchSurgeriesRequest `protobuf:"bytes,19,opt,name=surgeries,proto3,oneof"`
}

type Component_Celltransplants struct {
	Celltransplants *SearchCelltransplantsRequest `protobuf:"bytes,20,opt,name=celltransplants,proto3,oneof"`
}

func (*Component_Patients) isComponent_Endpoint() {}

func (*Component_Enrollments) isComponent_Endpoint() {}

func (*Component_Consents) isComponent_Endpoint() {}

func (*Component_Diagnoses) isComponent_Endpoint() {}

func (*Component_Samples) isComponent_Endpoint() {}

func (*Component_Treatments) isComponent_Endpoint() {}

func (*Component_Outcomes) isComponent_Endpoint() {}

func (*Component_Complications) isComponent_Endpoint() {}

func (*Component_Tumourboards) isComponent_Endpoint() {}

func (*Component_Variants) isComponent_Endpoint() {}

func (*Component_VariantsByGene) isComponent_Endpoint() {}

func (*Component_Slides) isComponent_Endpoint() {}

func (*Component_Studies) isComponent_Endpoint() {}

func (*Component_Labtests) isComponent_Endpoint() {}

func (*Component_Chemotherapies) isComponent_Endpoint() {}

func (*Component_Radiotherapies) isComponent_Endpoint() {}

func (*Component_Immunotherapies) isComponent_Endpoint() {}

func (*Component_Surgeries) isComponent_Endpoint() {}

func (*Component_Celltransplants) isComponent_Endpoint() {}

func (m *Component) GetEndpoint() isComponent_Endpoint {
	if m != nil {
		return m.Endpoint
	}
	return nil
}

func (m *Component) GetPatients() *SearchPatientsRequest {
	if x, ok := m.GetEndpoint().(*Component_Patients); ok {
		return x.Patients
	}
	return nil
}

func (m *Component) GetEnrollments() *SearchEnrollmentsRequest {
	if x, ok := m.GetEndpoint().(*Component_Enrollments); ok {
		return x.Enrollments
	}
	return nil
}

func (m *Component) GetConsents() *SearchConsentsRequest {
	if x, ok := m.GetEndpoint().(*Component_Consents); ok {
		return x.Consents
	}
	return nil
}

func (m *Component) GetDiagnoses() *SearchDiagnosesRequest {
	if x, ok := m.GetEndpoint().(*Component_Diagnoses); ok {
		return x.Diagnoses
	}
	return nil
}

func (m *Component) GetSamples() *SearchSamplesRequest {
	if x, ok := m.GetEndpoint().(*Component_Samples); ok {
		return x.Samples
	}
	return nil
}

func (m *Component) GetTreatments() *SearchTreatmentsRequest {
	if x, ok := m.GetEndpoint().(*Component_Treatments); ok {
		return x.Treatments
	}
	return nil
}

func (m *Component) GetOutcomes() *SearchOutcomesRequest {
	if x, ok := m.GetEndpoint().(*Component_Outcomes); ok {
		return x.Outcomes
	}
	return nil
}

func (m *Component) GetComplications() *SearchComplicationsRequest {
	if x, ok := m.GetEndpoint().(*Component_Complications); ok {
		return x.Complications
	}
	return nil
}

func (m *Component) GetTumourboards() *SearchTumourboardsRequest {
	if x, ok := m.GetEndpoint().(*Component_Tumourboards); ok {
		return x.Tumourboards
	}
	return nil
}

func (m *Component) GetVariants() *SearchVariantsRequest {
	if x, ok := m.GetEndpoint().(*Component_Variants); ok {
		return x.Variants
	}
	return nil
}

func (m *Component) GetVariantsByGene() *SearchVariantsByGeneNameRequest {
	if x, ok := m.GetEndpoint().(*Component_VariantsByGene); ok {
		return x.VariantsByGene
	}
	return nil
}

func (m *Component) GetSlides() *SearchSlidesRequest {
	if x, ok := m.GetEndpoint().(*Component_Slides); ok {
		return x.Slides
	}
	return nil
}

func (m *Component) GetStudies() *SearchStudiesRequest {
	if x, ok := m.GetEndpoint().(*Component_Studies); ok {
		return x.Studies
	}
	return nil
}

func (m *Component) GetLabtests() *SearchLabtestsRequest {
	if x, ok := m.GetEndpoint().(*Component_Labtests); ok {
		return x.Labtests
	}
	return nil
}

func (m *Component) GetChemotherapies() *SearchChemotherapiesRequest {
	if x, ok := m.GetEndpoint().(*Component_Chemotherapies); ok {
		return x.Chemotherapies
	}
	return nil
}

func (m *Component) GetRadiotherapies() *SearchRadiotherapiesRequest {
	if x, ok := m.GetEndpoint().(*Component_Radiotherapies); ok {
		return x.Radiotherapies
	}
	return nil
}

func (m *Component) GetImmunotherapies() *SearchImmunotherapiesRequest {
	if x, ok := m.GetEndpoint().(*Component_Immunotherapies); ok {
		return x.Immunotherapies
	}
	return nil
}

func (m *Component) GetSurgeries() *SearchSurgeriesRequest {
	if x, ok := m.GetEndpoint().(*Component_Surgeries); ok {
		return x.Surgeries
	}
	return nil
}

func (m *Component) GetCelltransplants() *SearchCelltransplantsRequest {
	if x, ok := m.GetEndpoint().(*Component_Celltransplants); ok {
		return x.Celltransplants
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Component) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Component_Patients)(nil),
		(*Component_Enrollments)(nil),
		(*Component_Consents)(nil),
		(*Component_Diagnoses)(nil),
		(*Component_Samples)(nil),
		(*Component_Treatments)(nil),
		(*Component_Outcomes)(nil),
		(*Component_Complications)(nil),
		(*Component_Tumourboards)(nil),
		(*Component_Variants)(nil),
		(*Component_VariantsByGene)(nil),
		(*Component_Slides)(nil),
		(*Component_Studies)(nil),
		(*Component_Labtests)(nil),
		(*Component_Chemotherapies)(nil),
		(*Component_Radiotherapies)(nil),
		(*Component_Immunotherapies)(nil),
		(*Component_Surgeries)(nil),
		(*Component_Celltransplants)(nil),
	}
}

type Logic struct {
	And                  []*Logic `protobuf:"bytes,1,rep,name=and,proto3" json:"and,omitempty"`
	Or                   []*Logic `protobuf:"bytes,2,rep,name=or,proto3" json:"or,omitempty"`
	Id                   string   `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
	Negate               bool     `protobuf:"varint,4,opt,name=negate,proto3" json:"negate,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Logic) Reset()         { *m = Logic{} }
func (m *Logic) String() string { return proto.CompactTextString(m) }
func (*Logic) ProtoMessage()    {}
func (*Logic) Descriptor() ([]byte, []int) {
	return fileDescriptor_37599afbb488e989, []int{1}
}

func (m *Logic) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Logic.Unmarshal(m, b)
}
func (m *Logic) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Logic.Marshal(b, m, deterministic)
}
func (m *Logic) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Logic.Merge(m, src)
}
func (m *Logic) XXX_Size() int {
	return xxx_messageInfo_Logic.Size(m)
}
func (m *Logic) XXX_DiscardUnknown() {
	xxx_messageInfo_Logic.DiscardUnknown(m)
}

var xxx_messageInfo_Logic proto.InternalMessageInfo

func (m *Logic) GetAnd() []*Logic {
	if m != nil {
		return m.And
	}
	return nil
}

func (m *Logic) GetOr() []*Logic {
	if m != nil {
		return m.Or
	}
	return nil
}

func (m *Logic) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Logic) GetNegate() bool {
	if m != nil {
		return m.Negate
	}
	return false
}

// Definition of which table and which fields should be returned
type Result struct {
	// Name of a single table from which fields are requested
	Table string `protobuf:"bytes,1,opt,name=table,proto3" json:"table,omitempty"`
	// List of fields of the requested table
	Fields []string `protobuf:"bytes,2,rep,name=fields,proto3" json:"fields,omitempty"`
	// Start bp. Used if the user is requesting variants endpoint
	Start string `protobuf:"bytes,3,opt,name=start,proto3" json:"start,omitempty"`
	// End bp. Used if the user is requesting variants endpoint
	End string `protobuf:"bytes,4,opt,name=end,proto3" json:"end,omitempty"`
	// Reference genome. Used if the user is requesting variants endpoint.
	ReferenceName string `protobuf:"bytes,5,opt,name=referenceName,proto3" json:"referenceName,omitempty"`
	// Gene name. Used if the user is requesting variantsByGene endpoint.
	Gene string `protobuf:"bytes,6,opt,name=gene,proto3" json:"gene,omitempty"`
	// List of fields to aggregate by and return counts. Overrides response format if included.
	Count                []string `protobuf:"bytes,7,rep,name=count,proto3" json:"count,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Result) Reset()         { *m = Result{} }
func (m *Result) String() string { return proto.CompactTextString(m) }
func (*Result) ProtoMessage()    {}
func (*Result) Descriptor() ([]byte, []int) {
	return fileDescriptor_37599afbb488e989, []int{2}
}

func (m *Result) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Result.Unmarshal(m, b)
}
func (m *Result) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Result.Marshal(b, m, deterministic)
}
func (m *Result) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Result.Merge(m, src)
}
func (m *Result) XXX_Size() int {
	return xxx_messageInfo_Result.Size(m)
}
func (m *Result) XXX_DiscardUnknown() {
	xxx_messageInfo_Result.DiscardUnknown(m)
}

var xxx_messageInfo_Result proto.InternalMessageInfo

func (m *Result) GetTable() string {
	if m != nil {
		return m.Table
	}
	return ""
}

func (m *Result) GetFields() []string {
	if m != nil {
		return m.Fields
	}
	return nil
}

func (m *Result) GetStart() string {
	if m != nil {
		return m.Start
	}
	return ""
}

func (m *Result) GetEnd() string {
	if m != nil {
		return m.End
	}
	return ""
}

func (m *Result) GetReferenceName() string {
	if m != nil {
		return m.ReferenceName
	}
	return ""
}

func (m *Result) GetGene() string {
	if m != nil {
		return m.Gene
	}
	return ""
}

func (m *Result) GetCount() []string {
	if m != nil {
		return m.Count
	}
	return nil
}

//Request object for the search function
type SearchQueryRequest struct {
	// The datasetId to query from
	DatasetId string `protobuf:"bytes,1,opt,name=dataset_id,json=datasetId,proto3" json:"dataset_id,omitempty"`
	// Definition of the high order logical operations on components
	Logic *Logic `protobuf:"bytes,2,opt,name=logic,proto3" json:"logic,omitempty"`
	// Array of single table queries
	Components []*Component `protobuf:"bytes,3,rep,name=components,proto3" json:"components,omitempty"`
	// Definition of the requested tables and fields
	Results []*Result `protobuf:"bytes,4,rep,name=results,proto3" json:"results,omitempty"`
	// Limit of the maximum number of records
	Limit int32 `protobuf:"varint,5,opt,name=limit,proto3" json:"limit,omitempty"`
	// Specifies the maximum number of results to return in a single page.
	// If unspecified, a system default will be used.
	PageSize int32 `protobuf:"varint,6,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// The continuation token, which is used to page through large result sets.
	// To get the next page of results, set this parameter to the value of
	// `nextPageToken` from the previous response.
	PageToken            string   `protobuf:"bytes,7,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SearchQueryRequest) Reset()         { *m = SearchQueryRequest{} }
func (m *SearchQueryRequest) String() string { return proto.CompactTextString(m) }
func (*SearchQueryRequest) ProtoMessage()    {}
func (*SearchQueryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_37599afbb488e989, []int{3}
}

func (m *SearchQueryRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SearchQueryRequest.Unmarshal(m, b)
}
func (m *SearchQueryRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SearchQueryRequest.Marshal(b, m, deterministic)
}
func (m *SearchQueryRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SearchQueryRequest.Merge(m, src)
}
func (m *SearchQueryRequest) XXX_Size() int {
	return xxx_messageInfo_SearchQueryRequest.Size(m)
}
func (m *SearchQueryRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SearchQueryRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SearchQueryRequest proto.InternalMessageInfo

func (m *SearchQueryRequest) GetDatasetId() string {
	if m != nil {
		return m.DatasetId
	}
	return ""
}

func (m *SearchQueryRequest) GetLogic() *Logic {
	if m != nil {
		return m.Logic
	}
	return nil
}

func (m *SearchQueryRequest) GetComponents() []*Component {
	if m != nil {
		return m.Components
	}
	return nil
}

func (m *SearchQueryRequest) GetResults() []*Result {
	if m != nil {
		return m.Results
	}
	return nil
}

func (m *SearchQueryRequest) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *SearchQueryRequest) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func (m *SearchQueryRequest) GetPageToken() string {
	if m != nil {
		return m.PageToken
	}
	return ""
}

//Response object for the search function
type SearchQueryResponse struct {
	// List of patients
	Patients []*Patient `protobuf:"bytes,1,rep,name=patients,proto3" json:"patients,omitempty"`
	// List of enrollments
	Enrollments []*Enrollment `protobuf:"bytes,2,rep,name=enrollments,proto3" json:"enrollments,omitempty"`
	// List of consents
	Consents []*Consent `protobuf:"bytes,3,rep,name=consents,proto3" json:"consents,omitempty"`
	// List of diagnoses
	Diagnoses []*Diagnosis `protobuf:"bytes,4,rep,name=diagnoses,proto3" json:"diagnoses,omitempty"`
	// List of samples
	Samples []*Sample `protobuf:"bytes,5,rep,name=samples,proto3" json:"samples,omitempty"`
	// List of treatments
	Treatments []*Treatment `protobuf:"bytes,6,rep,name=treatments,proto3" json:"treatments,omitempty"`
	// List of outcomes
	Outcomes []*Outcome `protobuf:"bytes,7,rep,name=outcomes,proto3" json:"outcomes,omitempty"`
	// List of complications
	Complications []*Complication `protobuf:"bytes,8,rep,name=complications,proto3" json:"complications,omitempty"`
	// List of tumourboard results
	Tumourboards []*Tumourboard `protobuf:"bytes,9,rep,name=tumourboards,proto3" json:"tumourboards,omitempty"`
	// List of variants
	Variants        []*Variant        `protobuf:"bytes,10,rep,name=variants,proto3" json:"variants,omitempty"`
	Slides          []*Slide          `protobuf:"bytes,11,rep,name=slides,proto3" json:"slides,omitempty"`
	Studies         []*Study          `protobuf:"bytes,12,rep,name=studies,proto3" json:"studies,omitempty"`
	Labtests        []*Labtest        `protobuf:"bytes,13,rep,name=labtests,proto3" json:"labtests,omitempty"`
	Surgeries       []*Surgery        `protobuf:"bytes,14,rep,name=surgeries,proto3" json:"surgeries,omitempty"`
	Chemotherapies  []*Chemotherapy   `protobuf:"bytes,15,rep,name=chemotherapies,proto3" json:"chemotherapies,omitempty"`
	Immunotherapies []*Immunotherapy  `protobuf:"bytes,16,rep,name=immunotherapies,proto3" json:"immunotherapies,omitempty"`
	Radiotherapies  []*Radiotherapy   `protobuf:"bytes,17,rep,name=radiotherapies,proto3" json:"radiotherapies,omitempty"`
	Celltransplants []*Celltransplant `protobuf:"bytes,18,rep,name=celltransplants,proto3" json:"celltransplants,omitempty"`
	// The continuation token, which is used to page through large result sets.
	// Provide this value in a subsequent request to return the next page of
	// results. This field will be empty if there aren't any additional results.
	NextPageToken        string   `protobuf:"bytes,19,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SearchQueryResponse) Reset()         { *m = SearchQueryResponse{} }
func (m *SearchQueryResponse) String() string { return proto.CompactTextString(m) }
func (*SearchQueryResponse) ProtoMessage()    {}
func (*SearchQueryResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_37599afbb488e989, []int{4}
}

func (m *SearchQueryResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SearchQueryResponse.Unmarshal(m, b)
}
func (m *SearchQueryResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SearchQueryResponse.Marshal(b, m, deterministic)
}
func (m *SearchQueryResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SearchQueryResponse.Merge(m, src)
}
func (m *SearchQueryResponse) XXX_Size() int {
	return xxx_messageInfo_SearchQueryResponse.Size(m)
}
func (m *SearchQueryResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SearchQueryResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SearchQueryResponse proto.InternalMessageInfo

func (m *SearchQueryResponse) GetPatients() []*Patient {
	if m != nil {
		return m.Patients
	}
	return nil
}

func (m *SearchQueryResponse) GetEnrollments() []*Enrollment {
	if m != nil {
		return m.Enrollments
	}
	return nil
}

func (m *SearchQueryResponse) GetConsents() []*Consent {
	if m != nil {
		return m.Consents
	}
	return nil
}

func (m *SearchQueryResponse) GetDiagnoses() []*Diagnosis {
	if m != nil {
		return m.Diagnoses
	}
	return nil
}

func (m *SearchQueryResponse) GetSamples() []*Sample {
	if m != nil {
		return m.Samples
	}
	return nil
}

func (m *SearchQueryResponse) GetTreatments() []*Treatment {
	if m != nil {
		return m.Treatments
	}
	return nil
}

func (m *SearchQueryResponse) GetOutcomes() []*Outcome {
	if m != nil {
		return m.Outcomes
	}
	return nil
}

func (m *SearchQueryResponse) GetComplications() []*Complication {
	if m != nil {
		return m.Complications
	}
	return nil
}

func (m *SearchQueryResponse) GetTumourboards() []*Tumourboard {
	if m != nil {
		return m.Tumourboards
	}
	return nil
}

func (m *SearchQueryResponse) GetVariants() []*Variant {
	if m != nil {
		return m.Variants
	}
	return nil
}

func (m *SearchQueryResponse) GetSlides() []*Slide {
	if m != nil {
		return m.Slides
	}
	return nil
}

func (m *SearchQueryResponse) GetStudies() []*Study {
	if m != nil {
		return m.Studies
	}
	return nil
}

func (m *SearchQueryResponse) GetLabtests() []*Labtest {
	if m != nil {
		return m.Labtests
	}
	return nil
}

func (m *SearchQueryResponse) GetSurgeries() []*Surgery {
	if m != nil {
		return m.Surgeries
	}
	return nil
}

func (m *SearchQueryResponse) GetChemotherapies() []*Chemotherapy {
	if m != nil {
		return m.Chemotherapies
	}
	return nil
}

func (m *SearchQueryResponse) GetImmunotherapies() []*Immunotherapy {
	if m != nil {
		return m.Immunotherapies
	}
	return nil
}

func (m *SearchQueryResponse) GetRadiotherapies() []*Radiotherapy {
	if m != nil {
		return m.Radiotherapies
	}
	return nil
}

func (m *SearchQueryResponse) GetCelltransplants() []*Celltransplant {
	if m != nil {
		return m.Celltransplants
	}
	return nil
}

func (m *SearchQueryResponse) GetNextPageToken() string {
	if m != nil {
		return m.NextPageToken
	}
	return ""
}

func init() {
	proto.RegisterType((*Component)(nil), "candig.Component")
	proto.RegisterType((*Logic)(nil), "candig.Logic")
	proto.RegisterType((*Result)(nil), "candig.Result")
	proto.RegisterType((*SearchQueryRequest)(nil), "candig.SearchQueryRequest")
	proto.RegisterType((*SearchQueryResponse)(nil), "candig.SearchQueryResponse")
}

func init() { proto.RegisterFile("candig/search_service.proto", fileDescriptor_37599afbb488e989) }

var fileDescriptor_37599afbb488e989 = []byte{
	// 1154 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x97, 0xdd, 0x72, 0xdc, 0x34,
	0x14, 0xc7, 0xc9, 0x6e, 0x77, 0x37, 0x56, 0xba, 0x9b, 0x56, 0x49, 0x3b, 0x26, 0x1f, 0x6d, 0xd8,
	0x96, 0x36, 0x43, 0x86, 0xa4, 0x0d, 0x30, 0x74, 0x4a, 0x87, 0x8f, 0xa6, 0x4c, 0x08, 0x53, 0x20,
	0x75, 0x3a, 0xdc, 0x31, 0x19, 0xc5, 0x3e, 0xdd, 0x68, 0xb0, 0x25, 0x63, 0xc9, 0x19, 0xb6, 0x97,
	0xdc, 0xf0, 0x00, 0xbc, 0x07, 0x97, 0xbc, 0x08, 0xc3, 0x1b, 0xf0, 0x20, 0x8c, 0x3e, 0x6c, 0x4b,
	0x5e, 0x73, 0x67, 0xfb, 0x9c, 0xff, 0x5f, 0x3a, 0x27, 0xd2, 0xf9, 0x6d, 0xd0, 0x66, 0x4c, 0x58,
	0x42, 0x67, 0x07, 0x02, 0x48, 0x11, 0x5f, 0x9e, 0x0b, 0x28, 0xae, 0x68, 0x0c, 0xfb, 0x79, 0xc1,
	0x25, 0xc7, 0x43, 0x13, 0xdc, 0xd8, 0x9a, 0x71, 0x3e, 0x4b, 0xe1, 0x80, 0xe4, 0xf4, 0x80, 0x30,
	0xc6, 0x25, 0x91, 0x94, 0x33, 0x61, 0xb2, 0x36, 0xee, 0x58, 0x8b, 0x38, 0xa5, 0x8c, 0xc6, 0x24,
	0x3d, 0xcf, 0x40, 0x92, 0x84, 0x48, 0x62, 0xe3, 0x0f, 0xfe, 0x2f, 0xee, 0xaf, 0xb6, 0x71, 0xcb,
	0xe6, 0x5d, 0x91, 0x82, 0x12, 0x26, 0x2b, 0xfb, 0x2d, 0xff, 0xb3, 0x2f, 0x9a, 0xfe, 0x85, 0x50,
	0x70, 0xc4, 0xb3, 0x9c, 0x33, 0x60, 0x12, 0x4f, 0x50, 0x8f, 0x26, 0xe1, 0xd2, 0xce, 0xd2, 0x6e,
	0x10, 0xf5, 0x68, 0x82, 0x3f, 0x43, 0xcb, 0x39, 0x91, 0x14, 0x98, 0x14, 0x61, 0x6f, 0x67, 0x69,
	0x77, 0xe5, 0x70, 0x7b, 0xdf, 0xd8, 0xed, 0x9f, 0xe9, 0x82, 0x4f, 0x6d, 0x34, 0x82, 0x5f, 0x4a,
	0x10, 0xf2, 0x9b, 0x77, 0xa2, 0x5a, 0x80, 0x5f, 0xa0, 0x15, 0x60, 0x05, 0x4f, 0xd3, 0x4c, 0xeb,
	0xfb, 0x5a, 0xbf, 0xe3, 0xeb, 0xbf, 0x6e, 0x12, 0x1a, 0x0b, 0x57, 0xa6, 0xb6, 0x10, 0x73, 0x26,
	0xb4, 0xc5, 0xb5, 0xae, 0x2d, 0x1c, 0xd9, 0xa8, 0xb3, 0x85, 0x4a, 0x80, 0x3f, 0x47, 0x41, 0x42,
	0xc9, 0x8c, 0x71, 0x01, 0x22, 0x1c, 0x68, 0xf5, 0x1d, 0x5f, 0xfd, 0xa2, 0x0a, 0x37, 0xf2, 0x46,
	0x82, 0x9f, 0xa0, 0x91, 0x20, 0x59, 0x9e, 0x82, 0x08, 0x87, 0x5a, 0xbd, 0xe5, 0xab, 0xcf, 0x4c,
	0xb0, 0xd1, 0x56, 0xe9, 0xf8, 0x2b, 0x84, 0x64, 0x01, 0x44, 0x9a, 0xda, 0x47, 0x5a, 0x7c, 0xd7,
	0x17, 0xbf, 0xae, 0xe3, 0x8d, 0xde, 0x11, 0xa9, 0xca, 0x79, 0x29, 0x63, 0x9e, 0x81, 0x08, 0x97,
	0xbb, 0x2a, 0xff, 0xc1, 0x46, 0x9d, 0xca, 0x2b, 0x01, 0xfe, 0x16, 0x8d, 0x63, 0x9e, 0xe5, 0x29,
	0x8d, 0xcd, 0x59, 0x0b, 0x03, 0xed, 0x30, 0x6d, 0xf7, 0xce, 0x49, 0x69, 0x6c, 0x7c, 0x29, 0x3e,
	0x46, 0xd7, 0x65, 0x99, 0xf1, 0xb2, 0xb8, 0xe0, 0xa4, 0x48, 0x44, 0x88, 0xb4, 0xd5, 0x7b, 0xad,
	0x6a, 0x9c, 0x8c, 0xc6, 0xc9, 0x13, 0xaa, 0x8a, 0xaa, 0xc3, 0x19, 0xae, 0x74, 0x55, 0xf4, 0xa3,
	0x8d, 0x3a, 0x15, 0x55, 0x02, 0xfc, 0x0a, 0x4d, 0xaa, 0xe7, 0xe7, 0xf3, 0x63, 0x60, 0x10, 0x5e,
	0xd7, 0x16, 0x0f, 0xbb, 0x2d, 0x4c, 0xce, 0xf7, 0x24, 0x83, 0xc6, 0xac, 0x65, 0x80, 0x3f, 0x41,
	0x43, 0x91, 0xd2, 0x04, 0x44, 0x38, 0xd6, 0x56, 0x9b, 0xad, 0xbf, 0xae, 0x8e, 0x35, 0x72, 0x9b,
	0xac, 0x4f, 0x85, 0x2c, 0x13, 0x0a, 0x22, 0x9c, 0x74, 0x9e, 0x0a, 0x13, 0x74, 0x4f, 0x85, 0xf9,
	0xa2, 0x1a, 0x90, 0x92, 0x0b, 0x09, 0x42, 0x8a, 0x70, 0xb5, 0xab, 0x01, 0x2f, 0x6d, 0xd4, 0x69,
	0x40, 0x25, 0xc0, 0xdf, 0xa1, 0x49, 0x7c, 0x09, 0x19, 0x97, 0x97, 0x50, 0x90, 0x5c, 0xad, 0x7e,
	0x43, 0x5b, 0xdc, 0x6b, 0xfd, 0x4d, 0xbd, 0x1c, 0xa7, 0x78, 0x5f, 0xac, 0xec, 0x0a, 0x92, 0x50,
	0xc7, 0xee, 0x66, 0x97, 0x5d, 0xe4, 0xe5, 0x38, 0x76, 0xbe, 0x18, 0x9f, 0xa2, 0x55, 0x9a, 0x65,
	0x25, 0x73, 0xfc, 0xb0, 0xf6, 0xbb, 0xef, 0xfb, 0x9d, 0xf8, 0x49, 0x8d, 0x61, 0x5b, 0xae, 0x2e,
	0xaf, 0x28, 0x8b, 0x19, 0x14, 0xca, 0x6b, 0xad, 0xeb, 0xf2, 0x9e, 0x55, 0x61, 0xe7, 0xf2, 0xd6,
	0x12, 0xb5, 0xa3, 0x18, 0xd2, 0x54, 0x16, 0x84, 0x89, 0x3c, 0xd5, 0x87, 0x6e, 0xbd, 0x6b, 0x47,
	0x47, 0x7e, 0x92, 0xb3, 0xa3, 0x96, 0xfc, 0x39, 0x42, 0xcb, 0xc0, 0x92, 0x9c, 0x53, 0x26, 0xa7,
	0x1c, 0x0d, 0x5e, 0xf2, 0x19, 0x8d, 0xf1, 0x5d, 0xd4, 0x27, 0x4c, 0x0d, 0xcd, 0xfe, 0xee, 0xca,
	0xe1, 0xb8, 0xb2, 0xd6, 0xb1, 0x48, 0x45, 0xf0, 0x36, 0xea, 0xf1, 0x22, 0xec, 0x75, 0xc5, 0x7b,
	0xbc, 0xb0, 0x33, 0xb7, 0x5f, 0xcf, 0xdc, 0xdb, 0x68, 0xc8, 0x60, 0x46, 0x24, 0xe8, 0x71, 0xb7,
	0x1c, 0xd9, 0xb7, 0xe9, 0x9f, 0x4b, 0x68, 0x18, 0x81, 0x28, 0x53, 0x89, 0xd7, 0xd1, 0x40, 0x92,
	0x8b, 0x14, 0xec, 0xa4, 0x36, 0x2f, 0x4a, 0xf8, 0x86, 0x42, 0x9a, 0x08, 0xbd, 0x56, 0x10, 0xd9,
	0x37, 0x95, 0x2d, 0x24, 0x29, 0xa4, 0x5d, 0xc3, 0xbc, 0xe0, 0x1b, 0xa8, 0x0f, 0x2c, 0xd1, 0x6b,
	0x04, 0x91, 0x7a, 0xc4, 0xf7, 0xd1, 0xb8, 0x80, 0x37, 0x50, 0x00, 0x8b, 0xf5, 0xbd, 0xd1, 0x03,
	0x33, 0x88, 0xfc, 0x8f, 0x18, 0xa3, 0x6b, 0x33, 0x75, 0xf9, 0x86, 0x3a, 0xa8, 0x9f, 0xd5, 0x0a,
	0x31, 0x2f, 0x99, 0x0c, 0x47, 0x7a, 0x61, 0xf3, 0x32, 0xfd, 0xbd, 0x87, 0xb0, 0xe9, 0xf0, 0xab,
	0x12, 0x8a, 0xb9, 0xed, 0x2b, 0xde, 0x46, 0x48, 0xc1, 0x4b, 0x80, 0x3c, 0xaf, 0x59, 0x13, 0xd8,
	0x2f, 0x27, 0x09, 0xbe, 0x87, 0x06, 0xa9, 0xea, 0x8d, 0xe5, 0x4d, 0xab, 0x61, 0x26, 0x86, 0x1f,
	0x23, 0x14, 0x57, 0xd0, 0x52, 0x64, 0x51, 0xad, 0xbd, 0x59, 0x65, 0xd6, 0x38, 0x8b, 0x9c, 0x24,
	0xbc, 0x8b, 0x46, 0x85, 0xee, 0x9e, 0xc2, 0x88, 0xca, 0x9f, 0x54, 0xf9, 0xa6, 0xa9, 0x51, 0x15,
	0x56, 0xd5, 0xa4, 0x34, 0xa3, 0x52, 0xd7, 0x3f, 0x88, 0xcc, 0x0b, 0xde, 0x44, 0x41, 0x4e, 0x66,
	0x70, 0x2e, 0xe8, 0x5b, 0x53, 0xfc, 0x40, 0xa1, 0x6e, 0x06, 0x67, 0xf4, 0x2d, 0xa8, 0x9a, 0x74,
	0x50, 0xf2, 0x9f, 0x81, 0xe9, 0x69, 0x1f, 0x44, 0x3a, 0xfd, 0xb5, 0xfa, 0x30, 0xfd, 0x67, 0x84,
	0xd6, 0xbc, 0x4e, 0x88, 0x5c, 0x11, 0x0a, 0xef, 0x39, 0x78, 0x35, 0xe7, 0x67, 0xb5, 0xda, 0x94,
	0x05, 0xab, 0x83, 0xd3, 0x8f, 0x7d, 0x9c, 0x9a, 0xf3, 0x84, 0xab, 0xfc, 0x06, 0xa4, 0x3e, 0x3e,
	0xf7, 0x1c, 0x7c, 0xf6, 0xfd, 0x25, 0x2c, 0x38, 0x1d, 0x5c, 0x1e, 0xb8, 0xb8, 0xbc, 0xe6, 0x77,
	0xd5, 0x82, 0x92, 0x0a, 0x97, 0x8f, 0xbb, 0x0d, 0x1f, 0x07, 0x7e, 0x53, 0x0d, 0x19, 0x1b, 0x1e,
	0x3e, 0xf6, 0x78, 0x38, 0xf4, 0xbd, 0x6b, 0x12, 0x7a, 0xfc, 0xdb, 0x73, 0xf8, 0x37, 0xf2, 0xb7,
	0x6e, 0xc9, 0xe7, 0xf0, 0xee, 0x69, 0x9b, 0x77, 0xcb, 0x5a, 0xb1, 0xee, 0x1e, 0x8a, 0x2a, 0xd8,
	0xe6, 0xdb, 0xa7, 0x2d, 0xbe, 0x05, 0x5a, 0xba, 0x56, 0xef, 0xae, 0x89, 0xb5, 0x78, 0xb6, 0xe7,
	0xf0, 0x0c, 0xf9, 0x3b, 0xb4, 0x18, 0x72, 0xf8, 0xf5, 0x7e, 0x0d, 0x9b, 0x15, 0x7f, 0x14, 0x68,
	0xcc, 0xd4, 0x70, 0x79, 0xd8, 0xc0, 0xe5, 0x7a, 0x2b, 0x4f, 0x96, 0xc9, 0xbc, 0x61, 0xc9, 0x9e,
	0xc3, 0x92, 0xb1, 0xbf, 0xb8, 0xa5, 0x88, 0xc3, 0x8e, 0x0f, 0xdd, 0x59, 0x3a, 0xf1, 0xb3, 0xcd,
	0x14, 0x9d, 0xbb, 0xa3, 0xf3, 0xd9, 0x02, 0x6a, 0x56, 0x5b, 0xed, 0x6c, 0xa2, 0xf3, 0x05, 0xb2,
	0x7c, 0xb1, 0x88, 0x82, 0x1b, 0x5a, 0x7e, 0xab, 0x92, 0xbb, 0x10, 0x98, 0x2f, 0x4e, 0xfe, 0x67,
	0x1d, 0x68, 0xf2, 0x96, 0x77, 0xa0, 0x34, 0x5f, 0x20, 0xd1, 0x97, 0x8b, 0x73, 0x1f, 0x6b, 0xf9,
	0xed, 0x7a, 0xf7, 0x5e, 0x78, 0x61, 0xce, 0xe3, 0x07, 0x68, 0x95, 0xc1, 0xaf, 0xf2, 0xdc, 0xb9,
	0xd3, 0x6b, 0x66, 0x16, 0xaa, 0xcf, 0xa7, 0xd5, 0xbd, 0x3e, 0x64, 0x68, 0x6c, 0x41, 0x64, 0x7e,
	0x53, 0xe3, 0x9f, 0xd0, 0xe8, 0x18, 0xe4, 0x89, 0x84, 0x0c, 0x6f, 0xf8, 0x90, 0x71, 0x47, 0xe0,
	0xc6, 0x66, 0x67, 0xcc, 0x0c, 0x85, 0xe9, 0xbb, 0xbf, 0xfd, 0xfd, 0xef, 0x1f, 0xbd, 0xb5, 0xe9,
	0xe4, 0xe0, 0xea, 0xd1, 0xfe, 0x93, 0xfd, 0x47, 0xf6, 0x5f, 0x8b, 0xa7, 0x4b, 0x1f, 0x5c, 0x0c,
	0xf5, 0x6f, 0xf6, 0x8f, 0xfe, 0x0b, 0x00, 0x00, 0xff, 0xff, 0x33, 0x5d, 0x4f, 0x7e, 0x75, 0x0c,
	0x00, 0x00,
}
