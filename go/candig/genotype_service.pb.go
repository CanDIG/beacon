// Code generated by protoc-gen-go. DO NOT EDIT.
// source: candig/genotype_service.proto

package candig

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "google/api"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Genotype int32

const (
	Genotype_HOMOZYGOUS_REF   Genotype = 0
	Genotype_HETEROZYGOUS_ALT Genotype = 1
	Genotype_HOMOZYGOUS_ALT   Genotype = 2
	Genotype_HEMIZYGOUS_REF   Genotype = 3
	Genotype_HEMIZYGOUS_ALT   Genotype = 4
	Genotype_OTHER            Genotype = 5
	Genotype_NA               Genotype = 6
)

var Genotype_name = map[int32]string{
	0: "HOMOZYGOUS_REF",
	1: "HETEROZYGOUS_ALT",
	2: "HOMOZYGOUS_ALT",
	3: "HEMIZYGOUS_REF",
	4: "HEMIZYGOUS_ALT",
	5: "OTHER",
	6: "NA",
}

var Genotype_value = map[string]int32{
	"HOMOZYGOUS_REF":   0,
	"HETEROZYGOUS_ALT": 1,
	"HOMOZYGOUS_ALT":   2,
	"HEMIZYGOUS_REF":   3,
	"HEMIZYGOUS_ALT":   4,
	"OTHER":            5,
	"NA":               6,
}

func (x Genotype) String() string {
	return proto.EnumName(Genotype_name, int32(x))
}

func (Genotype) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_0408edc795e2fc15, []int{0}
}

type GenotypeMatrix struct {
	Nindividuals         uint32     `protobuf:"varint,1,opt,name=nindividuals,proto3" json:"nindividuals,omitempty"`
	Nvariants            uint32     `protobuf:"varint,2,opt,name=nvariants,proto3" json:"nvariants,omitempty"`
	Genotypes            []Genotype `protobuf:"varint,3,rep,packed,name=genotypes,proto3,enum=candig.Genotype" json:"genotypes,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *GenotypeMatrix) Reset()         { *m = GenotypeMatrix{} }
func (m *GenotypeMatrix) String() string { return proto.CompactTextString(m) }
func (*GenotypeMatrix) ProtoMessage()    {}
func (*GenotypeMatrix) Descriptor() ([]byte, []int) {
	return fileDescriptor_0408edc795e2fc15, []int{0}
}

func (m *GenotypeMatrix) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GenotypeMatrix.Unmarshal(m, b)
}
func (m *GenotypeMatrix) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GenotypeMatrix.Marshal(b, m, deterministic)
}
func (m *GenotypeMatrix) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenotypeMatrix.Merge(m, src)
}
func (m *GenotypeMatrix) XXX_Size() int {
	return xxx_messageInfo_GenotypeMatrix.Size(m)
}
func (m *GenotypeMatrix) XXX_DiscardUnknown() {
	xxx_messageInfo_GenotypeMatrix.DiscardUnknown(m)
}

var xxx_messageInfo_GenotypeMatrix proto.InternalMessageInfo

func (m *GenotypeMatrix) GetNindividuals() uint32 {
	if m != nil {
		return m.Nindividuals
	}
	return 0
}

func (m *GenotypeMatrix) GetNvariants() uint32 {
	if m != nil {
		return m.Nvariants
	}
	return 0
}

func (m *GenotypeMatrix) GetGenotypes() []Genotype {
	if m != nil {
		return m.Genotypes
	}
	return nil
}

// ******************  /variants  *********************
// This request maps to the body of `POST /variants/search` as JSON.
type SearchGenotypesRequest struct {
	// The `VariantSet` to search.
	VariantSetId string `protobuf:"bytes,1,opt,name=variant_set_id,json=variantSetId,proto3" json:"variant_set_id,omitempty"`
	// Only return variant calls which belong to call sets with these IDs.
	// If unspecified, return all variants and no variant call objects.
	CallSetIds []string `protobuf:"bytes,2,rep,name=call_set_ids,json=callSetIds,proto3" json:"call_set_ids,omitempty"`
	// Required. Only return variants on this reference.
	ReferenceName string `protobuf:"bytes,3,opt,name=reference_name,json=referenceName,proto3" json:"reference_name,omitempty"`
	// Required. The beginning of the window (0-based, inclusive) for
	// which overlapping variants should be returned.
	// Genomic positions are non-negative integers less than reference length.
	// Requests spanning the join of circular genomes are represented as
	// two requests one on each side of the join (position 0).
	Start int64 `protobuf:"varint,4,opt,name=start,proto3" json:"start,omitempty"`
	// Required. The end of the window (0-based, exclusive) for which overlapping
	// variants should be returned.
	End int64 `protobuf:"varint,5,opt,name=end,proto3" json:"end,omitempty"`
	// Specifies the maximum number of results to return in a single page.
	// If unspecified, a system default will be used.
	PageSize int32 `protobuf:"varint,6,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// The continuation token, which is used to page through large result sets.
	// To get the next page of results, set this parameter to the value of
	// `next_page_token` from the previous response.
	PageToken            string   `protobuf:"bytes,7,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SearchGenotypesRequest) Reset()         { *m = SearchGenotypesRequest{} }
func (m *SearchGenotypesRequest) String() string { return proto.CompactTextString(m) }
func (*SearchGenotypesRequest) ProtoMessage()    {}
func (*SearchGenotypesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0408edc795e2fc15, []int{1}
}

func (m *SearchGenotypesRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SearchGenotypesRequest.Unmarshal(m, b)
}
func (m *SearchGenotypesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SearchGenotypesRequest.Marshal(b, m, deterministic)
}
func (m *SearchGenotypesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SearchGenotypesRequest.Merge(m, src)
}
func (m *SearchGenotypesRequest) XXX_Size() int {
	return xxx_messageInfo_SearchGenotypesRequest.Size(m)
}
func (m *SearchGenotypesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SearchGenotypesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SearchGenotypesRequest proto.InternalMessageInfo

func (m *SearchGenotypesRequest) GetVariantSetId() string {
	if m != nil {
		return m.VariantSetId
	}
	return ""
}

func (m *SearchGenotypesRequest) GetCallSetIds() []string {
	if m != nil {
		return m.CallSetIds
	}
	return nil
}

func (m *SearchGenotypesRequest) GetReferenceName() string {
	if m != nil {
		return m.ReferenceName
	}
	return ""
}

func (m *SearchGenotypesRequest) GetStart() int64 {
	if m != nil {
		return m.Start
	}
	return 0
}

func (m *SearchGenotypesRequest) GetEnd() int64 {
	if m != nil {
		return m.End
	}
	return 0
}

func (m *SearchGenotypesRequest) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func (m *SearchGenotypesRequest) GetPageToken() string {
	if m != nil {
		return m.PageToken
	}
	return ""
}

type SearchGenotypesResponse struct {
	// The list of matching variants that we're returning genotypes for.
	Variants []*Variant `protobuf:"bytes,1,rep,name=variants,proto3" json:"variants,omitempty"`
	// The list of callsets we're returning genotypes for
	CallSetIds           []string        `protobuf:"bytes,2,rep,name=call_set_ids,json=callSetIds,proto3" json:"call_set_ids,omitempty"`
	Genotypes            *GenotypeMatrix `protobuf:"bytes,3,opt,name=genotypes,proto3" json:"genotypes,omitempty"`
	NextPageToken        string          `protobuf:"bytes,4,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *SearchGenotypesResponse) Reset()         { *m = SearchGenotypesResponse{} }
func (m *SearchGenotypesResponse) String() string { return proto.CompactTextString(m) }
func (*SearchGenotypesResponse) ProtoMessage()    {}
func (*SearchGenotypesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0408edc795e2fc15, []int{2}
}

func (m *SearchGenotypesResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SearchGenotypesResponse.Unmarshal(m, b)
}
func (m *SearchGenotypesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SearchGenotypesResponse.Marshal(b, m, deterministic)
}
func (m *SearchGenotypesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SearchGenotypesResponse.Merge(m, src)
}
func (m *SearchGenotypesResponse) XXX_Size() int {
	return xxx_messageInfo_SearchGenotypesResponse.Size(m)
}
func (m *SearchGenotypesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SearchGenotypesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SearchGenotypesResponse proto.InternalMessageInfo

func (m *SearchGenotypesResponse) GetVariants() []*Variant {
	if m != nil {
		return m.Variants
	}
	return nil
}

func (m *SearchGenotypesResponse) GetCallSetIds() []string {
	if m != nil {
		return m.CallSetIds
	}
	return nil
}

func (m *SearchGenotypesResponse) GetGenotypes() *GenotypeMatrix {
	if m != nil {
		return m.Genotypes
	}
	return nil
}

func (m *SearchGenotypesResponse) GetNextPageToken() string {
	if m != nil {
		return m.NextPageToken
	}
	return ""
}

func init() {
	proto.RegisterEnum("candig.Genotype", Genotype_name, Genotype_value)
	proto.RegisterType((*GenotypeMatrix)(nil), "candig.GenotypeMatrix")
	proto.RegisterType((*SearchGenotypesRequest)(nil), "candig.SearchGenotypesRequest")
	proto.RegisterType((*SearchGenotypesResponse)(nil), "candig.SearchGenotypesResponse")
}

func init() { proto.RegisterFile("candig/genotype_service.proto", fileDescriptor_0408edc795e2fc15) }

var fileDescriptor_0408edc795e2fc15 = []byte{
	// 530 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x93, 0xcb, 0x6e, 0xd3, 0x40,
	0x14, 0x86, 0x99, 0xb8, 0x09, 0xf5, 0x69, 0x9b, 0x58, 0xa3, 0x52, 0xac, 0xd0, 0x80, 0x65, 0x2e,
	0xb2, 0x8a, 0xe4, 0x54, 0x81, 0x05, 0x62, 0xd7, 0x45, 0x68, 0x2a, 0x91, 0x06, 0x4d, 0x02, 0x12,
	0x6c, 0xac, 0x21, 0x3e, 0x84, 0x11, 0xe9, 0x38, 0x78, 0xa6, 0xa1, 0x74, 0x59, 0x96, 0x2c, 0x79,
	0x27, 0x5e, 0x80, 0x57, 0x60, 0xc7, 0x4b, 0x20, 0x8f, 0xed, 0x34, 0x0d, 0x20, 0xb1, 0x4b, 0xbe,
	0xff, 0x9f, 0x73, 0xf5, 0x81, 0xd6, 0x98, 0xcb, 0x58, 0x4c, 0xda, 0x13, 0x94, 0x89, 0xfe, 0x3c,
	0xc3, 0x48, 0x61, 0x3a, 0x17, 0x63, 0x0c, 0x67, 0x69, 0xa2, 0x13, 0x5a, 0xcb, 0xe5, 0xe6, 0x8d,
	0xc2, 0x36, 0xe7, 0xa9, 0xe0, 0x52, 0xab, 0x5c, 0x6e, 0xee, 0x4e, 0x92, 0x64, 0x32, 0xc5, 0x36,
	0x9f, 0x89, 0x36, 0x97, 0x32, 0xd1, 0x5c, 0x8b, 0x44, 0x16, 0xaa, 0x7f, 0x41, 0xa0, 0x7e, 0x58,
	0xc4, 0xed, 0x73, 0x9d, 0x8a, 0x33, 0xea, 0xc3, 0xa6, 0x14, 0x32, 0x16, 0x73, 0x11, 0x9f, 0xf2,
	0xa9, 0x72, 0x89, 0x47, 0x82, 0x2d, 0x76, 0x85, 0xd1, 0x5d, 0xb0, 0x65, 0x99, 0xc7, 0xad, 0x18,
	0xc3, 0x25, 0xa0, 0x21, 0xd8, 0x65, 0xad, 0xca, 0xb5, 0x3c, 0x2b, 0xa8, 0x77, 0x9c, 0x30, 0xaf,
	0x2e, 0x2c, 0x93, 0xb1, 0x4b, 0x8b, 0xff, 0x8b, 0xc0, 0xce, 0x10, 0x79, 0x3a, 0x7e, 0x5f, 0xaa,
	0x8a, 0xe1, 0xc7, 0x53, 0x54, 0x9a, 0xde, 0x83, 0x7a, 0x11, 0x36, 0x52, 0xa8, 0x23, 0x11, 0x9b,
	0x72, 0x6c, 0xb6, 0x59, 0xd0, 0x21, 0xea, 0xa3, 0x98, 0x7a, 0xb0, 0x39, 0xe6, 0xd3, 0x69, 0x61,
	0xc9, 0x2a, 0xb2, 0x02, 0x9b, 0x41, 0xc6, 0x8c, 0x41, 0xd1, 0xfb, 0x50, 0x4f, 0xf1, 0x1d, 0xa6,
	0x28, 0xc7, 0x18, 0x49, 0x7e, 0x82, 0xae, 0x65, 0xe2, 0x6c, 0x2d, 0xe8, 0x31, 0x3f, 0x41, 0xba,
	0x0d, 0x55, 0xa5, 0x79, 0xaa, 0xdd, 0x35, 0x8f, 0x04, 0x16, 0xcb, 0xff, 0x50, 0x07, 0x2c, 0x94,
	0xb1, 0x5b, 0x35, 0x2c, 0xfb, 0x49, 0x6f, 0x81, 0x3d, 0xe3, 0x13, 0x8c, 0x94, 0x38, 0x47, 0xb7,
	0xe6, 0x91, 0xa0, 0xca, 0xd6, 0x33, 0x30, 0x14, 0xe7, 0x48, 0x5b, 0x00, 0x46, 0xd4, 0xc9, 0x07,
	0x94, 0xee, 0x75, 0x93, 0xc7, 0xd8, 0x47, 0x19, 0xf0, 0xbf, 0x13, 0xb8, 0xf9, 0x47, 0xb7, 0x6a,
	0x96, 0x48, 0x85, 0xf4, 0x21, 0xac, 0x2f, 0xc6, 0x4a, 0x3c, 0x2b, 0xd8, 0xe8, 0x34, 0xca, 0xc1,
	0xbd, 0xca, 0x39, 0x5b, 0x18, 0xfe, 0xa3, 0xeb, 0xc7, 0x57, 0x17, 0x41, 0x82, 0x8d, 0xce, 0xce,
	0xea, 0x22, 0xf2, 0xad, 0x2f, 0xad, 0x83, 0x3e, 0x80, 0x86, 0xc4, 0x33, 0x1d, 0x2d, 0x35, 0xb1,
	0x96, 0x0f, 0x2b, 0xc3, 0x2f, 0xca, 0x46, 0xf6, 0xbe, 0x10, 0x58, 0x2f, 0xa3, 0x50, 0x0a, 0xf5,
	0xde, 0xa0, 0x3f, 0x78, 0xf3, 0xfa, 0x70, 0xf0, 0x72, 0x18, 0xb1, 0xee, 0x33, 0xe7, 0x1a, 0xdd,
	0x06, 0xa7, 0xd7, 0x1d, 0x75, 0x59, 0x49, 0x0f, 0x9e, 0x8f, 0x1c, 0xb2, 0xe2, 0xcc, 0x58, 0xc5,
	0xb0, 0x6e, 0xff, 0x68, 0xe9, 0xb5, 0xb5, 0xc2, 0x32, 0xdf, 0x1a, 0xb5, 0xa1, 0x3a, 0x18, 0xf5,
	0xba, 0xcc, 0xa9, 0xd2, 0x1a, 0x54, 0x8e, 0x0f, 0x9c, 0x5a, 0xe7, 0x2b, 0x01, 0x67, 0x31, 0xc8,
	0x61, 0x7e, 0x19, 0xf4, 0x13, 0x34, 0x56, 0x46, 0x4c, 0x6f, 0x97, 0x8d, 0xff, 0xfd, 0x4b, 0x6b,
	0xde, 0xf9, 0xa7, 0x9e, 0xef, 0xc6, 0xbf, 0x7b, 0xf1, 0xe3, 0xe7, 0xb7, 0x4a, 0xcb, 0x77, 0xdb,
	0xf3, 0xfd, 0xf0, 0x49, 0xb8, 0xbf, 0xb8, 0x47, 0xd5, 0x56, 0xe6, 0xc9, 0x53, 0xb2, 0xf7, 0xb6,
	0x66, 0xce, 0xea, 0xd1, 0xef, 0x00, 0x00, 0x00, 0xff, 0xff, 0x46, 0x64, 0xc6, 0xd2, 0xb4, 0x03,
	0x00, 0x00,
}
