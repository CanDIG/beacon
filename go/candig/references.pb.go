// Code generated by protoc-gen-go. DO NOT EDIT.
// source: candig/references.proto

package candig

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// A `Reference` is a canonical assembled contig, intended to act as a
// reference coordinate space for other genomic annotations. A single
// `Reference` might represent the human chromosome 1, for instance.
//
// `Reference` s are designed to be immutable.
type Reference struct {
	// The reference ID. Unique within the repository.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The length of this reference's sequence.
	Length int64 `protobuf:"varint,2,opt,name=length,proto3" json:"length,omitempty"`
	// The MD5 checksum uniquely representing this `Reference` as a lower-case
	// hexadecimal string, calculated as the MD5 of the upper-case sequence
	// excluding all whitespace characters (this is equivalent to SQ:M5 in SAM).
	Md5Checksum string `protobuf:"bytes,3,opt,name=md5checksum,proto3" json:"md5checksum,omitempty"`
	// The unique name of this reference within the Reference Set (e.g. '22').
	Name string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	// The URI from which the sequence was obtained. Specifies a FASTA format
	// file/string with one name, sequence pair. In most cases, clients should
	// call
	// the `getReferenceBases()` method to obtain sequence bases for a `Reference`
	// instead of attempting to retrieve this URI.
	SourceUri string `protobuf:"bytes,5,opt,name=source_uri,json=sourceUri,proto3" json:"source_uri,omitempty"`
	// All known corresponding accession IDs in INSDC (GenBank/ENA/DDBJ) which
	// must include
	// a version number, e.g. `GCF_000001405.26`.
	SourceAccessions []string `protobuf:"bytes,6,rep,name=source_accessions,json=sourceAccessions,proto3" json:"source_accessions,omitempty"`
	// A sequence X is said to be derived from source sequence Y, if X and Y
	// are of the same length and the per-base sequence divergence at A/C/G/T
	// bases
	// is sufficiently small. Two sequences derived from the same official
	// sequence share the same coordinates and annotations, and
	// can be replaced with the official sequence for certain use cases.
	IsDerived bool `protobuf:"varint,7,opt,name=is_derived,json=isDerived,proto3" json:"is_derived,omitempty"`
	// The `sourceDivergence` is the fraction of non-indel bases that do not match
	// the
	// reference this message was derived from.
	SourceDivergence float32 `protobuf:"fixed32,8,opt,name=source_divergence,json=sourceDivergence,proto3" json:"source_divergence,omitempty"`
	// For a representation of an NCBI Taxon ID as an OntologyTerm, see
	// NCBITaxon Ontology
	//   http://www.obofoundry.org/ontology/ncbitaxon.html
	// For example, 'Homo sapiens' has the ID 9606. The NCBITaxon ontology ID for
	// this is NCBITaxon:9606, which has the URI
	// http://purl.obolibrary.org/obo/NCBITaxon_9606
	Species *OntologyTerm `protobuf:"bytes,10,opt,name=species,proto3" json:"species,omitempty"`
	// A map of additional information.
	Attributes           *Attributes `protobuf:"bytes,11,opt,name=attributes,proto3" json:"attributes,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *Reference) Reset()         { *m = Reference{} }
func (m *Reference) String() string { return proto.CompactTextString(m) }
func (*Reference) ProtoMessage()    {}
func (*Reference) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c6012f2c29118a7, []int{0}
}

func (m *Reference) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Reference.Unmarshal(m, b)
}
func (m *Reference) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Reference.Marshal(b, m, deterministic)
}
func (m *Reference) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Reference.Merge(m, src)
}
func (m *Reference) XXX_Size() int {
	return xxx_messageInfo_Reference.Size(m)
}
func (m *Reference) XXX_DiscardUnknown() {
	xxx_messageInfo_Reference.DiscardUnknown(m)
}

var xxx_messageInfo_Reference proto.InternalMessageInfo

func (m *Reference) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Reference) GetLength() int64 {
	if m != nil {
		return m.Length
	}
	return 0
}

func (m *Reference) GetMd5Checksum() string {
	if m != nil {
		return m.Md5Checksum
	}
	return ""
}

func (m *Reference) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Reference) GetSourceUri() string {
	if m != nil {
		return m.SourceUri
	}
	return ""
}

func (m *Reference) GetSourceAccessions() []string {
	if m != nil {
		return m.SourceAccessions
	}
	return nil
}

func (m *Reference) GetIsDerived() bool {
	if m != nil {
		return m.IsDerived
	}
	return false
}

func (m *Reference) GetSourceDivergence() float32 {
	if m != nil {
		return m.SourceDivergence
	}
	return 0
}

func (m *Reference) GetSpecies() *OntologyTerm {
	if m != nil {
		return m.Species
	}
	return nil
}

func (m *Reference) GetAttributes() *Attributes {
	if m != nil {
		return m.Attributes
	}
	return nil
}

// A `ReferenceSet` is a set of `Reference` s which typically comprise a
// reference assembly, such as `GRCh38`. A `ReferenceSet` defines a common
// coordinate space for comparing reference-aligned experimental data.
type ReferenceSet struct {
	// The reference set ID. Unique in the repository.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The reference set name.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Order-independent MD5 checksum which identifies this `ReferenceSet`.
	//
	// To compute this checksum, make a list of `Reference.md5checksum` for all
	// `Reference` s in this set. Then sort that list, and take the MD5 hash of
	// all the strings concatenated together. Express the hash as a lower-case
	// hexadecimal string.
	Md5Checksum string `protobuf:"bytes,3,opt,name=md5checksum,proto3" json:"md5checksum,omitempty"`
	// For a representation of an NCBI Taxon ID as an OntologyTerm, see
	// NCBITaxon Ontology
	//   http://www.obofoundry.org/ontology/ncbitaxon.html
	// For example, 'Homo sapiens' has the ID 9606. The NCBITaxon ontology ID for
	// this is NCBITaxon:9606, which has the URI
	// http://purl.obolibrary.org/obo/NCBITaxon_9606
	Species *OntologyTerm `protobuf:"bytes,10,opt,name=species,proto3" json:"species,omitempty"`
	// Optional free text description of this reference set.
	Description string `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	// The remaining information is about the source of the sequences
	// Public id of this reference set, such as `GRCh37`.
	AssemblyId string `protobuf:"bytes,6,opt,name=assembly_id,json=assemblyId,proto3" json:"assembly_id,omitempty"`
	// Specifies a FASTA format file/string.
	SourceUri string `protobuf:"bytes,7,opt,name=source_uri,json=sourceUri,proto3" json:"source_uri,omitempty"`
	// All known corresponding accession IDs in INSDC (GenBank/ENA/DDBJ) ideally
	// with a version number, e.g. `NC_000001.11`.
	SourceAccessions []string `protobuf:"bytes,8,rep,name=source_accessions,json=sourceAccessions,proto3" json:"source_accessions,omitempty"`
	// A reference set may be derived from a source if it contains
	// additional sequences, or some of the sequences within it are derived
	// (see the definition of `isDerived` in `Reference`).
	IsDerived bool `protobuf:"varint,9,opt,name=is_derived,json=isDerived,proto3" json:"is_derived,omitempty"`
	// A map of additional information.
	Attributes           *Attributes `protobuf:"bytes,11,opt,name=attributes,proto3" json:"attributes,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *ReferenceSet) Reset()         { *m = ReferenceSet{} }
func (m *ReferenceSet) String() string { return proto.CompactTextString(m) }
func (*ReferenceSet) ProtoMessage()    {}
func (*ReferenceSet) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c6012f2c29118a7, []int{1}
}

func (m *ReferenceSet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReferenceSet.Unmarshal(m, b)
}
func (m *ReferenceSet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReferenceSet.Marshal(b, m, deterministic)
}
func (m *ReferenceSet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReferenceSet.Merge(m, src)
}
func (m *ReferenceSet) XXX_Size() int {
	return xxx_messageInfo_ReferenceSet.Size(m)
}
func (m *ReferenceSet) XXX_DiscardUnknown() {
	xxx_messageInfo_ReferenceSet.DiscardUnknown(m)
}

var xxx_messageInfo_ReferenceSet proto.InternalMessageInfo

func (m *ReferenceSet) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *ReferenceSet) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ReferenceSet) GetMd5Checksum() string {
	if m != nil {
		return m.Md5Checksum
	}
	return ""
}

func (m *ReferenceSet) GetSpecies() *OntologyTerm {
	if m != nil {
		return m.Species
	}
	return nil
}

func (m *ReferenceSet) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *ReferenceSet) GetAssemblyId() string {
	if m != nil {
		return m.AssemblyId
	}
	return ""
}

func (m *ReferenceSet) GetSourceUri() string {
	if m != nil {
		return m.SourceUri
	}
	return ""
}

func (m *ReferenceSet) GetSourceAccessions() []string {
	if m != nil {
		return m.SourceAccessions
	}
	return nil
}

func (m *ReferenceSet) GetIsDerived() bool {
	if m != nil {
		return m.IsDerived
	}
	return false
}

func (m *ReferenceSet) GetAttributes() *Attributes {
	if m != nil {
		return m.Attributes
	}
	return nil
}

func init() {
	proto.RegisterType((*Reference)(nil), "candig.Reference")
	proto.RegisterType((*ReferenceSet)(nil), "candig.ReferenceSet")
}

func init() { proto.RegisterFile("candig/references.proto", fileDescriptor_1c6012f2c29118a7) }

var fileDescriptor_1c6012f2c29118a7 = []byte{
	// 361 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x92, 0x5f, 0x4b, 0xeb, 0x30,
	0x18, 0xc6, 0x69, 0xb7, 0xd3, 0xad, 0x6f, 0x0f, 0x87, 0x63, 0x14, 0x0d, 0x82, 0x18, 0x76, 0x55,
	0x10, 0x2a, 0x4c, 0xfc, 0x00, 0x83, 0xdd, 0x78, 0x25, 0x54, 0xbd, 0x1e, 0x5d, 0xf2, 0xda, 0x05,
	0xd7, 0x64, 0x24, 0xe9, 0x60, 0x1f, 0x58, 0x3f, 0x87, 0xac, 0xff, 0x28, 0xf3, 0xc2, 0xe9, 0x5d,
	0xfb, 0x3c, 0xef, 0xf3, 0x92, 0xfc, 0x9e, 0xc0, 0x05, 0xcf, 0x94, 0x90, 0xf9, 0xad, 0xc1, 0x57,
	0x34, 0xa8, 0x38, 0xda, 0x64, 0x63, 0xb4, 0xd3, 0x24, 0xa8, 0x8d, 0xcb, 0xd3, 0x66, 0x80, 0xeb,
	0xa2, 0xd0, 0xaa, 0x36, 0x27, 0xef, 0x3e, 0x84, 0x69, 0x9b, 0x20, 0xff, 0xc0, 0x97, 0x82, 0x7a,
	0xcc, 0x8b, 0xc3, 0xd4, 0x97, 0x82, 0x9c, 0x43, 0xb0, 0x46, 0x95, 0xbb, 0x15, 0xf5, 0x99, 0x17,
	0x0f, 0xd2, 0xe6, 0x8f, 0x30, 0x88, 0x0a, 0x71, 0xcf, 0x57, 0xc8, 0xdf, 0x6c, 0x59, 0xd0, 0x41,
	0x15, 0xe8, 0x4b, 0x84, 0xc0, 0x50, 0x65, 0x05, 0xd2, 0x61, 0x65, 0x55, 0xdf, 0xe4, 0x0a, 0xc0,
	0xea, 0xd2, 0x70, 0x5c, 0x94, 0x46, 0xd2, 0x3f, 0x95, 0x13, 0xd6, 0xca, 0x8b, 0x91, 0xe4, 0x06,
	0x4e, 0x1a, 0x3b, 0xe3, 0x1c, 0xad, 0x95, 0x5a, 0x59, 0x1a, 0xb0, 0x41, 0x1c, 0xa6, 0xff, 0x6b,
	0x63, 0xd6, 0xe9, 0xfb, 0x5d, 0xd2, 0x2e, 0x04, 0x1a, 0xb9, 0x45, 0x41, 0x47, 0xcc, 0x8b, 0xc7,
	0x69, 0x28, 0xed, 0xbc, 0x16, 0x7a, 0xbb, 0x84, 0xdc, 0xa2, 0xc9, 0xf7, 0xb7, 0xa3, 0x63, 0xe6,
	0xc5, 0x7e, 0xbb, 0x6b, 0xde, 0xe9, 0x24, 0x81, 0x91, 0xdd, 0x20, 0x97, 0x68, 0x29, 0x30, 0x2f,
	0x8e, 0xa6, 0x67, 0x49, 0x8d, 0x2a, 0x79, 0x54, 0x4e, 0xaf, 0x75, 0xbe, 0x7b, 0x46, 0x53, 0xa4,
	0xed, 0x10, 0x99, 0x02, 0x64, 0xce, 0x19, 0xb9, 0x2c, 0x1d, 0x5a, 0x1a, 0x55, 0x11, 0xd2, 0x46,
	0x66, 0x9d, 0x93, 0xf6, 0xa6, 0x26, 0x1f, 0x3e, 0xfc, 0xed, 0x38, 0x3f, 0xa1, 0xfb, 0x82, 0xba,
	0x05, 0xe6, 0xf7, 0x80, 0x7d, 0x8f, 0xf9, 0xa7, 0x47, 0x67, 0x10, 0x09, 0xb4, 0xdc, 0xc8, 0x8d,
	0x93, 0x5a, 0x35, 0x1d, 0xf4, 0x25, 0x72, 0x0d, 0x51, 0x66, 0x2d, 0x16, 0xcb, 0xf5, 0x6e, 0x21,
	0x05, 0x0d, 0xaa, 0x09, 0x68, 0xa5, 0x07, 0x71, 0xd0, 0xe2, 0xe8, 0xa8, 0x16, 0xc7, 0x47, 0xb5,
	0x18, 0x1e, 0xb6, 0xf8, 0x0b, 0xd0, 0xcb, 0xa0, 0x7a, 0xd7, 0x77, 0x9f, 0x01, 0x00, 0x00, 0xff,
	0xff, 0xc7, 0xb2, 0x3b, 0x4a, 0x0f, 0x03, 0x00, 0x00,
}
